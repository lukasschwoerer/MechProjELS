var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"StepperRTM","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'StepperRTM'.\r\n *\r\n * Model version                  : 3.14\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Thu Nov 25 22:07:20 2021\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"StepperRTM.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nvolatile int IsrOverrun = 0;\r\nstatic boolean_T OverrunFlag = 0;\r\nvoid rt_OneStep(void)\r\n{\r\n  /* Global variables used by function prototype control */\r\n\r\n  /* '<Root>/DesSteps' */\r\n  static uint16_T arg_DesSteps = 0U;\r\n\r\n  /* '<Root>/Stepper_Trigger' */\r\n  static uint16_T arg_Stepper_Trigger[2] = { 0U, 0U };\r\n\r\n  /* '<Root>/StepBit' */\r\n  static uint16_T arg_StepBit;\r\n\r\n  /* Check for overrun. Protect OverrunFlag against preemption */\r\n  if (OverrunFlag++) {\r\n    IsrOverrun = 1;\r\n    OverrunFlag--;\r\n    return;\r\n  }\r\n\r\n  enableTimer0Interrupt();\r\n  StepperRTM_step(arg_DesSteps, arg_Stepper_Trigger, &arg_StepBit);\r\n\r\n  /* Get model outputs here */\r\n  disableTimer0Interrupt();\r\n  OverrunFlag--;\r\n}\r\n\r\nvolatile boolean_T stopRequested;\r\nvolatile boolean_T runModel;\r\nint main(void)\r\n{\r\n  float modelBaseRate = 5.0E-6;\r\n  float systemClock = 100;\r\n\r\n  /* Initialize variables */\r\n  stopRequested = false;\r\n  runModel = false;\r\n  c2000_flash_init();\r\n  init_board();\r\n\r\n#ifdef MW_EXEC_PROFILER_ON\r\n\r\n  config_profilerTimer();\r\n\r\n#endif\r\n\r\n  ;\r\n  ((void) 0);\r\n  StepperRTM_initialize();\r\n  globalInterruptDisable();\r\n  configureTimer0(modelBaseRate, systemClock);\r\n  runModel = true;\r\n  enableTimer0Interrupt();\r\n  globalInterruptEnable();\r\n  while (runModel) {\r\n  }\r\n\r\n  globalInterruptDisable();\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"StepperRTM.c","type":"source","group":"model","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: StepperRTM.c\r\n *\r\n * Code generated for Simulink model 'StepperRTM'.\r\n *\r\n * Model version                  : 3.14\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Thu Nov 25 22:07:20 2021\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"StepperRTM.h\"\r\n#include \"StepperRTM_private.h\"\r\n\r\n/* Named constants for Chart: '<Root>/Chart' */\r\n#define StepperRTM_event_POR           (1L)\r\n#define StepperRTM_event_Takt          (0L)\r\n#define StepperRTM_IN_HighNoOF         (1U)\r\n#define StepperRTM_IN_Idle             (2U)\r\n#define StepperRTM_IN_Main             (1U)\r\n#define StepperRTM_IN_NO_ACTIVE_CHILD  (0U)\r\n#define StepperRTM_IN_Reset            (2U)\r\n\r\n/* Block signals (default storage) */\r\nB_StepperRTM_T StepperRTM_B;\r\n\r\n/* Block states (default storage) */\r\nDW_StepperRTM_T StepperRTM_DW;\r\n\r\n/* Previous zero-crossings (trigger) states */\r\nPrevZCX_StepperRTM_T StepperRTM_PrevZCX;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU_StepperRTM_T StepperRTM_U;\r\n\r\n/* Forward declaration for local functions */\r\nstatic void Stepper_chartstep_c3_StepperRTM(const int32_T *sfEvent);\r\n\r\n/* Function for Chart: '<Root>/Chart' */\r\nstatic void Stepper_chartstep_c3_StepperRTM(const int32_T *sfEvent)\r\n{\r\n  /* Chart: '<Root>/Chart' incorporates:\r\n   *  Inport: '<Root>/DesSteps'\r\n   */\r\n  /* During: Chart */\r\n  if (StepperRTM_DW.is_active_c3_StepperRTM == 0U) {\r\n    /* Entry: Chart */\r\n    StepperRTM_DW.is_active_c3_StepperRTM = 1U;\r\n\r\n    /* Entry Internal: Chart */\r\n    /* Transition: '<S1>:12' */\r\n    StepperRTM_DW.is_c3_StepperRTM = StepperRTM_IN_Reset;\r\n\r\n    /* Entry 'Reset': '<S1>:10' */\r\n    StepperRTM_B.StepBit = 0U;\r\n  } else if (StepperRTM_DW.is_c3_StepperRTM == 1U) {\r\n    /* During 'Main': '<S1>:4' */\r\n    if (StepperRTM_DW.is_Main == 1U) {\r\n      /* During 'HighNoOF': '<S1>:162' */\r\n      /* Transition: '<S1>:171' */\r\n      StepperRTM_DW.is_Main = StepperRTM_IN_Idle;\r\n\r\n      /* Entry 'Idle': '<S1>:23' */\r\n      StepperRTM_B.StepBit = 0U;\r\n    } else {\r\n      StepperRTM_B.StepBit = 0U;\r\n\r\n      /* During 'Idle': '<S1>:23' */\r\n      if (StepperRTM_DW.CurPos != StepperRTM_U.DesSteps) {\r\n        /* Transition: '<S1>:170' */\r\n        StepperRTM_DW.is_Main = StepperRTM_IN_HighNoOF;\r\n\r\n        /* Entry 'HighNoOF': '<S1>:162' */\r\n        StepperRTM_B.StepBit = 1U;\r\n        StepperRTM_DW.CurPos++;\r\n      }\r\n    }\r\n  } else {\r\n    StepperRTM_B.StepBit = 0U;\r\n\r\n    /* During 'Reset': '<S1>:10' */\r\n    if (*sfEvent == StepperRTM_event_POR) {\r\n      /* Transition: '<S1>:11' */\r\n      StepperRTM_DW.is_c3_StepperRTM = StepperRTM_IN_Main;\r\n\r\n      /* Entry Internal 'Main': '<S1>:4' */\r\n      /* Transition: '<S1>:24' */\r\n      StepperRTM_DW.is_Main = StepperRTM_IN_Idle;\r\n\r\n      /* Entry 'Idle': '<S1>:23' */\r\n      StepperRTM_B.StepBit = 0U;\r\n    }\r\n  }\r\n\r\n  /* End of Chart: '<Root>/Chart' */\r\n}\r\n\r\n/* Model step function */\r\nvoid StepperRTM_step(uint16_T arg_DesSteps, uint16_T arg_Stepper_Trigger[2],\r\n                     uint16_T *arg_StepBit)\r\n{\r\n  int32_T sfEvent;\r\n  int16_T tmp;\r\n  int16_T tmp_0;\r\n  boolean_T zcEvent;\r\n  boolean_T zcEvent_idx_0;\r\n\r\n  /* Copy value for root inport '<Root>/DesSteps' since it is accessed globally */\r\n  StepperRTM_U.DesSteps = arg_DesSteps;\r\n\r\n  /* Chart: '<Root>/Chart' incorporates:\r\n   *  TriggerPort: '<S1>/input events'\r\n   */\r\n  /* Inport: '<Root>/Stepper_Trigger' */\r\n  zcEvent_idx_0 = (((arg_Stepper_Trigger[0] > 0U) !=\r\n                    (StepperRTM_PrevZCX.Chart_Trig_ZCE[0] == POS_ZCSIG)) &&\r\n                   (StepperRTM_PrevZCX.Chart_Trig_ZCE[0] != UNINITIALIZED_ZCSIG));\r\n  zcEvent = (((arg_Stepper_Trigger[1] > 0U) !=\r\n              (StepperRTM_PrevZCX.Chart_Trig_ZCE[1] == POS_ZCSIG)) &&\r\n             (StepperRTM_PrevZCX.Chart_Trig_ZCE[1] != UNINITIALIZED_ZCSIG));\r\n  if (zcEvent_idx_0 || zcEvent) {\r\n    /* Inport: '<Root>/Stepper_Trigger' */\r\n    tmp_0 = (int16_T)(zcEvent_idx_0 ? (int16_T)arg_Stepper_Trigger[0] > 0 ?\r\n                      RISING_ZCEVENT : FALLING_ZCEVENT : NO_ZCEVENT);\r\n    tmp = (int16_T)(zcEvent ? (int16_T)arg_Stepper_Trigger[1] > 0 ?\r\n                    RISING_ZCEVENT : FALLING_ZCEVENT : NO_ZCEVENT);\r\n\r\n    /* Gateway: Chart */\r\n    if (((tmp_0 & 128U) != 0U ? tmp_0 | -128 : tmp_0 & 127) != 0) {\r\n      /* Event: '<S1>:14' */\r\n      sfEvent = StepperRTM_event_Takt;\r\n      Stepper_chartstep_c3_StepperRTM(&sfEvent);\r\n    }\r\n\r\n    if (((tmp & 128U) != 0U ? tmp | -128 : tmp & 127) == 1) {\r\n      /* Event: '<S1>:13' */\r\n      sfEvent = StepperRTM_event_POR;\r\n      Stepper_chartstep_c3_StepperRTM(&sfEvent);\r\n    }\r\n  }\r\n\r\n  /* Inport: '<Root>/Stepper_Trigger' */\r\n  StepperRTM_PrevZCX.Chart_Trig_ZCE[0] = (ZCSigState)(arg_Stepper_Trigger[0] >\r\n    0U);\r\n  StepperRTM_PrevZCX.Chart_Trig_ZCE[1] = (ZCSigState)(arg_Stepper_Trigger[1] >\r\n    0U);\r\n\r\n  /* Outport: '<Root>/StepBit' */\r\n  *arg_StepBit = StepperRTM_B.StepBit;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid StepperRTM_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* block I/O */\r\n  (void) memset(((void *) &StepperRTM_B), 0,\r\n                sizeof(B_StepperRTM_T));\r\n\r\n  /* states (dwork) */\r\n  (void) memset((void *)&StepperRTM_DW, 0,\r\n                sizeof(DW_StepperRTM_T));\r\n  StepperRTM_PrevZCX.Chart_Trig_ZCE[0] = UNINITIALIZED_ZCSIG;\r\n  StepperRTM_PrevZCX.Chart_Trig_ZCE[1] = UNINITIALIZED_ZCSIG;\r\n\r\n  /* SystemInitialize for Chart: '<Root>/Chart' */\r\n  StepperRTM_DW.is_Main = StepperRTM_IN_NO_ACTIVE_CHILD;\r\n  StepperRTM_DW.is_active_c3_StepperRTM = 0U;\r\n  StepperRTM_DW.is_c3_StepperRTM = StepperRTM_IN_NO_ACTIVE_CHILD;\r\n  StepperRTM_DW.CurPos = 0U;\r\n  StepperRTM_B.StepBit = 0U;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"StepperRTM.h","type":"header","group":"model","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: StepperRTM.h\r\n *\r\n * Code generated for Simulink model 'StepperRTM'.\r\n *\r\n * Model version                  : 3.14\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Thu Nov 25 22:07:20 2021\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_StepperRTM_h_\r\n#define RTW_HEADER_StepperRTM_h_\r\n#include <string.h>\r\n#ifndef StepperRTM_COMMON_INCLUDES_\r\n#define StepperRTM_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"zero_crossing_types.h\"\r\n#endif                                 /* StepperRTM_COMMON_INCLUDES_ */\r\n\r\n#include \"StepperRTM_types.h\"\r\n#include \"MW_target_hardware_resources.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\nvoid MW_InitSysPll(uint16_T clock_source, uint16_T imult, uint16_T fmult,\r\n                   uint16_T odiv, uint16_T divsel);\r\nextern void configureIXbar(void);\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  uint16_T StepBit;                    /* '<Root>/Chart' */\r\n} B_StepperRTM_T;\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  uint16_T CurPos;                     /* '<Root>/Chart' */\r\n  uint16_T is_active_c3_StepperRTM;    /* '<Root>/Chart' */\r\n  uint16_T is_c3_StepperRTM;           /* '<Root>/Chart' */\r\n  uint16_T is_Main;                    /* '<Root>/Chart' */\r\n} DW_StepperRTM_T;\r\n\r\n/* Zero-crossing (trigger) state */\r\ntypedef struct {\r\n  ZCSigState Chart_Trig_ZCE[2];        /* '<Root>/Chart' */\r\n} PrevZCX_StepperRTM_T;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  uint16_T DesSteps;                   /* '<Root>/DesSteps' */\r\n} ExtU_StepperRTM_T;\r\n\r\n/* Block signals (default storage) */\r\nextern B_StepperRTM_T StepperRTM_B;\r\n\r\n/* Block states (default storage) */\r\nextern DW_StepperRTM_T StepperRTM_DW;\r\n\r\n/* Zero-crossing (trigger) state */\r\nextern PrevZCX_StepperRTM_T StepperRTM_PrevZCX;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU_StepperRTM_T StepperRTM_U;\r\n\r\n/* Model entry point functions */\r\nextern void StepperRTM_initialize(void);\r\n\r\n/* Customized model step function */\r\nextern void StepperRTM_step(uint16_T arg_DesSteps, uint16_T arg_Stepper_Trigger\r\n  [2], uint16_T *arg_StepBit);\r\nextern volatile boolean_T stopRequested;\r\nextern volatile boolean_T runModel;\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'StepperRTM'\r\n * '<S1>'   : 'StepperRTM/Chart'\r\n */\r\n#endif                                 /* RTW_HEADER_StepperRTM_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"StepperRTM_private.h","type":"header","group":"model","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: StepperRTM_private.h\r\n *\r\n * Code generated for Simulink model 'StepperRTM'.\r\n *\r\n * Model version                  : 3.14\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Thu Nov 25 22:07:20 2021\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_StepperRTM_private_h_\r\n#define RTW_HEADER_StepperRTM_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"zero_crossing_types.h\"\r\n#endif                                 /* RTW_HEADER_StepperRTM_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"StepperRTM_types.h","type":"header","group":"model","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: StepperRTM_types.h\r\n *\r\n * Code generated for Simulink model 'StepperRTM'.\r\n *\r\n * Model version                  : 3.14\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Thu Nov 25 22:07:20 2021\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_StepperRTM_types_h_\r\n#define RTW_HEADER_StepperRTM_types_h_\r\n\r\n/* Model Code Variants */\r\n#endif                                 /* RTW_HEADER_StepperRTM_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'StepperRTM'.\r\n *\r\n * Model version                  : 3.14\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Thu Nov 25 22:07:20 2021\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Texas Instruments->C2000\r\n *   Number of bits:     char:  16    short:   16    int:  16\r\n *                       long:  32    long long:  64\r\n *                       native word size:  16\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *                                                                       *\r\n *                                                                       *\r\n *   Note:  Because the specified hardware does not have native support  *\r\n *          for all data sizes, some data types are actually typedef'ed  *\r\n *          from larger native data sizes.  The following data types are *\r\n *          not in the ideal native data types:                          *\r\n *                                                                       *\r\n *          int8_T, uint8_T                                              *\r\n *=======================================================================*/\r\ntypedef int int8_T;\r\ntypedef unsigned int uint8_T;\r\ntypedef int int16_T;\r\ntypedef unsigned int uint16_T;\r\ntypedef long int32_T;\r\ntypedef unsigned long uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned int boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n#define CINT64_T\r\n\r\ntypedef struct {\r\n  int64_T re;\r\n  int64_T im;\r\n} cint64_T;\r\n\r\n#define CUINT64_T\r\n\r\ntypedef struct {\r\n  uint64_T re;\r\n  uint64_T im;\r\n} cuint64_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647L))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647L-1L))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFUL))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"zero_crossing_types.h","type":"header","group":"utility","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: zero_crossing_types.h\r\n *\r\n * Code generated for Simulink model 'StepperRTM'.\r\n *\r\n * Model version                  : 3.14\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Thu Nov 25 22:07:20 2021\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef ZERO_CROSSING_TYPES_H\r\n#define ZERO_CROSSING_TYPES_H\r\n#include \"rtwtypes.h\"\r\n\r\n/* Trigger directions: falling, either, and rising */\r\ntypedef enum {\r\n  FALLING_ZERO_CROSSING = -1,\r\n  ANY_ZERO_CROSSING = 0,\r\n  RISING_ZERO_CROSSING = 1\r\n} ZCDirection;\r\n\r\n/* Previous state of a trigger signal */\r\ntypedef uint8_T ZCSigState;\r\n\r\n/* Initial value of a trigger zero crossing signal */\r\n#define UNINITIALIZED_ZCSIG            0x03U\r\n#define NEG_ZCSIG                      0x02U\r\n#define POS_ZCSIG                      0x01U\r\n#define ZERO_ZCSIG                     0x00U\r\n\r\n/* Current state of a trigger signal */\r\ntypedef enum {\r\n  FALLING_ZCEVENT = -1,\r\n  NO_ZCEVENT = 0,\r\n  RISING_ZCEVENT = 1\r\n} ZCEventType;\r\n\r\n#endif                                 /* ZERO_CROSSING_TYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtmodel.h\r\n *\r\n * Code generated for Simulink model 'StepperRTM'.\r\n *\r\n * Model version                  : 3.14\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Thu Nov 25 22:07:20 2021\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n#include \"StepperRTM.h\"\r\n#define MODEL_STEP_FCN_CONTROL_USED    1\r\n\r\n/* Macros generated for backwards compatibility  */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((void*) 0)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((void) 0)\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"MW_c28xGPIO.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ProgramData\\MATLAB\\SupportPackages\\R2021b\\toolbox\\shared\\supportpackages\\tic2000\\src","tag":"","groupDisplay":"Other files","code":"/*####################################################\n * FILE: MW_c28xGPIO.c\n * TITLE: GPIO functions to access the GPIO specific registers for C2000 target\n * Copyright 2017-2020 The MathWorks, Inc.\n * ####################################################*/\n\n/* ***************************************************************************/\n/* the includes */\n\n#include \"MW_c28xGPIO.h\"\n#ifdef CPU2\n#ifdef MW_F2837XD\n#include \"F2837xD_Ipc_drivers.h\"\n#define CPU01_TO_CPU02_PASSMSG  0x0003FFF4\n#endif //MW_F2837XD\n#ifdef MW_F2838X\n#include \"MW_f2838x_includes.h\"\n#endif //MW_F2838X\n#endif //CPU2\n\n/* ***************************************************************************/\n/* the defines */\n\n/* ***************************************************************************/\n/* the globals */\n\nUint16 GPIO_oneTimeInit = 0;\n\n/* ***************************************************************************/\n/* the functions*/\n\n/* One time initialization of all GPIOs */\nvoid OneTimeGpioInit()\n{    \n    if(GPIO_oneTimeInit == 0)\n    {\n#ifdef CPU1\n        InitGpio();\n#endif //End of CPU1\n        GPIO_oneTimeInit = 1;\n    }\n}\n\n#ifndef MW_F281X /*GPIO implementation not supported for C281x */\n#ifndef F2837X_REG_FORMAT /*GPIO functions are provided by TI*/\n#ifndef MW_F2804X /*GPIO initialization is provided by TI for F2804x*/\n\n/*Sets all pins to be muxed to GPIO in input mode with pull-ups enabled.\n * Also sets the qualification to synchronous.*/\nvoid InitGpio()\n{\n    volatile Uint32 *gpioBaseAddr;\n    Uint16 regOffset;\n    EALLOW;\n    /*Fill all registers with zeros. Writing to each register separately\n     * for all GPIO modules would make this function *very* long. Fortunately,\n     * we'd be writing them all with zeros anyway, so this saves a lot of space.*/\n    gpioBaseAddr = (Uint32 *)&GpioCtrlRegs;\n    for (regOffset = 0; regOffset < sizeof(GpioCtrlRegs)/2; regOffset++)\n    {\n        /*Hack to avoid enabling pull-ups on all pins. GPyPUD is offset\n         * 0x0C in each register group of 0x40 words. Since this is a\n         * 32-bit pointer, the addresses must be divided by 2.*/\n        if (regOffset % (0x10/2) != (0x0C/2))\n            gpioBaseAddr[regOffset] = 0x00000000;\n    }\n    \n    gpioBaseAddr = (Uint32 *)&GpioDataRegs;\n    for (regOffset = 0; regOffset < sizeof(GpioDataRegs)/2; regOffset++)\n    {\n        gpioBaseAddr[regOffset] = 0x00000000;\n    }\n    \n    /* For concerto additional registers needs to be initialized*/\n    #ifdef MW_PIL_TIC2000_CONCERTO\n    /*Fill all registers with zeros. Writing to each register separately\n     * for all GPIO modules would make this function *very* long. Fortunately,\n     * we'd be writing them all with zeros anyway, so this saves a lot of space.*/\n    gpioBaseAddr = (Uint32 *)&GpioG1CtrlRegs;\n    for (regOffset = 0; regOffset < sizeof(GpioG1CtrlRegs)/2; regOffset++)\n    {\n        /*Hack to avoid enabling pull-ups on all pins. GPyPUD is offset\n         * 0x0C in each register group of 0x40 words. Since this is a\n         * 32-bit pointer, the addresses must be divided by 2.*/\n        if (regOffset % (0x10/2) != (0x0C/2))\n            gpioBaseAddr[regOffset] = 0x00000000;\n    }\n    \n    gpioBaseAddr = (Uint32 *)&GpioG1DataRegs;\n    for (regOffset = 0; regOffset < sizeof(GpioG1DataRegs)/2; regOffset++)\n    {\n        gpioBaseAddr[regOffset] = 0x00000000;\n    }\n    #endif //End of MW_PIL_TIC2000_CONCERTO\n    EDIS;\n}\n#endif // End of MW_F2804X\n\n/*Set the peripheral muxing for the specified pin.\n * The appropriate parameters can be found in the GPIO Muxed Pins table.\n * Use the GPIO index row (0 to 4) to select a muxing option for the GPIO.*/\nvoid GPIO_SetupPinMux(Uint16 pin, Uint16 cpu, Uint16 peripheral)\n{\n    volatile Uint32 *gpioBaseAddr;\n    volatile Uint32 *mux;\n    Uint16 pin32, pin16;\n    \n    pin32 = pin % 32;\n    pin16 = pin % 16;\n    #ifdef MW_PIL_TIC2000_CONCERTO\n    if (pin >= 128)\n    {\n        #ifdef F28M36x_DEVICE_H\n        if (pin <= 135)\n        {\n            gpioBaseAddr = (Uint32 *)&GpioCtrlRegs;\n        }\n        else if (pin >=192 && pin <= 199)\n        {\n            gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (0x1080/2);\n        }\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        if (pin <= 135)\n        {\n            gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (0x1000/2);\n        }\n        #endif //End of F28M35x_DEVICE_H\n    }\n    else\n    {\n        #ifdef F28M36x_DEVICE_H\n        gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (0x80/2) + (pin/32)*GPY_CTRL_OFFSET;\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (pin/32)*GPY_CTRL_OFFSET;\n        #endif //End of F28M35x_DEVICE_H\n    }\n    #else\n    gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (pin/32)*GPY_CTRL_OFFSET;\n    #endif // End of MW_PIL_TIC2000_CONCERTO\n    \n    /*Sanity check for valid peripheral values*/\n    if (peripheral > 0x4)\n        return;\n    \n    /*Create pointers to the appropriate registers. This is a workaround\n     * for the way GPIO registers are defined. The standard definition\n     * in the header file makes it very easy to do named accesses of one\n     * register or bit, but hard to do arbitrary numerical accesses. It's\n     * easier to have an array of GPIO modules with identical registers,\n     * including arrays for multi-register groups like GPyCSEL1-4. But\n     * the header file doesn't define anything we can turn into an array,\n     * so manual pointer arithmetic is used instead.*/\n    mux = gpioBaseAddr + GPYMUX + pin32/16;\n    \n    //Now for the actual function\n    EALLOW;\n    \n    /* Unfortunately, since we don't know the pin in\n     * advance we can't hardcode a bitfield reference, so there's some tricky\n     * bit twiddling here.*/\n    *mux &= ~(0x3UL << (2*pin16));\n    *mux |= (Uint32)(peripheral & 0x3UL) << (2*pin16);\n    \n    //WARNING: This code does not touch the analog mode select registers,\n    //which are needed to give the USB module control of its IOs.\n    EDIS;\n}\n\n/*Setup up the GPIO input/output options for the specified pin.\n * The flags are a 16-bit mask produced by ORing together options.\n * For input pins, the valid flags are:\n * GPIO_PULLUP    Enable pull-up\n * GPIO_SYNC        Synchronize the input latch to PLLSYSCLK (default -- you don't need to specify this)\n * GPIO_QUAL3    Use 3-sample qualification\n * GPIO_QUAL6    Use 6-sample qualification\n * GPIO_ASYNC    Do not use synchronization or qualification\n * (Note: only one of SYNC, QUAL3, QUAL6, or ASYNC is allowed)\n * For output pins, the valid flags are:\n * GPIO_PULLUP        If open drain enabled, also enable the pull-up\n * and the input qualification flags (SYNC/QUAL3/QUAL6/SYNC) listed above.\n * With no flags, the default input state is synchronous with no pull-up or polarity inversion.\n * The default output state is the standard digital output.*/\nvoid GPIO_SetupPinOptions(Uint16 pin, Uint16 output, Uint16 flags)\n{\n    {\n    volatile Uint32 *gpioBaseAddr;\n    volatile Uint32 *dir, *pud, *qsel;\n    Uint32 pin32, pin16, pinMask, qual;\n    \n    pin32 = pin % 32;\n    pin16 = pin % 16;\n    pinMask = 1UL << pin32;\n    #ifdef MW_PIL_TIC2000_CONCERTO\n    if (pin >= 128)\n    {\n        #ifdef F28M36x_DEVICE_H\n        if (pin <= 135)\n        {\n            gpioBaseAddr = (Uint32 *)&GpioCtrlRegs;\n        }\n        else if (pin >=192 && pin <= 199)\n        {\n            gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (0x1080/2);\n        }\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        if (pin <= 135)\n        {\n            gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (0x1000/2);\n        }\n        #endif //End of F28M35x_DEVICE_H\n    }\n    else\n    {\n        #ifdef F28M36x_DEVICE_H\n        gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (0x80/2) + (pin/32)*GPY_CTRL_OFFSET;\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (pin/32)*GPY_CTRL_OFFSET;\n        #endif //End of F28M35x_DEVICE_H\n    }\n    #else\n    gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (pin/32)*GPY_CTRL_OFFSET;\n    #endif // End of MW_PIL_TIC2000_CONCERTO\n    \n    /*Create pointers to the appropriate registers. This is a workaround\n     * for the way GPIO registers are defined. The standard definition\n     * in the header file makes it very easy to do named accesses of one\n     * register or bit, but hard to do arbitrary numerical accesses. It's\n     * easier to have an array of GPIO modules with identical registers,\n     * including arrays for multi-register groups like GPyQSEL1-2. But\n     * the header file doesn't define anything we can turn into an array,\n     * so manual pointer arithmetic is used instead.*/\n    dir = gpioBaseAddr + GPYDIR;\n    pud = gpioBaseAddr + GPYPUD;\n    qsel = gpioBaseAddr + GPYQSEL + pin32/16;\n    \n    EALLOW;\n    \n    /*Set the data direction*/\n    *dir &= ~pinMask;\n    if (output == 1)\n    {\n        /*Output, with optional open drain mode and pull-up*/\n        *dir |= pinMask;\n        \n        /*Enable pull-up if necessary. Open drain mode must be active.*/\n        if (flags & GPIO_PULLUP)\n            *pud &= ~pinMask;\n        else\n            *pud |= pinMask;\n    } else\n    {\n        /*Input, with optional pull-up, qualification, and polarity inversion*/\n        *dir &= ~pinMask;\n        \n        /*Enable pull-up if necessary*/\n        if (flags & GPIO_PULLUP)\n            *pud &= ~pinMask;\n        else\n            *pud |= pinMask;\n    }\n    \n    /*Extract the qualification parameter and load it into the register. This is\n     * also needed for open drain outputs, so we might as well do it all the time.*/\n    qual = (flags & GPIO_ASYNC) / GPIO_QUAL3;\n    *qsel &= ~(0x3L << (2 * pin16));\n    if (qual != 0x0)\n        *qsel |= qual << (2 * pin16);\n    \n    EDIS;\n    }\n}\n\n/*Read the GPyDAT register bit for the specified pin.\n * Note that this returns the actual state of the pin, not the state of the output latch.*/\nUint16 GPIO_ReadPin(Uint16 pin)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint16 pinVal;\n\n    #ifdef MW_PIL_TIC2000_CONCERTO\n    if (pin >= 128)\n    {\n        #ifdef F28M36x_DEVICE_H\n        if (pin <= 135)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x40/2);\n        }\n        else if (pin >=192 && pin <= 199)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x10C0/2);\n        }\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        if (pin <= 135)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x1000/2);\n        }\n        #endif //End of F28M35x_DEVICE_H\n    }\n    else\n    {\n        #ifdef F28M36x_DEVICE_H\n        gpioDataReg = (Uint32 *)&GpioDataRegs + (0xC0/2) + (pin/32)*GPY_DATA_OFFSET;\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        gpioDataReg = (Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n        #endif //End of F28M35x_DEVICE_H\n    }\n    #else\n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n    #endif // End of MW_PIL_TIC2000_CONCERTO\n    pinVal = (gpioDataReg[GPYDAT] >> (pin % 32)) & 0x1;\n    \n    return pinVal;\n}\n\n/*Set the GPyDAT register bit for the specified pin.*/\nvoid GPIO_WritePin(Uint16 pin, Uint16 outVal)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint32 pinMask;\n    \n    #ifdef MW_PIL_TIC2000_CONCERTO\n    if (pin >= 128)\n    {\n        #ifdef F28M36x_DEVICE_H\n        if (pin <= 135)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x40/2);\n        }\n        else if (pin >=192 && pin <= 199)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x10C0/2);\n        }\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        if (pin <= 135)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x1000/2);\n        }\n        #endif //End of F28M35x_DEVICE_H\n    }\n    else\n    {\n        #ifdef F28M36x_DEVICE_H\n        gpioDataReg = (Uint32 *)&GpioDataRegs + (0xC0/2) + (pin/32)*GPY_DATA_OFFSET;\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        gpioDataReg = (Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n        #endif //End of F28M35x_DEVICE_H\n    }\n    #else\n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n    #endif // End of MW_PIL_TIC2000_CONCERTO\n    pinMask = 1UL << (pin % 32);\n    \n    if (outVal == 0)\n        gpioDataReg[GPYCLEAR] = pinMask;\n    else\n        gpioDataReg[GPYSET] = pinMask;\n}\n\n/*Toggle the GPyDAT register bit for the specified pin.*/\nvoid GPIO_TogglePin(Uint16 pin)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint32 pinMask;\n    \n    #ifdef MW_PIL_TIC2000_CONCERTO\n    if (pin >= 128)\n    {\n        #ifdef F28M36x_DEVICE_H\n        if (pin <= 135)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x40/2);\n        }\n        else if (pin >=192 && pin <= 199)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x10C0/2);\n        }\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        if (pin <= 135)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x1000/2);\n        }\n        #endif //End of F28M35x_DEVICE_H\n    }\n    else\n    {\n        #ifdef F28M36x_DEVICE_H\n        gpioDataReg = (Uint32 *)&GpioDataRegs + (0xC0/2) + (pin/32)*GPY_DATA_OFFSET;\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        gpioDataReg = (Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n        #endif //End of F28M35x_DEVICE_H\n    }\n    #else\n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n    #endif // End of MW_PIL_TIC2000_CONCERTO\n    pinMask = 1UL << (pin % 32);\n    \n    \n    gpioDataReg[GPYTOGGLE] = pinMask;\n\n}\n\n#else // for F2837X_REG_FORMAT\n#if defined(MW_F2838X) \n#if defined(CPU1)\n\nvoid InitGpio()\n{\n    volatile Uint32 *gpioBaseAddr;\n    Uint16 regOffset;\n\n    /*Disable pin locks*/\n    EALLOW;\n    GpioCtrlRegs.GPALOCK.all = 0x00000000;\n    GpioCtrlRegs.GPBLOCK.all = 0x00000000;\n    GpioCtrlRegs.GPCLOCK.all = 0x00000000;\n    GpioCtrlRegs.GPDLOCK.all = 0x00000000;\n    GpioCtrlRegs.GPELOCK.all = 0x00000000;\n    GpioCtrlRegs.GPFLOCK.all = 0x00000000;\n\n    /* Fill all registers with zeros. Writing to each register separately\n     * for six GPIO modules would make this function *very* long.\n     * Fortunately, we'd be writing them all with zeros anyway, so this\n     * saves a lot of space.*/\n    gpioBaseAddr = (Uint32 *)&GpioCtrlRegs;\n    for (regOffset = 0; regOffset < sizeof(GpioCtrlRegs)/2; regOffset++)\n    {\n        /* Hack to avoid enabling pull-ups on all pins. GPyPUD is offset\n         * 0x0C in each register group of 0x40 words. Since this is a\n         * 32-bit pointer, the addresses must be divided by 2.*/\n        if (regOffset % (0x40/2) != (0x0C/2))\n        {\n            gpioBaseAddr[regOffset] = 0x00000000;\n        }\n    }\n\n    gpioBaseAddr = (Uint32 *)&GpioDataRegs;\n    for (regOffset = 0; regOffset < sizeof(GpioDataRegs)/2; regOffset++)\n    {\n        gpioBaseAddr[regOffset] = 0x00000000;\n    }\n\n    EDIS;\n}\n\nvoid GPIO_SetupPinMux(Uint16 gpioNumber, Uint16 cpu, Uint16 muxPosition)\n{\n    volatile Uint32 *gpioBaseAddr;\n    volatile Uint32 *mux, *gmux, *csel;\n    Uint16 pin32, pin16, pin8;\n\n    pin32 = gpioNumber % 32;\n    pin16 = gpioNumber % 16;\n    pin8 = gpioNumber % 8;\n    gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (gpioNumber/32)*GPY_CTRL_OFFSET;\n\n    /*Sanity check for valid cpu and peripheral values*/\n    if (cpu > GPIO_MUX_CM || muxPosition > 0xF)\n        return;\n\n    /* Create pointers to the appropriate registers. This is a workaround\n     * for the way GPIO registers are defined. The standard definition\n     * in the header file makes it very easy to do named accesses of one\n     * register or bit, but hard to do arbitrary numerical accesses. It's\n     * easier to have an array of GPIO modules with identical registers,\n     * including arrays for multi-register groups like GPyCSEL1-4. But\n     * the header file doesn't define anything we can turn into an array,\n     * so manual pointer arithmetic is used instead.*/\n    mux = gpioBaseAddr + GPYMUX + pin32/16;\n    gmux = gpioBaseAddr + GPYGMUX + pin32/16;\n    csel = gpioBaseAddr + GPYCSEL + pin32/8;\n\n    /* Now for the actual function */\n    EALLOW;\n\n    /* To change the muxing, set the peripheral mux to 0/GPIO first to avoid\n     * glitches, then change the group mux, then set the peripheral mux to\n     * its target value. Finally, set the CPU select. This procedure is\n     * described in the TRM. Unfortunately, since we don't know the pin in\n     * advance we can't hardcode a bitfield reference, so there's some\n     * tricky bit twiddling here.*/\n    *mux &= ~(0x3UL << (2*pin16));\n    *gmux &= ~(0x3UL << (2*pin16));\n    *gmux |= (Uint32)((muxPosition >> 2) & 0x3UL) << (2*pin16);\n    *mux |= (Uint32)(muxPosition & 0x3UL) << (2*pin16);\n\n    *csel &= ~(0x7L << (4*pin8));\n    *csel |= (Uint32)(cpu & 0x7L) << (4*pin8);\n\n    /* WARNING: This code does not touch the analog mode select registers,\n     * which are needed to give the USB module control of its IOs.*/\n    EDIS;\n}\n\nvoid GPIO_SetupPinOptions(Uint16 gpioNumber, Uint16 output, Uint16 flags)\n{\n    volatile Uint32 *gpioBaseAddr;\n    volatile Uint32 *dir, *pud, *inv, *odr, *qsel;\n    Uint32 pin32, pin16, pinMask, qual;\n\n    pin32 = gpioNumber % 32;\n    pin16 = gpioNumber % 16;\n    pinMask = 1UL << pin32;\n    gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (gpioNumber/32)*GPY_CTRL_OFFSET;\n\n    /* Create pointers to the appropriate registers. This is a workaround\n     * for the way GPIO registers are defined. The standard definition\n     * in the header file makes it very easy to do named accesses of one\n     * register or bit, but hard to do arbitrary numerical accesses. It's\n     * easier to have an array of GPIO modules with identical registers,\n     * including arrays for multi-register groups like GPyQSEL1-4. But\n     * the header file doesn't define anything we can turn into an array,\n     * so manual pointer arithmetic is used instead.*/\n    dir = gpioBaseAddr + GPYDIR;\n    pud = gpioBaseAddr + GPYPUD;\n    inv = gpioBaseAddr + GPYINV;\n    odr = gpioBaseAddr + GPYODR;\n    qsel = gpioBaseAddr + GPYQSEL + pin32/16;\n\n    EALLOW;\n\n    /*Set the data direction*/\n    *dir &= ~pinMask;\n    if (output == 1)\n    {        \n        /* Output, with optional open drain mode and pull-up */        \n        *dir |= pinMask;\n\n        /* Enable open drain if necessary */\n        if (flags & GPIO_OPENDRAIN)\n        {\n            *odr |= pinMask;\n        }\n        else\n        {\n            *odr &= ~pinMask;\n        }\n\n        /* Enable pull-up if necessary. Open drain mode must be active. */\n        if (flags & (GPIO_OPENDRAIN | GPIO_PULLUP))\n        {\n            *pud &= ~pinMask;\n        }\n        else\n        {\n            *pud |= pinMask;\n        }\n    }\n    else\n    {\n        /* Input, with optional pull-up, qualification, and polarity\n         * inversion */\n        *dir &= ~pinMask;\n\n        /* Enable pull-up if necessary */\n        if (flags & GPIO_PULLUP)\n        {\n            *pud &= ~pinMask;\n        }\n        else\n        {\n            *pud |= pinMask;\n        }\n\n        /* Invert polarity if necessary */\n        if (flags & GPIO_INVERT)\n        {\n            *inv |= pinMask;\n        }\n        else\n        {\n            *inv &= ~pinMask;\n        }\n    }\n\n    /* Extract the qualification parameter and load it into the register.\n     * This is also needed for open drain outputs, so we might as well do it\n     * all the time. */\n    qual = (flags & GPIO_ASYNC) / GPIO_QUAL3;\n    *qsel &= ~(0x3L << (2 * pin16));\n    if (qual != 0x0)\n    {\n        *qsel |= qual << (2 * pin16);\n    }\n\n    EDIS;\n}\n\nvoid GPIO_EnableUnbondedIOPullupsFor176Pin()\n{\n\tEALLOW;\n\tGpioCtrlRegs.GPCPUD.all = ~0x80000000;  /* GPIO 95 */\n\tGpioCtrlRegs.GPDPUD.all = ~0xFFFFFFF7;  /* GPIOs 96-127 */\n\tGpioCtrlRegs.GPEPUD.all = ~0xFFFFFFDF;  /* GPIOs 128-159 except for 133 */\n\tGpioCtrlRegs.GPFPUD.all = ~0x000001FF;  /* GPIOs 160-168 */\n\tEDIS;\n}\n\nvoid GPIO_EnableUnbondedIOPullupsFor100Pin()\n{\n    EALLOW;\n    GpioCtrlRegs.GPAPUD.all = ~0xFFC003E3;  //GPIOs 0-1, 5-9, 22-31\n    GpioCtrlRegs.GPBPUD.all = ~0x03FFF1FF;  //GPIOs 32-40, 44-57\n    GpioCtrlRegs.GPCPUD.all = ~0xE10FBC18;  //GPIOs 67-68, 74-77, 79-83, 93-95\n    GpioCtrlRegs.GPDPUD.all = ~0xFFFFFFF7;  //GPIOs 96-127\n    GpioCtrlRegs.GPEPUD.all = ~0xFFFFFFFF;  //GPIOs 128-159\n    GpioCtrlRegs.GPFPUD.all = ~0x000001FF;  //GPIOs 160-168\n    EDIS;\n}\n\nvoid GPIO_EnableUnbondedIOPullups()\n{\n\t/* bits 8-10 have pin count */\n    unsigned char pin_count = ((DevCfgRegs.PARTIDL.all & 0x00000700) >> 8) ;\n\n\t/* 5 = 100 pin\n\t * 6 = 176 pin\n\t * 7 = 337 pin */\n    if(pin_count == 5)\n    {\n        GPIO_EnableUnbondedIOPullupsFor100Pin();\n    }\n    else if (pin_count == 6)\n\t{\n\t\tGPIO_EnableUnbondedIOPullupsFor176Pin();\n\t}\n\telse\n\t{\n\t\t/* do nothing - this is 337 pin package */\n\t}\n}\n#endif // defined(CPU1)\n/*Read the GPyDAT register bit for the specified pin.\n * Note that this returns the actual state of the pin, not the state of the output latch.*/\nUint16 GPIO_ReadPin(Uint16 pin)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint16 pinVal;\n\n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n    pinVal = (gpioDataReg[GPYDAT] >> (pin % 32)) & 0x1;\n    \n    return pinVal;\n}\n\n/*Set the GPyDAT register bit for the specified pin.*/\nvoid GPIO_WritePin(Uint16 pin, Uint16 outVal)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint32 pinMask;\n    \n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n    pinMask = 1UL << (pin % 32);\n    \n    if (outVal == 0)\n    {\n        gpioDataReg[GPYCLEAR] = pinMask;\n    }\n    else\n    {\n        gpioDataReg[GPYSET] = pinMask;\n    }\n}\n\n#endif // end of defined(MW_F2838X)\n\n/*Toggle the GPyDAT register bit for the specified pin.*/\nvoid GPIO_TogglePin(Uint16 pin)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint32 pinMask;\n    \n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n    pinMask = 1UL << (pin % 32);\n    gpioDataReg[GPYTOGGLE] = pinMask;\n}\n#endif // end of F2837X_REG_FORMAT\n\n/*Set the GPIO pin. Set the mux values and pin options for the specified pin.\n  This function can be used for all processors except C281x. The implementation is dependant on CPU1 and CPU2*/ \nvoid Set_GPIOPin(Uint16 pin, Uint16 cpu, Uint16 peripheral, Uint16 output, Uint16 flags)\n{\n#if defined(F2837X_REG_FORMAT) && defined(CPU2)\n    Uint32 *pulMsgRam = (void *)CPU01_TO_CPU02_PASSMSG;\n    Uint32 gpioData = 0x00000000;\n    //Sanity check for valid cpu and peripheral values\n    if (cpu > GPIO_MUX_CPU2CLA || peripheral > 0xF)\n        return;\n    gpioData = gpioData | pin;\n    gpioData = gpioData | ((Uint32)peripheral << 8);\n    gpioData = gpioData | ((Uint32)output << 16);\n    gpioData = gpioData | ((Uint32)flags << 24);\n    #ifdef MW_F2837XD\n    Uint32 ulRWord32 = 0;\n    IPCLiteLtoRFunctionCall(IPC_FLAG0, pulMsgRam[0], gpioData, IPC_FLAG31);\n    while (IPCLiteLtoRGetResult(&ulRWord32,IPC_LENGTH_32_BITS,\n            IPC_FLAG31) != STATUS_PASS)\n    {\n    }\n    #else\n     MW_IPC_sendCommand(IPC_CPU2_L_CPU1_R, (IPC_FLAG0 | IPC_FLAG31), IPC_ADDR_CORRECTION_DISABLE, IPC_FUNC_CALL, pulMsgRam[0], gpioData);\n    IPC_waitForAck(IPC_CPU2_L_CPU1_R, IPC_FLAG31);\n    IPC_getResponse(IPC_CPU2_L_CPU1_R);\n    #endif //MW_F2837XD\n#else\n    GPIO_SetupPinMux(pin, cpu, peripheral);\n    GPIO_SetupPinOptions(pin, output, flags);\n#endif // end of defined(F2837X_REG_FORMAT) && defined(CPU2)\n}\n#endif //end of MW_F281X\n    \n"},{"name":"MW_c28xGlobalInterrupts.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ProgramData\\MATLAB\\SupportPackages\\R2021b\\toolbox\\shared\\supportpackages\\tic2000\\src","tag":"","groupDisplay":"Other files","code":"/*####################################################\n * FILE: MW_c28xGlobalInterrupts.c\n * TITLE: Common board support functions specific for C2000 targets\n * Copyright 2020 The MathWorks, Inc.\n * ####################################################*/\n\n/* ***************************************************************************/\n/* the includes */\n#include \"MW_target_hardware_resources.h\"\n\n/* ***************************************************************************/\n/* the globals */\nUint16 MW_InterruptDisableLock;\n\n\n/* ***************************************************************************/\n/* the functions*/\n\n/* Global interrupt enable function */\nvoid globalInterruptEnable(void)\n{\n    if (0 == MW_InterruptDisableLock)\n    {\n        /* Enabled the interrupts only if it was enabled before */\n        __enable_interrupts(); /* Enable Global Interrupt INTM and realtime interrupt DBGM */\n    }\n}\n\n/* Global interrupt disable function */\nvoid globalInterruptDisable(void)\n{\n    /* Disable Global Interrupt INTM using __disable_interrupts()\n     The function will return 0 if interrupt was enabled previously\n     otherwise it will return 1 if the interrupt was previously disabled*/\n    MW_InterruptDisableLock = __disable_interrupts();\n    MW_InterruptDisableLock &= 0x1;   \n}\n"},{"name":"MW_c28xx_board.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw","tag":"","groupDisplay":"Other files","code":"#include \"c2000BoardSupport.h\"\r\n#include \"MW_f28004x_includes.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"StepperRTM.h\"\r\n#include \"StepperRTM_private.h\"\r\n\r\nvoid init_board ()\r\n{\r\n  DisableDog();\r\n  EALLOW;\r\n  CpuSysRegs.PCLKCR0.bit.DMA = 1;\r\n  CpuSysRegs.PCLKCR6.bit.SD1 = 1;\r\n  CpuSysRegs.PCLKCR17.bit.CLB1 = 1;\r\n  CpuSysRegs.PCLKCR17.bit.CLB2 = 1;\r\n  CpuSysRegs.PCLKCR17.bit.CLB3 = 1;\r\n  CpuSysRegs.PCLKCR17.bit.CLB4 = 1;\r\n  EDIS;\r\n\r\n#ifdef CPU1\r\n\r\n  EALLOW;\r\n  EDIS;\r\n  MW_InitSysPll(XTAL_OSC,10,0,0,1);\r\n\r\n  //Turn on all peripherals\r\n  //InitPeripheralClocks();\r\n  EALLOW;\r\n  CpuSysRegs.PCLKCR0.bit.CPUTIMER0 = 1;\r\n  CpuSysRegs.PCLKCR0.bit.CPUTIMER1 = 1;\r\n  CpuSysRegs.PCLKCR0.bit.CPUTIMER2 = 1;\r\n  CpuSysRegs.PCLKCR0.bit.HRPWM = 1;\r\n  EDIS;\r\n\r\n#endif\r\n\r\n  EALLOW;\r\n\r\n  /* Configure low speed peripheral clocks */\r\n  ClkCfgRegs.LOSPCP.bit.LSPCLKDIV = 0U;\r\n  EDIS;\r\n\r\n  /* Disable and clear all CPU interrupts */\r\n  DINT;\r\n  IER = 0x0000;\r\n  IFR = 0x0000;\r\n  InitPieCtrl();\r\n  InitPieVectTable();\r\n  InitCpuTimers();\r\n  configureIXbar();\r\n\r\n  /* initial GPIO qualification settings.... */\r\n  EALLOW;\r\n  GpioCtrlRegs.GPAQSEL1.all = 0x0;\r\n  GpioCtrlRegs.GPAQSEL2.all = 0x0;\r\n  GpioCtrlRegs.GPBQSEL1.all = 0x0;\r\n  GpioCtrlRegs.GPBQSEL2.all = 0x0;\r\n\r\n  // Set the pin to digital mode by default\r\n  GpioCtrlRegs.GPAAMSEL.bit.GPIO22 = 0;\r\n  GpioCtrlRegs.GPAAMSEL.bit.GPIO23 = 0;\r\n  EDIS;\r\n}\r\n"},{"name":"MW_c28xx_csl.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw","tag":"","groupDisplay":"Other files","code":"#include \"c2000BoardSupport.h\"\r\n#include \"MW_f28004x_includes.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"StepperRTM.h\"\r\n#include \"StepperRTM_private.h\"\r\n\r\nvoid enableExtInterrupt (void);\r\nvoid disableWatchdog(void)\r\n{\r\n  int *WatchdogWDCR = (void *) 0x7029;\r\n  asm(\" EALLOW \");\r\n  *WatchdogWDCR = 0x0068;\r\n  asm(\" EDIS \");\r\n}\r\n"},{"name":"MW_c28xx_pie.h","type":"header","group":"other","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw","tag":"","groupDisplay":"Other files","code":"#define PIEMASK0                       64\r\n#define IFRMASK                        1\r\n"},{"name":"MW_c28xx_xbar.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw","tag":"","groupDisplay":"Other files","code":"#include \"c2000BoardSupport.h\"\r\n#include \"MW_f28004x_includes.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"StepperRTM.h\"\r\n#include \"StepperRTM_private.h\"\r\n#include \"MW_c28xGPIO.h\"\r\n\r\nvoid configureIXbar(void)\r\n{\r\n  /*--- Configuring GPIO set in Input Xbar---*/\r\n  EALLOW;\r\n  InputXbarRegs.INPUT7SELECT = 35;\r\n  InputXbarRegs.INPUT8SELECT = 37;\r\n  InputXbarRegs.INPUT9SELECT = 59;\r\n  InputXbarRegs.INPUT10SELECT = 14;\r\n  InputXbarRegs.INPUT11SELECT = 15;\r\n  InputXbarRegs.INPUT12SELECT = 26;\r\n  InputXbarRegs.INPUT13SELECT = 58;\r\n  EDIS;\r\n}\r\n"},{"name":"MW_target_hardware_resources.h","type":"header","group":"other","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef PORTABLE_WORDSIZES\n#ifdef __MW_TARGET_USE_HARDWARE_RESOURCES_H__\n#ifndef __MW_TARGET_HARDWARE_RESOURCES_H__\n#define __MW_TARGET_HARDWARE_RESOURCES_H__\n\n#define MW_MULTI_TASKING_MODE 1\n#include \"c2000BoardSupport.h\"\n#include \"MW_f28004x_includes.h\"\n#include \"c2000SchedulerTimer.h\"\n\n#define MW_USECODERTARGET 1\n#define MW_TARGETHARDWARE TI Piccolo F28004x\n#define MW_CONNECTIONINFO_SERIAL_IPADDRESS codertarget.registry.getLoopbackIP;\n#define MW_CONNECTIONINFO_SERIAL_PORT 17725\n#define MW_CONNECTIONINFO_SERIAL_VERBOSE 0\n#define MW_CONNECTIONINFO_XCPONSERIAL_BAUDRATE codertarget.registry.getExtModeHostBaud(hCS);\n#define MW_CONNECTIONINFO_XCPONSERIAL_COMPORT codertarget.registry.serialPortValueCallback(hCS, 'ExtModeCOMPort');\n#define MW_CONNECTIONINFO_XCPONSERIAL_VERBOSE 1\n#define MW_CONNECTIONINFO_CAN_MEXARGS  \n#define MW_CONNECTIONINFO_XCPONCAN_MEXARGS  \n#define MW_CONNECTIONINFO_XCPONCAN_BUSSPEED codertarget.registry.getExtModeCANBusSpeed(hCS)\n#define MW_CONNECTIONINFO_XCPONCAN_CANCHANNEL \n#define MW_CONNECTIONINFO_XCPONCAN_CANDEVICE \n#define MW_CONNECTIONINFO_XCPONCAN_CANIDCOMMAND 2\n#define MW_CONNECTIONINFO_XCPONCAN_CANIDRESPONSE 3\n#define MW_CONNECTIONINFO_XCPONCAN_CANVENDOR \n#define MW_CONNECTIONINFO_XCPONCAN_ISCANIDEXTENDED 0\n#define MW_CONNECTIONINFO_XCPONCAN_VERBOSE 1\n#define MW_EXTMODE_CONFIGURATION serial\n#define MW_EXTMODE_HOSTINTERFACE Simulink\n#define MW_EXTMODE_CANMODULE 0\n#define MW_EXTMODE_CANIDTYPE Standard (11-bit)\n#define MW_EXTMODE_CANMASTERID 0x02\n#define MW_EXTMODE_CANSLAVEID 0x03\n#define MW_EXTMODE_CANRXMAILBOXNUMBER 0\n#define MW_EXTMODE_CANTXMAILBOXNUMBER 1\n#define MW_EXTMODE_SCIMODULE 0\n#define MW_EXTMODE_SIGNALBUFFERSIZE 5000.000000\n#define MW_RTOS Baremetal\n#define MW_SCHEDULER_INTERRUPT_SOURCE 0\n#define MW_RUNTIME_BUILDACTION 1\n#define MW_RUNTIME_DISABLEPARALLELBUILD 0\n#define MW_RUNTIME_DEVICEID 1\n#define MW_RUNTIME_FLASHLOAD 1\n#define MW_RUNTIME_ENABLETMU 1\n#define MW_RUNTIME_LOADCOMMANDARG $(TARGET_ROOT)/CCS_Config/f280049M.ccxml\n#define MW_TARGETLINKOBJ_USECUSTOMLINKER 0\n#define MW_TARGETLINKOBJ_NAME $(TARGET_ROOT)/src/c280049M.cmd\n#define MW_CLOCKING_CPUCLOCKRATEMHZ 100\n#define MW_CLOCKING_USEINTERNALOSC 0\n#define MW_CLOCKING_OSCCLK 20\n#define MW_CLOCKING_AUTOSETPLLSETTINGS 1\n#define MW_CLOCKING_PLLCR 10\n#define MW_CLOCKING_PLLDIV 0\n#define MW_CLOCKING_DIVSEL 2\n#define MW_CLOCKING_CLOSESTCPUCLOCK 100\n#define MW_CLOCKING_LSPCLKDIV 0\n#define MW_CLOCKING_LSPCLK 100\n#define MW_IXBAR_FLAG 49\n#define MW_IXBAR_I1 None\n#define MW_IXBAR_I2 None\n#define MW_IXBAR_I3 None\n#define MW_IXBAR_I4 None\n#define MW_IXBAR_I5 None\n#define MW_IXBAR_I6 None\n#define MW_IXBAR_I7 35\n#define MW_IXBAR_I8 37\n#define MW_IXBAR_I9 59\n#define MW_IXBAR_I10 14\n#define MW_IXBAR_I11 15\n#define MW_IXBAR_I12 26\n#define MW_IXBAR_I13 58\n#define MW_IXBAR_I14 None\n#define MW_IXBAR_I15 None\n#define MW_IXBAR_I16 None\n#define MW_IXBAR_ONE_TIME 0.000000\n#define MW_OUTPUTXBAR_OXBAR1 0\n#define MW_OUTPUTXBAR_OXBAR_MUX1 -1\n#define MW_OUTPUTXBAR_OXBAR1_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR1_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR1_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR1_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR2 0\n#define MW_OUTPUTXBAR_OXBAR_MUX2 -1\n#define MW_OUTPUTXBAR_OXBAR2_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR2_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR2_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR2_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR3 0\n#define MW_OUTPUTXBAR_OXBAR_MUX3 -1\n#define MW_OUTPUTXBAR_OXBAR3_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR3_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR3_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR3_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR4 0\n#define MW_OUTPUTXBAR_OXBAR_MUX4 -1\n#define MW_OUTPUTXBAR_OXBAR4_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR4_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR4_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR4_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR5 0\n#define MW_OUTPUTXBAR_OXBAR_MUX5 -1\n#define MW_OUTPUTXBAR_OXBAR5_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR5_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR5_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR5_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR6 0\n#define MW_OUTPUTXBAR_OXBAR_MUX6 -1\n#define MW_OUTPUTXBAR_OXBAR6_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR6_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR6_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR6_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR7 0\n#define MW_OUTPUTXBAR_OXBAR_MUX7 -1\n#define MW_OUTPUTXBAR_OXBAR7_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR7_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR7_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR7_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR8 0\n#define MW_OUTPUTXBAR_OXBAR_MUX8 -1\n#define MW_OUTPUTXBAR_OXBAR8_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR8_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR8_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR8_INVERT 0\n#define MW_ADCA_EXTERNALREFERENCESELECTOR 0\n#define MW_ADCA_EXTERNALREFERENCEVREFHI 0\n#define MW_ADCA_CLOCKDIV 1\n#define MW_ADCA_CLOCKFREQUENCY 50.000000\n#define MW_ADCA_OFFSETCORRECTIONVALUE AdcaRegs.ADCOFFTRIM.bit.OFFTRIM\n#define MW_ADCA_EXTERNALREFERENCEVREFLO 0\n#define MW_ADCA_INTPULSEGENERATION 0\n#define MW_ADCA_SOCPRIORITY 0\n#define MW_ADCA_XINT2GPIO_IXBAR 0\n#define MW_ADCA_XINT2GPIO None\n#define MW_ADCB_EXTERNALREFERENCESELECTOR 0\n#define MW_ADCB_EXTERNALREFERENCEVREFHI 0\n#define MW_ADCB_CLOCKDIV 1\n#define MW_ADCB_CLOCKFREQUENCY 50.000000\n#define MW_ADCB_OFFSETCORRECTIONVALUE AdcbRegs.ADCOFFTRIM.bit.OFFTRIM\n#define MW_ADCB_EXTERNALREFERENCEVREFLO 0\n#define MW_ADCB_INTPULSEGENERATION 0\n#define MW_ADCB_SOCPRIORITY 0\n#define MW_ADCB_XINT2GPIO_IXBAR 0\n#define MW_ADCB_XINT2GPIO None\n#define MW_ADCC_EXTERNALREFERENCESELECTOR 0\n#define MW_ADCC_EXTERNALREFERENCEVREFHI 0\n#define MW_ADCC_CLOCKDIV 1\n#define MW_ADCC_CLOCKFREQUENCY 50.000000\n#define MW_ADCC_OFFSETCORRECTIONVALUE AdccRegs.ADCOFFTRIM.bit.OFFTRIM\n#define MW_ADCC_EXTERNALREFERENCEVREFLO 0\n#define MW_ADCC_INTPULSEGENERATION 0\n#define MW_ADCC_SOCPRIORITY 0\n#define MW_ADCC_XINT2GPIO_IXBAR 0\n#define MW_ADCC_XINT2GPIO None\n#define MW_DACA_VOLTAGE 0\n#define MW_DACA_LOADMODE 0\n#define MW_DACB_VOLTAGE 0\n#define MW_DACB_LOADMODE 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS1 0\n#define MW_CMPSS_CMPSS1_COMPH 0\n#define MW_CMPSS_CMPSS1_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS1_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS1_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS1_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS1_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS1_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS1_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS1_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS1_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS1_COMPL 0\n#define MW_CMPSS_CMPSS1_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS1_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS1_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS1_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS1_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS1_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS1_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS1_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS1_COMP_SELREF 0\n#define MW_CMPSS_CMPSS1_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS1_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS1_COMP_BLANKSOURCE 0\n#define MW_CMPSS_CMPSS1_COMP_COMPHYS 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS2 0\n#define MW_CMPSS_CMPSS2_COMPH 0\n#define MW_CMPSS_CMPSS2_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS2_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS2_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS2_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS2_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS2_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS2_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS2_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS2_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS2_COMPL 0\n#define MW_CMPSS_CMPSS2_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS2_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS2_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS2_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS2_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS2_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS2_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS2_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS2_COMP_SELREF 0\n#define MW_CMPSS_CMPSS2_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS2_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS2_COMP_BLANKSOURCE 0\n#define MW_CMPSS_CMPSS2_COMP_COMPHYS 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS3 0\n#define MW_CMPSS_CMPSS3_COMPH 0\n#define MW_CMPSS_CMPSS3_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS3_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS3_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS3_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS3_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS3_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS3_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS3_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS3_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS3_COMPL 0\n#define MW_CMPSS_CMPSS3_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS3_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS3_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS3_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS3_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS3_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS3_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS3_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS3_COMP_SELREF 0\n#define MW_CMPSS_CMPSS3_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS3_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS3_COMP_BLANKSOURCE 0\n#define MW_CMPSS_CMPSS3_COMP_COMPHYS 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS4 0\n#define MW_CMPSS_CMPSS4_COMPH 0\n#define MW_CMPSS_CMPSS4_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS4_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS4_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS4_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS4_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS4_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS4_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS4_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS4_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS4_COMPL 0\n#define MW_CMPSS_CMPSS4_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS4_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS4_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS4_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS4_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS4_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS4_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS4_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS4_COMP_SELREF 0\n#define MW_CMPSS_CMPSS4_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS4_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS4_COMP_BLANKSOURCE 0\n#define MW_CMPSS_CMPSS4_COMP_COMPHYS 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS5 0\n#define MW_CMPSS_CMPSS5_COMPH 0\n#define MW_CMPSS_CMPSS5_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS5_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS5_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS5_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS5_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS5_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS5_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS5_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS5_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS5_COMPL 0\n#define MW_CMPSS_CMPSS5_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS5_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS5_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS5_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS5_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS5_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS5_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS5_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS5_COMP_SELREF 0\n#define MW_CMPSS_CMPSS5_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS5_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS5_COMP_BLANKSOURCE 0\n#define MW_CMPSS_CMPSS5_COMP_COMPHYS 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS6 0\n#define MW_CMPSS_CMPSS6_COMPH 0\n#define MW_CMPSS_CMPSS6_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS6_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS6_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS6_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS6_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS6_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS6_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS6_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS6_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS6_COMPL 0\n#define MW_CMPSS_CMPSS6_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS6_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS6_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS6_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS6_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS6_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS6_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS6_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS6_COMP_SELREF 0\n#define MW_CMPSS_CMPSS6_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS6_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS6_COMP_BLANKSOURCE 0\n#define MW_CMPSS_CMPSS6_COMP_COMPHYS 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS7 0\n#define MW_CMPSS_CMPSS7_COMPH 0\n#define MW_CMPSS_CMPSS7_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS7_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS7_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS7_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS7_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS7_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS7_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS7_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS7_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS7_COMPL 0\n#define MW_CMPSS_CMPSS7_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS7_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS7_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS7_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS7_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS7_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS7_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS7_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS7_COMP_SELREF 0\n#define MW_CMPSS_CMPSS7_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS7_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS7_COMP_BLANKSOURCE 0\n#define MW_CMPSS_CMPSS7_COMP_COMPHYS 0\n#define MW_EPWM_CLOCKDIV 0\n#define MW_EPWM_PINASSIGNMENT_TZ1_IXBAR 0\n#define MW_EPWM_PINASSIGNMENT_TZ2_IXBAR 0\n#define MW_EPWM_PINASSIGNMENT_TZ3_IXBAR 0\n#define MW_EPWM_PINASSIGNMENT_TZ1 None\n#define MW_EPWM_PINASSIGNMENT_TZ2 None\n#define MW_EPWM_PINASSIGNMENT_TZ3 None\n#define MW_EPWM_EXBAR_TRIP4 0\n#define MW_EPWM_EXBAR_MUX_TRIP4 -1\n#define MW_EPWM_EXBAR_TRIP4_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP4_INVERT 0\n#define MW_EPWM_EXBAR_TRIP5 0\n#define MW_EPWM_EXBAR_MUX_TRIP5 -1\n#define MW_EPWM_EXBAR_TRIP5_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP5_INVERT 0\n#define MW_EPWM_EXBAR_TRIP7 0\n#define MW_EPWM_EXBAR_MUX_TRIP7 -1\n#define MW_EPWM_EXBAR_TRIP7_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP7_INVERT 0\n#define MW_EPWM_EXBAR_TRIP8 0\n#define MW_EPWM_EXBAR_MUX_TRIP8 -1\n#define MW_EPWM_EXBAR_TRIP8_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP8_INVERT 0\n#define MW_EPWM_EXBAR_TRIP9 0\n#define MW_EPWM_EXBAR_MUX_TRIP9 -1\n#define MW_EPWM_EXBAR_TRIP9_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP9_INVERT 0\n#define MW_EPWM_EXBAR_TRIP10 0\n#define MW_EPWM_EXBAR_MUX_TRIP10 -1\n#define MW_EPWM_EXBAR_TRIP10_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP10_INVERT 0\n#define MW_EPWM_EXBAR_TRIP11 0\n#define MW_EPWM_EXBAR_MUX_TRIP11 -1\n#define MW_EPWM_EXBAR_TRIP11_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP11_INVERT 0\n#define MW_EPWM_EXBAR_TRIP12 0\n#define MW_EPWM_EXBAR_MUX_TRIP12 -1\n#define MW_EPWM_EXBAR_TRIP12_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP12_INVERT 0\n#define MW_EPWM_PINASSIGNMENT_SYNCI_IXBAR 0\n#define MW_EPWM_PINASSIGNMENT_SYNCI None\n#define MW_EPWM_PINASSIGNMENT_SYNCO None\n#define MW_EPWM_PINASSIGNMENT_PWM1A 1\n#define MW_EPWM_PINASSIGNMENT_PWM1B 1\n#define MW_EPWM_PINASSIGNMENT_PWM2A 1\n#define MW_EPWM_PINASSIGNMENT_PWM2B 1\n#define MW_EPWM_PINASSIGNMENT_PWM3A 1\n#define MW_EPWM_PINASSIGNMENT_PWM3B 1\n#define MW_EPWM_PINASSIGNMENT_PWM4A 1\n#define MW_EPWM_PINASSIGNMENT_PWM4B 1\n#define MW_EPWM_PINASSIGNMENT_PWM5A 1\n#define MW_EPWM_PINASSIGNMENT_PWM5B 1\n#define MW_EPWM_PINASSIGNMENT_PWM6A 1\n#define MW_EPWM_PINASSIGNMENT_PWM6B 1\n#define MW_EPWM_PINASSIGNMENT_PWM7A 1\n#define MW_EPWM_PINASSIGNMENT_PWM7B 1\n#define MW_EPWM_PINASSIGNMENT_PWM8A 1\n#define MW_EPWM_PINASSIGNMENT_PWM8B 2\n#define MW_ECAP_PINASSIGNMENT_ECAP1_IXBAR 6\n#define MW_ECAP_PINASSIGNMENT_ECAP2_IXBAR 7\n#define MW_ECAP_PINASSIGNMENT_ECAP3_IXBAR 8\n#define MW_ECAP_PINASSIGNMENT_ECAP4_IXBAR 9\n#define MW_ECAP_PINASSIGNMENT_ECAP5_IXBAR 10\n#define MW_ECAP_PINASSIGNMENT_ECAP6_IXBAR 11\n#define MW_ECAP_PINASSIGNMENT_ECAP7_IXBAR 12\n#define MW_ECAP_PINASSIGNMENT_ECAP1 GPIO35\n#define MW_ECAP_PINASSIGNMENT_ECAP2 GPIO37\n#define MW_ECAP_PINASSIGNMENT_ECAP3 GPIO59\n#define MW_ECAP_PINASSIGNMENT_ECAP4 GPIO14\n#define MW_ECAP_PINASSIGNMENT_ECAP5 GPIO15\n#define MW_ECAP_PINASSIGNMENT_ECAP6 GPIO26\n#define MW_ECAP_PINASSIGNMENT_ECAP7 GPIO58\n#define MW_ECAP_PINASSIGNMENT_APWM1 13\n#define MW_ECAP_PINASSIGNMENT_APWM2 23\n#define MW_ECAP_PINASSIGNMENT_APWM3 25\n#define MW_ECAP_PINASSIGNMENT_APWM4 9\n#define MW_ECAP_PINASSIGNMENT_APWM5 10\n#define MW_ECAP_PINASSIGNMENT_APWM6 15\n#define MW_ECAP_PINASSIGNMENT_APWM7 24\n#define MW_ECAP_PINASSIGNMENT_APWM1_OXBAR 1.000000\n#define MW_ECAP_PINASSIGNMENT_APWM2_OXBAR 2.000000\n#define MW_ECAP_PINASSIGNMENT_APWM3_OXBAR 2.000000\n#define MW_ECAP_PINASSIGNMENT_APWM4_OXBAR 3.000000\n#define MW_ECAP_PINASSIGNMENT_APWM5_OXBAR 4.000000\n#define MW_ECAP_PINASSIGNMENT_APWM6_OXBAR 3.000000\n#define MW_ECAP_PINASSIGNMENT_APWM7_OXBAR 1.000000\n#define MW_EQEP_PINASSIGNMENT_EQEP1A 5\n#define MW_EQEP_PINASSIGNMENT_EQEP1B 5\n#define MW_EQEP_PINASSIGNMENT_EQEP1S 4\n#define MW_EQEP_PINASSIGNMENT_EQEP1I 4\n#define MW_EQEP_PINASSIGNMENT_EQEP2A 3\n#define MW_EQEP_PINASSIGNMENT_EQEP2B 2\n#define MW_EQEP_PINASSIGNMENT_EQEP2S 1\n#define MW_EQEP_PINASSIGNMENT_EQEP2I 1\n#define MW_I2C_MODE 0\n#define MW_I2C_ADDRDATAFORMAT 0\n#define MW_I2C_OWNADDRESS 1\n#define MW_I2C_BITCOUNT 0\n#define MW_I2C_MODULECLOCKPRESCALER 9\n#define MW_I2C_MODULECLOCKFREQUENCY 10000000.000000\n#define MW_I2C_MASTERCLKLOWTIME 10\n#define MW_I2C_MASTERCLKHIGHTIME 10\n#define MW_I2C_MASTERCLOCKFREQUENCY 333333.333333\n#define MW_I2C_MASTERCLOCKFREQUENCY_1 333333.333333\n#define MW_I2C_MASTERCLOCKFREQUENCY_2 333333.333333\n#define MW_I2C_ENABLELOOPBACK 0\n#define MW_I2C_PINASSIGNMENT_SDAA 3\n#define MW_I2C_PINASSIGNMENT_SCLA 4\n#define MW_I2C_ENABLETXINT 0\n#define MW_I2C_TXFIFOLEVEL 16\n#define MW_I2C_ENABLERXINT 0\n#define MW_I2C_RXFIFOLEVEL 16\n#define MW_I2C_ENABLESYSINT 0\n#define MW_I2C_AAS 0\n#define MW_I2C_SCD 0\n#define MW_I2C_ARDY 0\n#define MW_I2C_NACK 0\n#define MW_I2C_AL 0\n#define MW_I2C_PINVALUE_SDA 32\n#define MW_I2C_PINVALUE_SCL 33\n#define MW_I2C_PINMUX_SDA 1\n#define MW_I2C_PINMUX_SCL 1\n#define MW_SCI_A_ENABLELOOPBACK 0\n#define MW_SCI_A_SUSPENSIONMODE 2\n#define MW_SCI_A_NUMBEROFSTOPBITS 0\n#define MW_SCI_A_PARITYMODE 0\n#define MW_SCI_A_CHARACTERLENGTHBITS 0\n#define MW_SCI_A_USERBAUDRATE 115200\n#define MW_SCI_A_BAUDRATEPRESCALER 108.000000\n#define MW_SCI_A_BAUDRATE 114679.000000\n#define MW_SCI_A_COMMUNICATIONMODE 0\n#define MW_SCI_A_BLOCKINGMODE 0\n#define MW_SCI_A_DATABYTEORDER 0\n#define MW_SCI_A_DATASWAPWIDTH 0\n#define MW_SCI_A_PINASSIGNMENT_TX 5\n#define MW_SCI_A_PINASSIGNMENT_RX 5\n#define MW_SCI_B_ENABLELOOPBACK 0\n#define MW_SCI_B_SUSPENSIONMODE 2\n#define MW_SCI_B_NUMBEROFSTOPBITS 0\n#define MW_SCI_B_PARITYMODE 0\n#define MW_SCI_B_CHARACTERLENGTHBITS 0\n#define MW_SCI_B_USERBAUDRATE 115200\n#define MW_SCI_B_BAUDRATEPRESCALER 108.000000\n#define MW_SCI_B_BAUDRATE 114679.000000\n#define MW_SCI_B_COMMUNICATIONMODE 0\n#define MW_SCI_B_BLOCKINGMODE 0\n#define MW_SCI_B_DATABYTEORDER 0\n#define MW_SCI_B_DATASWAPWIDTH 0\n#define MW_SCI_B_PINASSIGNMENT_TX 1\n#define MW_SCI_B_PINASSIGNMENT_RX 1\n#define MW_SPI_A_MODE 0\n#define MW_SPI_A_USERBAUDRATE 1843200\n#define MW_SPI_A_BAUDRATEFACTOR 53.000000\n#define MW_SPI_A_BAUDRATE 1851852.000000\n#define MW_SPI_A_DATABITS 15\n#define MW_SPI_A_CLOCKPOLARITY \n#define MW_SPI_A_CLOCKPHASE \n#define MW_SPI_A_SUSPENSIONMODE 2\n#define MW_SPI_A_ENABLELOOPBACK 0\n#define MW_SPI_A_ENABLETHREEWIRE 0\n#define MW_SPI_A_TXINTERRUPTENABLE 0\n#define MW_SPI_A_FIFOINTERRUPTLEVEL_TX 0\n#define MW_SPI_A_RXINTERRUPTENABLE 0\n#define MW_SPI_A_FIFOINTERRUPTLEVEL_RX 16\n#define MW_SPI_A_ENABLEHIGHSPEEDMODE 1\n#define MW_SPI_A_FIFOENABLE 1\n#define MW_SPI_A_FIFOTRANSMITDELAY 0\n#define MW_SPI_A_PINASSIGNMENT_SIMO 2\n#define MW_SPI_A_PINASSIGNMENT_SOMI 2\n#define MW_SPI_A_PINASSIGNMENT_CLK 2\n#define MW_SPI_A_PINASSIGNMENT_STE 2\n#define MW_SPI_A_PINVALUE_SIMO 16\n#define MW_SPI_A_PINVALUE_SOMI 17\n#define MW_SPI_A_PINVALUE_CLK 9\n#define MW_SPI_A_PINVALUE_STE 11\n#define MW_SPI_A_PINMUX_SIMO 1\n#define MW_SPI_A_PINMUX_SOMI 1\n#define MW_SPI_A_PINMUX_CLK 7\n#define MW_SPI_A_PINMUX_STE 7\n#define MW_SPI_A_FIFO_LEVEL 16.000000\n#define MW_SPI_B_MODE 0\n#define MW_SPI_B_USERBAUDRATE 1843200\n#define MW_SPI_B_BAUDRATEFACTOR 53.000000\n#define MW_SPI_B_BAUDRATE 1851852.000000\n#define MW_SPI_B_DATABITS 15\n#define MW_SPI_B_CLOCKPOLARITY 0\n#define MW_SPI_B_CLOCKPHASE 0\n#define MW_SPI_B_SUSPENSIONMODE 2\n#define MW_SPI_B_ENABLELOOPBACK 0\n#define MW_SPI_B_ENABLETHREEWIRE 0\n#define MW_SPI_B_TXINTERRUPTENABLE 0\n#define MW_SPI_B_FIFOINTERRUPTLEVEL_TX 0\n#define MW_SPI_B_RXINTERRUPTENABLE 0\n#define MW_SPI_B_FIFOINTERRUPTLEVEL_RX 16\n#define MW_SPI_B_ENABLEHIGHSPEEDMODE 1\n#define MW_SPI_B_FIFOENABLE 1\n#define MW_SPI_B_FIFOTRANSMITDELAY 0\n#define MW_SPI_B_PINASSIGNMENT_SIMO 2\n#define MW_SPI_B_PINASSIGNMENT_SOMI 2\n#define MW_SPI_B_PINASSIGNMENT_CLK 3\n#define MW_SPI_B_PINASSIGNMENT_STE 2\n#define MW_SPI_B_PINVALUE_SIMO 24\n#define MW_SPI_B_PINVALUE_SOMI 25\n#define MW_SPI_B_PINVALUE_CLK 26\n#define MW_SPI_B_PINVALUE_STE 27\n#define MW_SPI_B_PINMUX_SIMO 6\n#define MW_SPI_B_PINMUX_SOMI 6\n#define MW_SPI_B_PINMUX_CLK 6\n#define MW_SPI_B_PINMUX_STE 6\n#define MW_SPI_B_FIFO_LEVEL 16.000000\n#define MW_ECAN_A_MODULECLOCKFREQUENCY 100\n#define MW_ECAN_A_BAUDRATEPRESCALER 10.000000\n#define MW_ECAN_A_TSEG1 4\n#define MW_ECAN_A_TSEG2 3\n#define MW_ECAN_A_BAUDRATE 1000000\n#define MW_ECAN_A_SBG 0\n#define MW_ECAN_A_SJW 1\n#define MW_ECAN_A_SAM 0\n#define MW_ECAN_A_ENHANCEDCANMODE 1\n#define MW_ECAN_A_SELFTESTMODE 0\n#define MW_ECAN_A_PINASSIGNMENT_TX 3\n#define MW_ECAN_A_PINASSIGNMENT_RX 3\n#define MW_ECAN_B_MODULECLOCKFREQUENCY 100\n#define MW_ECAN_B_BAUDRATEPRESCALER 10.000000\n#define MW_ECAN_B_TSEG1 4\n#define MW_ECAN_B_TSEG2 3\n#define MW_ECAN_B_BAUDRATE 1000000\n#define MW_ECAN_B_SBG 0\n#define MW_ECAN_B_SJW 1\n#define MW_ECAN_B_SAM 0\n#define MW_ECAN_B_ENHANCEDCANMODE 1\n#define MW_ECAN_B_SELFTESTMODE 0\n#define MW_ECAN_B_PINASSIGNMENT_TX 5\n#define MW_ECAN_B_PINASSIGNMENT_RX 6\n#define MW_SDFM1_F1 0\n#define MW_SDFM1_D1 0\n#define MW_SDFM1_C1 0\n#define MW_SDFM1_F1_MODE 0\n#define MW_SDFM1_F1_C_FILTERTYPE 1\n#define MW_SDFM1_F1_COSR 0\n#define MW_SDFM1_F1_HLT 0\n#define MW_SDFM1_F1_LLT 0\n#define MW_SDFM1_F1_HLTZ 0\n#define MW_SDFM1_F1_D_FILTERTYPE 1\n#define MW_SDFM1_F1_DOSR 0\n#define MW_SDFM1_F1_FIFO 0\n#define MW_SDFM1_F1_EXTPWM 0\n#define MW_SDFM1_F1_EXTPWM_MOD 0\n#define MW_SDFM1_F1_IEL 0\n#define MW_SDFM1_F1_IEH 0\n#define MW_SDFM1_F1_IEHZ 0\n#define MW_SDFM1_F1_MFIE 0\n#define MW_SDFM1_F1_AE 0\n#define MW_SDFM1_F2 0\n#define MW_SDFM1_D2 0\n#define MW_SDFM1_C2 0\n#define MW_SDFM1_F2_MODE 0\n#define MW_SDFM1_F2_C_FILTERTYPE 1\n#define MW_SDFM1_F2_COSR 0\n#define MW_SDFM1_F2_HLT 0\n#define MW_SDFM1_F2_LLT 0\n#define MW_SDFM1_F2_HLTZ 0\n#define MW_SDFM1_F2_D_FILTERTYPE 1\n#define MW_SDFM1_F2_DOSR 0\n#define MW_SDFM1_F2_FIFO 0\n#define MW_SDFM1_F2_EXTPWM 0\n#define MW_SDFM1_F2_EXTPWM_MOD 0\n#define MW_SDFM1_F2_IEL 0\n#define MW_SDFM1_F2_IEH 0\n#define MW_SDFM1_F2_IEHZ 0\n#define MW_SDFM1_F2_MFIE 0\n#define MW_SDFM1_F2_AE 0\n#define MW_SDFM1_F3 0\n#define MW_SDFM1_D3 0\n#define MW_SDFM1_C3 0\n#define MW_SDFM1_F3_MODE 0\n#define MW_SDFM1_F3_C_FILTERTYPE 1\n#define MW_SDFM1_F3_COSR 0\n#define MW_SDFM1_F3_HLT 0\n#define MW_SDFM1_F3_LLT 0\n#define MW_SDFM1_F3_HLTZ 0\n#define MW_SDFM1_F3_D_FILTERTYPE 1\n#define MW_SDFM1_F3_DOSR 0\n#define MW_SDFM1_F3_FIFO 0\n#define MW_SDFM1_F3_EXTPWM 0\n#define MW_SDFM1_F3_EXTPWM_MOD 0\n#define MW_SDFM1_F3_IEL 0\n#define MW_SDFM1_F3_IEH 0\n#define MW_SDFM1_F3_IEHZ 0\n#define MW_SDFM1_F3_MFIE 0\n#define MW_SDFM1_F3_AE 0\n#define MW_SDFM1_F4 0\n#define MW_SDFM1_D4 0\n#define MW_SDFM1_C4 0\n#define MW_SDFM1_F4_MODE 0\n#define MW_SDFM1_F4_C_FILTERTYPE 1\n#define MW_SDFM1_F4_COSR 0\n#define MW_SDFM1_F4_HLT 0\n#define MW_SDFM1_F4_LLT 0\n#define MW_SDFM1_F4_HLTZ 0\n#define MW_SDFM1_F4_D_FILTERTYPE 1\n#define MW_SDFM1_F4_DOSR 0\n#define MW_SDFM1_F4_FIFO 0\n#define MW_SDFM1_F4_EXTPWM 0\n#define MW_SDFM1_F4_EXTPWM_MOD 0\n#define MW_SDFM1_F4_IEL 0\n#define MW_SDFM1_F4_IEH 0\n#define MW_SDFM1_F4_IEHZ 0\n#define MW_SDFM1_F4_MFIE 0\n#define MW_SDFM1_F4_AE 0\n#define MW_SDFM1_PINVALUE_D1 16\n#define MW_SDFM1_PINVALUE_C1 17\n#define MW_SDFM1_PINVALUE_D2 18\n#define MW_SDFM1_PINVALUE_C2 27\n#define MW_SDFM1_PINVALUE_D3 28\n#define MW_SDFM1_PINVALUE_C3 29\n#define MW_SDFM1_PINVALUE_D4 22\n#define MW_SDFM1_PINVALUE_C4 31\n#define MW_SDFM1_PINMUX_D1 7\n#define MW_SDFM1_PINMUX_C1 7\n#define MW_SDFM1_PINMUX_D2 7\n#define MW_SDFM1_PINMUX_C2 7\n#define MW_SDFM1_PINMUX_D3 7\n#define MW_SDFM1_PINMUX_C3 7\n#define MW_SDFM1_PINMUX_D4 7\n#define MW_SDFM1_PINMUX_C4 7\n#define MW_WATCHDOG_ENABLE_WATCHDOG 0\n#define MW_WATCHDOG_WATCHDOGCLOCKPREDIVIDER 8\n#define MW_WATCHDOG_WATCHDOGCLOCKPRESCALER 0\n#define MW_WATCHDOG_WATCHDOGCLOCK OSCCLK/512/1\n#define MW_WATCHDOG_TIME_PERIOD 0.013107\n#define MW_WATCHDOG_WATCHDOGEVENT 0\n#define MW_GPIO0_7_GPIOQUALSEL0 0\n#define MW_GPIO0_7_GPIOQUALSEL1 0\n#define MW_GPIO0_7_GPIOQUALSEL2 0\n#define MW_GPIO0_7_GPIOQUALSEL3 0\n#define MW_GPIO0_7_GPIOQUALSEL4 0\n#define MW_GPIO0_7_GPIOQUALSEL5 0\n#define MW_GPIO0_7_GPIOQUALSEL6 0\n#define MW_GPIO0_7_GPIOQUALSEL7 0\n#define MW_GPIO0_7_QUALPRD 0\n#define MW_GPIO8_15_GPIOQUALSEL8 0\n#define MW_GPIO8_15_GPIOQUALSEL9 0\n#define MW_GPIO8_15_GPIOQUALSEL10 0\n#define MW_GPIO8_15_GPIOQUALSEL11 0\n#define MW_GPIO8_15_GPIOQUALSEL12 0\n#define MW_GPIO8_15_GPIOQUALSEL13 0\n#define MW_GPIO8_15_GPIOQUALSEL14 0\n#define MW_GPIO8_15_GPIOQUALSEL15 0\n#define MW_GPIO8_15_QUALPRD 0\n#define MW_GPIO16_23_GPIOQUALSEL16 0\n#define MW_GPIO16_23_GPIOQUALSEL17 0\n#define MW_GPIO16_23_GPIOQUALSEL18 0\n#define MW_GPIO16_23_GPIOQUALSEL19 0\n#define MW_GPIO16_23_GPIOQUALSEL20 0\n#define MW_GPIO16_23_GPIOQUALSEL21 0\n#define MW_GPIO16_23_GPIOQUALSEL22 0\n#define MW_GPIO16_23_GPIOQUALSEL23 0\n#define MW_GPIO16_23_QUALPRD 0\n#define MW_GPIO24_31_GPIOQUALSEL24 0\n#define MW_GPIO24_31_GPIOQUALSEL25 0\n#define MW_GPIO24_31_GPIOQUALSEL26 0\n#define MW_GPIO24_31_GPIOQUALSEL27 0\n#define MW_GPIO24_31_GPIOQUALSEL28 0\n#define MW_GPIO24_31_GPIOQUALSEL29 0\n#define MW_GPIO24_31_GPIOQUALSEL30 0\n#define MW_GPIO24_31_GPIOQUALSEL31 0\n#define MW_GPIO24_31_QUALPRD 0\n#define MW_GPIO32_39_GPIOQUALSEL32 0\n#define MW_GPIO32_39_GPIOQUALSEL33 0\n#define MW_GPIO32_39_GPIOQUALSEL34 0\n#define MW_GPIO32_39_GPIOQUALSEL35 0\n#define MW_GPIO32_39_GPIOQUALSEL37 0\n#define MW_GPIO32_39_GPIOQUALSEL39 0\n#define MW_GPIO32_39_QUALPRD 0\n#define MW_GPIO40_47_GPIOQUALSEL40 0\n#define MW_GPIO40_47_GPIOQUALSEL41 0\n#define MW_GPIO40_47_GPIOQUALSEL42 0\n#define MW_GPIO40_47_GPIOQUALSEL43 0\n#define MW_GPIO40_47_GPIOQUALSEL44 0\n#define MW_GPIO40_47_GPIOQUALSEL45 0\n#define MW_GPIO40_47_GPIOQUALSEL46 0\n#define MW_GPIO40_47_GPIOQUALSEL47 0\n#define MW_GPIO40_47_QUALPRD 0\n#define MW_GPIO48_55_GPIOQUALSEL48 0\n#define MW_GPIO48_55_GPIOQUALSEL49 0\n#define MW_GPIO48_55_GPIOQUALSEL50 0\n#define MW_GPIO48_55_GPIOQUALSEL51 0\n#define MW_GPIO48_55_GPIOQUALSEL52 0\n#define MW_GPIO48_55_GPIOQUALSEL53 0\n#define MW_GPIO48_55_GPIOQUALSEL54 0\n#define MW_GPIO48_55_GPIOQUALSEL55 0\n#define MW_GPIO48_55_QUALPRD 0\n#define MW_GPIO56_63_GPIOQUALSEL56 0\n#define MW_GPIO56_63_GPIOQUALSEL57 0\n#define MW_GPIO56_63_GPIOQUALSEL58 0\n#define MW_GPIO56_63_GPIOQUALSEL59 0\n#define MW_GPIO56_63_QUALPRD 0\n#define MW_DMA_CH1_ENABLEDMACHANNEL 0\n#define MW_DMA_CH1_DATASIZE 0\n#define MW_DMA_CH1_INTERRUPTSRC 0\n#define MW_DMA_CH1_BURSTSIZE 0\n#define MW_DMA_CH1_TRANSFERSIZE 1\n#define MW_DMA_CH1_SRCBEGINADD 0xC000\n#define MW_DMA_CH1_DSTBEGINADD 0xD000\n#define MW_DMA_CH1_SRCBURSTSTEP 0\n#define MW_DMA_CH1_DSTBURSTSTEP 0\n#define MW_DMA_CH1_SRCTRANSSTEP 0\n#define MW_DMA_CH1_DSTTRANSSTEP 0\n#define MW_DMA_CH1_WRAPSRCSIZE 65536\n#define MW_DMA_CH1_WRAPDSTSIZE 65536\n#define MW_DMA_CH1_SRCWRAPSTEP 0\n#define MW_DMA_CH1_DSTWRAPSTEP 0\n#define MW_DMA_CH1_SETCH1TOHIGH 0\n#define MW_DMA_CH1_ENABLEONESHOT 0\n#define MW_DMA_CH1_ENABLECONTINUOUS 1\n#define MW_DMA_CH1_GENINTERRUPT 0\n#define MW_DMA_CH1_ENABLEOVERFLOW 0\n#define MW_DMA_CH2_ENABLEDMACHANNEL 0\n#define MW_DMA_CH2_DATASIZE 0\n#define MW_DMA_CH2_INTERRUPTSRC 0\n#define MW_DMA_CH2_BURSTSIZE 0\n#define MW_DMA_CH2_TRANSFERSIZE 1\n#define MW_DMA_CH2_SRCBEGINADD 0xC000\n#define MW_DMA_CH2_DSTBEGINADD 0xD000\n#define MW_DMA_CH2_SRCBURSTSTEP 0\n#define MW_DMA_CH2_DSTBURSTSTEP 0\n#define MW_DMA_CH2_SRCTRANSSTEP 0\n#define MW_DMA_CH2_DSTTRANSSTEP 0\n#define MW_DMA_CH2_WRAPSRCSIZE 65536\n#define MW_DMA_CH2_WRAPDSTSIZE 65536\n#define MW_DMA_CH2_SRCWRAPSTEP 0\n#define MW_DMA_CH2_DSTWRAPSTEP 0\n#define MW_DMA_CH2_ENABLEONESHOT 0\n#define MW_DMA_CH2_ENABLECONTINUOUS 1\n#define MW_DMA_CH2_GENINTERRUPT 0\n#define MW_DMA_CH2_ENABLEOVERFLOW 0\n#define MW_DMA_CH3_ENABLEDMACHANNEL 0\n#define MW_DMA_CH3_DATASIZE 0\n#define MW_DMA_CH3_INTERRUPTSRC 0\n#define MW_DMA_CH3_BURSTSIZE 0\n#define MW_DMA_CH3_TRANSFERSIZE 1\n#define MW_DMA_CH3_SRCBEGINADD 0xC000\n#define MW_DMA_CH3_DSTBEGINADD 0xD000\n#define MW_DMA_CH3_SRCBURSTSTEP 0\n#define MW_DMA_CH3_DSTBURSTSTEP 0\n#define MW_DMA_CH3_SRCTRANSSTEP 0\n#define MW_DMA_CH3_DSTTRANSSTEP 0\n#define MW_DMA_CH3_WRAPSRCSIZE 65536\n#define MW_DMA_CH3_WRAPDSTSIZE 65536\n#define MW_DMA_CH3_SRCWRAPSTEP 0\n#define MW_DMA_CH3_DSTWRAPSTEP 0\n#define MW_DMA_CH3_ENABLEONESHOT 0\n#define MW_DMA_CH3_ENABLECONTINUOUS 1\n#define MW_DMA_CH3_GENINTERRUPT 0\n#define MW_DMA_CH3_ENABLEOVERFLOW 0\n#define MW_DMA_CH4_ENABLEDMACHANNEL 0\n#define MW_DMA_CH4_DATASIZE 0\n#define MW_DMA_CH4_INTERRUPTSRC 0\n#define MW_DMA_CH4_BURSTSIZE 0\n#define MW_DMA_CH4_TRANSFERSIZE 1\n#define MW_DMA_CH4_SRCBEGINADD 0xC000\n#define MW_DMA_CH4_DSTBEGINADD 0xD000\n#define MW_DMA_CH4_SRCBURSTSTEP 0\n#define MW_DMA_CH4_DSTBURSTSTEP 0\n#define MW_DMA_CH4_SRCTRANSSTEP 0\n#define MW_DMA_CH4_DSTTRANSSTEP 0\n#define MW_DMA_CH4_WRAPSRCSIZE 65536\n#define MW_DMA_CH4_WRAPDSTSIZE 65536\n#define MW_DMA_CH4_SRCWRAPSTEP 0\n#define MW_DMA_CH4_DSTWRAPSTEP 0\n#define MW_DMA_CH4_ENABLEONESHOT 0\n#define MW_DMA_CH4_ENABLECONTINUOUS 1\n#define MW_DMA_CH4_GENINTERRUPT 0\n#define MW_DMA_CH4_ENABLEOVERFLOW 0\n#define MW_DMA_CH5_ENABLEDMACHANNEL 0\n#define MW_DMA_CH5_DATASIZE 0\n#define MW_DMA_CH5_INTERRUPTSRC 0\n#define MW_DMA_CH5_BURSTSIZE 0\n#define MW_DMA_CH5_TRANSFERSIZE 1\n#define MW_DMA_CH5_SRCBEGINADD 0xC000\n#define MW_DMA_CH5_DSTBEGINADD 0xD000\n#define MW_DMA_CH5_SRCBURSTSTEP 0\n#define MW_DMA_CH5_DSTBURSTSTEP 0\n#define MW_DMA_CH5_SRCTRANSSTEP 0\n#define MW_DMA_CH5_DSTTRANSSTEP 0\n#define MW_DMA_CH5_WRAPSRCSIZE 65536\n#define MW_DMA_CH5_WRAPDSTSIZE 65536\n#define MW_DMA_CH5_SRCWRAPSTEP 0\n#define MW_DMA_CH5_DSTWRAPSTEP 0\n#define MW_DMA_CH5_ENABLEONESHOT 0\n#define MW_DMA_CH5_ENABLECONTINUOUS 1\n#define MW_DMA_CH5_GENINTERRUPT 0\n#define MW_DMA_CH5_ENABLEOVERFLOW 0\n#define MW_DMA_CH6_ENABLEDMACHANNEL 0\n#define MW_DMA_CH6_DATASIZE 0\n#define MW_DMA_CH6_INTERRUPTSRC 0\n#define MW_DMA_CH6_BURSTSIZE 0\n#define MW_DMA_CH6_TRANSFERSIZE 1\n#define MW_DMA_CH6_SRCBEGINADD 0xC000\n#define MW_DMA_CH6_DSTBEGINADD 0xD000\n#define MW_DMA_CH6_SRCBURSTSTEP 0\n#define MW_DMA_CH6_DSTBURSTSTEP 0\n#define MW_DMA_CH6_SRCTRANSSTEP 0\n#define MW_DMA_CH6_DSTTRANSSTEP 0\n#define MW_DMA_CH6_WRAPSRCSIZE 65536\n#define MW_DMA_CH6_WRAPDSTSIZE 65536\n#define MW_DMA_CH6_SRCWRAPSTEP 0\n#define MW_DMA_CH6_DSTWRAPSTEP 0\n#define MW_DMA_CH6_ENABLEONESHOT 0\n#define MW_DMA_CH6_ENABLECONTINUOUS 1\n#define MW_DMA_CH6_GENINTERRUPT 0\n#define MW_DMA_CH6_ENABLEOVERFLOW 0\n#define MW_XINT_GPIOXINT1SEL_IXBAR 0\n#define MW_XINT_GPIOXINT2SEL_IXBAR 0\n#define MW_XINT_GPIOXINT3SEL_IXBAR 0\n#define MW_XINT_GPIOXINT4SEL_IXBAR 0\n#define MW_XINT_GPIOXINT5SEL_IXBAR 0\n#define MW_XINT_GPIOXINT1SEL 58\n#define MW_XINT_GPIOXINT2SEL 58\n#define MW_XINT_GPIOXINT3SEL 58\n#define MW_XINT_GPIOXINT4SEL 56\n#define MW_XINT_GPIOXINT5SEL 58\n#define MW_XINT_POLARITY1 0\n#define MW_XINT_POLARITY2 0\n#define MW_XINT_POLARITY3 0\n#define MW_XINT_POLARITY4 0\n#define MW_XINT_POLARITY5 0\n#define MW_PIL_COMMUNICATIONINTERFACE 0\n#define MW_PIL_SCIMODULE 0\n#define MW_PIL_COMPORT COM1\n#define MW_EXTMODECOMPORT -1\n#define MW_EXECUTIONPROFILEBUFFERLEN 50.000000\n#define MW_SDCARD_ENABLE 0\n#define MW_SDCARD_SPIMODULE 0\n#define MW_SDCARD_SPIBAUDRATE 1\n#define MW_OVERRUNDETECTION_ENABLE_OVERRUN_DETECTION 0\n#define MW_OVERRUNDETECTION_CHECK_GPIO_STATUS 1\n#define MW_OVERRUNDETECTION_DIGITAL_OUTPUT_TO_SET_ON_OVERRUN 34\n#define MW_OVERRUNDETECTION_GPIOMODE 0\n#define MW_OVERRUNDETECTION_CUSTOM_LOGIC 0\n#define MW_OVERRUNDETECTION_PIE_NUMBER 0\n#define MW_OVERRUNDETECTION_CPU_NUMBER 0\n#define MW_OVERRUNDETECTION_CUSTOM_FUNCTION c2000_OverrunFunction\n#define MW_DATAVERSION 2016.02\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_HOSTINTERFACE Simulink\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERAUTO 1\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERSIZE 1000\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERNUM 3\n#define MW_EXTMODEPROTOCOLINFO_XCPONCAN_HOSTINTERFACE Simulink\n#define MW_EXTMODEPROTOCOLINFO_XCPONCAN_LOGGINGBUFFERAUTO 1\n#define MW_EXTMODEPROTOCOLINFO_XCPONCAN_LOGGINGBUFFERSIZE 1000\n#define MW_EXTMODEPROTOCOLINFO_XCPONCAN_LOGGINGBUFFERNUM 3\n#define MW_CLBXBAR_AUXSIG0 0\n#define MW_CLBXBAR_AUXSIG_MUX0 -1\n#define MW_CLBXBAR_AUXSIG0_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG0_INVERT 0\n#define MW_CLBXBAR_AUXSIG1 0\n#define MW_CLBXBAR_AUXSIG_MUX1 -1\n#define MW_CLBXBAR_AUXSIG1_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG1_INVERT 0\n#define MW_CLBXBAR_AUXSIG2 0\n#define MW_CLBXBAR_AUXSIG_MUX2 -1\n#define MW_CLBXBAR_AUXSIG2_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG2_INVERT 0\n#define MW_CLBXBAR_AUXSIG3 0\n#define MW_CLBXBAR_AUXSIG_MUX3 -1\n#define MW_CLBXBAR_AUXSIG3_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG3_INVERT 0\n#define MW_CLBXBAR_AUXSIG4 0\n#define MW_CLBXBAR_AUXSIG_MUX4 -1\n#define MW_CLBXBAR_AUXSIG4_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG4_INVERT 0\n#define MW_CLBXBAR_AUXSIG5 0\n#define MW_CLBXBAR_AUXSIG_MUX5 -1\n#define MW_CLBXBAR_AUXSIG5_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG5_INVERT 0\n#define MW_CLBXBAR_AUXSIG6 0\n#define MW_CLBXBAR_AUXSIG_MUX6 -1\n#define MW_CLBXBAR_AUXSIG6_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG6_INVERT 0\n#define MW_CLBXBAR_AUXSIG7 0\n#define MW_CLBXBAR_AUXSIG_MUX7 -1\n#define MW_CLBXBAR_AUXSIG7_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG7_INVERT 0\n#define MW_CLB_TILE1 0\n#define MW_CLB_TILE1_NAME TILE1\n#define MW_CLB_TILE1_IN0_MUX 0\n#define MW_CLB_TILE1_IN0 -1\n#define MW_CLB_TILE1_IN0_FILTER 0\n#define MW_CLB_TILE1_IN0_SYNC 0\n#define MW_CLB_TILE1_IN1_MUX 0\n#define MW_CLB_TILE1_IN1 -1\n#define MW_CLB_TILE1_IN1_FILTER 0\n#define MW_CLB_TILE1_IN1_SYNC 0\n#define MW_CLB_TILE1_IN2_MUX 0\n#define MW_CLB_TILE1_IN2 -1\n#define MW_CLB_TILE1_IN2_FILTER 0\n#define MW_CLB_TILE1_IN2_SYNC 0\n#define MW_CLB_TILE1_IN3_MUX 0\n#define MW_CLB_TILE1_IN3 -1\n#define MW_CLB_TILE1_IN3_FILTER 0\n#define MW_CLB_TILE1_IN3_SYNC 0\n#define MW_CLB_TILE1_IN4_MUX 0\n#define MW_CLB_TILE1_IN4 -1\n#define MW_CLB_TILE1_IN4_FILTER 0\n#define MW_CLB_TILE1_IN4_SYNC 0\n#define MW_CLB_TILE1_IN5_MUX 0\n#define MW_CLB_TILE1_IN5 -1\n#define MW_CLB_TILE1_IN5_FILTER 0\n#define MW_CLB_TILE1_IN5_SYNC 0\n#define MW_CLB_TILE1_IN6_MUX 0\n#define MW_CLB_TILE1_IN6 -1\n#define MW_CLB_TILE1_IN6_FILTER 0\n#define MW_CLB_TILE1_IN6_SYNC 0\n#define MW_CLB_TILE1_IN7_MUX 0\n#define MW_CLB_TILE1_IN7 -1\n#define MW_CLB_TILE1_IN7_FILTER 0\n#define MW_CLB_TILE1_IN7_SYNC 0\n#define MW_CLB_TILE1_OUT0_0 0\n#define MW_CLB_TILE1_OUT0_1 0\n#define MW_CLB_TILE1_OUT0_2 0\n#define MW_CLB_TILE1_OUT1_0 0\n#define MW_CLB_TILE1_OUT1_1 0\n#define MW_CLB_TILE1_OUT1_2 0\n#define MW_CLB_TILE1_OUT2_0 0\n#define MW_CLB_TILE1_OUT2_1 0\n#define MW_CLB_TILE1_OUT2_2 0\n#define MW_CLB_TILE1_OUT3_0 0\n#define MW_CLB_TILE1_OUT3_1 0\n#define MW_CLB_TILE1_OUT3_2 0\n#define MW_CLB_TILE1_OUT4_0 0\n#define MW_CLB_TILE1_OUT4_1 0\n#define MW_CLB_TILE1_OUT4_2 0\n#define MW_CLB_TILE1_OUT5_0 0\n#define MW_CLB_TILE1_OUT5_1 0\n#define MW_CLB_TILE1_OUT5_2 0\n#define MW_CLB_TILE1_OUT6_0 0\n#define MW_CLB_TILE1_OUT6_1 0\n#define MW_CLB_TILE1_OUT6_2 0\n#define MW_CLB_TILE1_OUT7_0 0\n#define MW_CLB_TILE1_OUT7_1 0\n#define MW_CLB_TILE1_OUT7_2 0\n#define MW_CLB_TILE2 0\n#define MW_CLB_TILE2_NAME TILE2\n#define MW_CLB_TILE2_IN0_MUX 0\n#define MW_CLB_TILE2_IN0 -1\n#define MW_CLB_TILE2_IN0_FILTER 0\n#define MW_CLB_TILE2_IN0_SYNC 0\n#define MW_CLB_TILE2_IN1_MUX 0\n#define MW_CLB_TILE2_IN1 -1\n#define MW_CLB_TILE2_IN1_FILTER 0\n#define MW_CLB_TILE2_IN1_SYNC 0\n#define MW_CLB_TILE2_IN2_MUX 0\n#define MW_CLB_TILE2_IN2 -1\n#define MW_CLB_TILE2_IN2_FILTER 0\n#define MW_CLB_TILE2_IN2_SYNC 0\n#define MW_CLB_TILE2_IN3_MUX 0\n#define MW_CLB_TILE2_IN3 -1\n#define MW_CLB_TILE2_IN3_FILTER 0\n#define MW_CLB_TILE2_IN3_SYNC 0\n#define MW_CLB_TILE2_IN4_MUX 0\n#define MW_CLB_TILE2_IN4 -1\n#define MW_CLB_TILE2_IN4_FILTER 0\n#define MW_CLB_TILE2_IN4_SYNC 0\n#define MW_CLB_TILE2_IN5_MUX 0\n#define MW_CLB_TILE2_IN5 -1\n#define MW_CLB_TILE2_IN5_FILTER 0\n#define MW_CLB_TILE2_IN5_SYNC 0\n#define MW_CLB_TILE2_IN6_MUX 0\n#define MW_CLB_TILE2_IN6 -1\n#define MW_CLB_TILE2_IN6_FILTER 0\n#define MW_CLB_TILE2_IN6_SYNC 0\n#define MW_CLB_TILE2_IN7_MUX 0\n#define MW_CLB_TILE2_IN7 -1\n#define MW_CLB_TILE2_IN7_FILTER 0\n#define MW_CLB_TILE2_IN7_SYNC 0\n#define MW_CLB_TILE2_OUT0_0 0\n#define MW_CLB_TILE2_OUT0_1 0\n#define MW_CLB_TILE2_OUT0_2 0\n#define MW_CLB_TILE2_OUT1_0 0\n#define MW_CLB_TILE2_OUT1_1 0\n#define MW_CLB_TILE2_OUT1_2 0\n#define MW_CLB_TILE2_OUT2_0 0\n#define MW_CLB_TILE2_OUT2_1 0\n#define MW_CLB_TILE2_OUT2_2 0\n#define MW_CLB_TILE2_OUT3_0 0\n#define MW_CLB_TILE2_OUT3_1 0\n#define MW_CLB_TILE2_OUT3_2 0\n#define MW_CLB_TILE2_OUT4_0 0\n#define MW_CLB_TILE2_OUT4_1 0\n#define MW_CLB_TILE2_OUT4_2 0\n#define MW_CLB_TILE2_OUT5_0 0\n#define MW_CLB_TILE2_OUT5_1 0\n#define MW_CLB_TILE2_OUT5_2 0\n#define MW_CLB_TILE2_OUT6_0 0\n#define MW_CLB_TILE2_OUT6_1 0\n#define MW_CLB_TILE2_OUT6_2 0\n#define MW_CLB_TILE2_OUT7_0 0\n#define MW_CLB_TILE2_OUT7_1 0\n#define MW_CLB_TILE2_OUT7_2 0\n#define MW_CLB_TILE3 0\n#define MW_CLB_TILE3_NAME TILE3\n#define MW_CLB_TILE3_IN0_MUX 0\n#define MW_CLB_TILE3_IN0 -1\n#define MW_CLB_TILE3_IN0_FILTER 0\n#define MW_CLB_TILE3_IN0_SYNC 0\n#define MW_CLB_TILE3_IN1_MUX 0\n#define MW_CLB_TILE3_IN1 -1\n#define MW_CLB_TILE3_IN1_FILTER 0\n#define MW_CLB_TILE3_IN1_SYNC 0\n#define MW_CLB_TILE3_IN2_MUX 0\n#define MW_CLB_TILE3_IN2 -1\n#define MW_CLB_TILE3_IN2_FILTER 0\n#define MW_CLB_TILE3_IN2_SYNC 0\n#define MW_CLB_TILE3_IN3_MUX 0\n#define MW_CLB_TILE3_IN3 -1\n#define MW_CLB_TILE3_IN3_FILTER 0\n#define MW_CLB_TILE3_IN3_SYNC 0\n#define MW_CLB_TILE3_IN4_MUX 0\n#define MW_CLB_TILE3_IN4 -1\n#define MW_CLB_TILE3_IN4_FILTER 0\n#define MW_CLB_TILE3_IN4_SYNC 0\n#define MW_CLB_TILE3_IN5_MUX 0\n#define MW_CLB_TILE3_IN5 -1\n#define MW_CLB_TILE3_IN5_FILTER 0\n#define MW_CLB_TILE3_IN5_SYNC 0\n#define MW_CLB_TILE3_IN6_MUX 0\n#define MW_CLB_TILE3_IN6 -1\n#define MW_CLB_TILE3_IN6_FILTER 0\n#define MW_CLB_TILE3_IN6_SYNC 0\n#define MW_CLB_TILE3_IN7_MUX 0\n#define MW_CLB_TILE3_IN7 -1\n#define MW_CLB_TILE3_IN7_FILTER 0\n#define MW_CLB_TILE3_IN7_SYNC 0\n#define MW_CLB_TILE3_OUT0_0 0\n#define MW_CLB_TILE3_OUT0_1 0\n#define MW_CLB_TILE3_OUT0_2 0\n#define MW_CLB_TILE3_OUT1_0 0\n#define MW_CLB_TILE3_OUT1_1 0\n#define MW_CLB_TILE3_OUT1_2 0\n#define MW_CLB_TILE3_OUT2_0 0\n#define MW_CLB_TILE3_OUT2_1 0\n#define MW_CLB_TILE3_OUT2_2 0\n#define MW_CLB_TILE3_OUT3_0 0\n#define MW_CLB_TILE3_OUT3_1 0\n#define MW_CLB_TILE3_OUT3_2 0\n#define MW_CLB_TILE3_OUT4_0 0\n#define MW_CLB_TILE3_OUT4_1 0\n#define MW_CLB_TILE3_OUT4_2 0\n#define MW_CLB_TILE3_OUT5_0 0\n#define MW_CLB_TILE3_OUT5_1 0\n#define MW_CLB_TILE3_OUT6_0 0\n#define MW_CLB_TILE3_OUT6_1 0\n#define MW_CLB_TILE3_OUT6_2 0\n#define MW_CLB_TILE3_OUT7_0 0\n#define MW_CLB_TILE3_OUT7_1 0\n#define MW_CLB_TILE3_OUT7_2 0\n#define MW_CLB_TILE4 0\n#define MW_CLB_TILE4_NAME TILE4\n#define MW_CLB_TILE4_IN0_MUX 0\n#define MW_CLB_TILE4_IN0 -1\n#define MW_CLB_TILE4_IN0_FILTER 0\n#define MW_CLB_TILE4_IN0_SYNC 0\n#define MW_CLB_TILE4_IN1_MUX 0\n#define MW_CLB_TILE4_IN1 -1\n#define MW_CLB_TILE4_IN1_FILTER 0\n#define MW_CLB_TILE4_IN1_SYNC 0\n#define MW_CLB_TILE4_IN2_MUX 0\n#define MW_CLB_TILE4_IN2 -1\n#define MW_CLB_TILE4_IN2_FILTER 0\n#define MW_CLB_TILE4_IN2_SYNC 0\n#define MW_CLB_TILE4_IN3_MUX 0\n#define MW_CLB_TILE4_IN3 -1\n#define MW_CLB_TILE4_IN3_FILTER 0\n#define MW_CLB_TILE4_IN3_SYNC 0\n#define MW_CLB_TILE4_IN4_MUX 0\n#define MW_CLB_TILE4_IN4 -1\n#define MW_CLB_TILE4_IN4_FILTER 0\n#define MW_CLB_TILE4_IN4_SYNC 0\n#define MW_CLB_TILE4_IN5_MUX 0\n#define MW_CLB_TILE4_IN5 -1\n#define MW_CLB_TILE4_IN5_FILTER 0\n#define MW_CLB_TILE4_IN5_SYNC 0\n#define MW_CLB_TILE4_IN6_MUX 0\n#define MW_CLB_TILE4_IN6 -1\n#define MW_CLB_TILE4_IN6_FILTER 0\n#define MW_CLB_TILE4_IN6_SYNC 0\n#define MW_CLB_TILE4_IN7_MUX 0\n#define MW_CLB_TILE4_IN7 -1\n#define MW_CLB_TILE4_IN7_FILTER 0\n#define MW_CLB_TILE4_IN7_SYNC 0\n#define MW_CLB_TILE4_OUT0_0 0\n#define MW_CLB_TILE4_OUT0_1 0\n#define MW_CLB_TILE4_OUT0_2 0\n#define MW_CLB_TILE4_OUT1_0 0\n#define MW_CLB_TILE4_OUT1_1 0\n#define MW_CLB_TILE4_OUT1_2 0\n#define MW_CLB_TILE4_OUT2_0 0\n#define MW_CLB_TILE4_OUT2_1 0\n#define MW_CLB_TILE4_OUT2_2 0\n#define MW_CLB_TILE4_OUT3_0 0\n#define MW_CLB_TILE4_OUT3_1 0\n#define MW_CLB_TILE4_OUT3_2 0\n#define MW_CLB_TILE4_OUT4_0 0\n#define MW_CLB_TILE4_OUT4_1 0\n#define MW_CLB_TILE4_OUT4_2 0\n#define MW_CLB_TILE4_OUT5_0 0\n#define MW_CLB_TILE4_OUT5_1 0\n#define MW_CLB_TILE4_OUT5_2 0\n#define MW_CLB_TILE4_OUT6_0 0\n#define MW_CLB_TILE4_OUT6_1 0\n#define MW_CLB_TILE4_OUT6_2 0\n#define MW_CLB_TILE4_OUT7_0 0\n#define MW_CLB_TILE4_OUT7_1 0\n#define MW_CLB_TILE4_OUT7_2 0\n#define MW_CLB_HEADER clb_config.h\n#define MW_CLB_SOURCE clb_config.c\n\n#endif /* __MW_TARGET_HARDWARE_RESOURCES_H__ */\n\n#endif\n\n#endif\n"},{"name":"c28004xBoard_Realtime_Support.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ProgramData\\MATLAB\\SupportPackages\\R2021b\\toolbox\\target\\supportpackages\\tic2000\\src","tag":"","groupDisplay":"Other files","code":"#include \"MW_target_hardware_resources.h\"\n#include <string.h>\n\n// The following values are used to validate PLL Frequency using DCC\n//\n#define   MW_PLL_RETRIES              100\n#define   MW_PLL_LOCK_TIMEOUT        2000\n#define   MW_DCC_COUNTER0_WINDOW      100\n\n#if MW_RUNTIME_FLASHLOAD\nextern Uint16 MW_RamfuncsRunStart;\nextern Uint16 MW_RamfuncsLoadSize;\nextern Uint16 MW_RamfuncsLoadStart;\n#endif\n\nextern Uint16 Cla1funcsRunStart;\nextern Uint16 Cla1funcsLoadStart;\nextern Uint16 Cla1funcsLoadSize;\nextern Uint16 Cla1mathTablesRunStart;\nextern Uint16 Cla1mathTablesLoadStart;\nextern Uint16 Cla1mathTablesLoadSize;\n\n\nvoid c2000_flash_init(void)\n{\n  #if MW_RUNTIME_FLASHLOAD\n  /* Copy InitFlash function code and Flash setup code to RAM */\n  memcpy(&RamfuncsRunStart, &RamfuncsLoadStart, (size_t)&RamfuncsLoadSize);\n  memcpy(&MW_RamfuncsRunStart, &MW_RamfuncsLoadStart, (Uint32)&MW_RamfuncsLoadSize);\n  /* Call Flash Initialization to setup flash waitstates\n   This function must reside in RAM */\n  /* g2486589 - Standalone mode fix */\n  InitFlash();\n  #ifdef CLA_BLOCK_INCLUDED\n    memcpy(&Cla1funcsRunStart, &Cla1funcsLoadStart, (Uint32)&Cla1funcsLoadSize);\n    /*memcpy(&Cla1mathTablesRunStart, &Cla1mathTablesLoadStart, (Uint32)&Cla1mathTablesLoadSize); */\n  #endif  \n  #endif\n}\n\nbool MW_IsPLLValid(Uint16 oscSource, Uint16 imult, Uint16 fmult, Uint16 odiv)\n{\n    Uint32 dccCounterSeed0, dccCounterSeed1, dccValidSeed0;\n\n    //\n    // Setting Counter0 & Valid Seed Value with +/-2% tolerance\n    //\n    dccCounterSeed0 = MW_DCC_COUNTER0_WINDOW - 12U;\n    dccValidSeed0 = 24U;\n\n    //\n    // Multiplying Counter-0 window with PLL Integer Multiplier\n    //\n    dccCounterSeed1 = MW_DCC_COUNTER0_WINDOW * imult/(odiv + 1U);\n\n    //\n    // Multiplying Counter-0 window with PLL Fractional Multiplier\n    //\n    switch(fmult)\n    {\n        case FMULT_0pt25:\n            //\n            // FMULT * CNTR0 Window = 0.25 * 100 = 25, gets added to cntr0\n            // seed value\n            //\n            dccCounterSeed1 = dccCounterSeed1 + 25U;\n            break;\n        case FMULT_0pt5:\n            //\n            // FMULT * CNTR0 Window = 0.5 * 100 = 50, gets added to cntr0\n            // seed value\n            //\n            dccCounterSeed1 = dccCounterSeed1 + 50U;\n            break;\n        case FMULT_0pt75:\n            //\n            // FMULT * CNTR0 Window = 0.75 * 100 = 75, gets added to cntr0\n            // seed value\n            //\n            dccCounterSeed1 = dccCounterSeed1 + 75U;\n            break;\n        default:\n            //\n            // No fractional multiplier\n            //\n            dccCounterSeed1 = dccCounterSeed1;\n            break;\n    }\n\n    //\n    // Enable Peripheral Clock Domain PCLKCR21 for DCC\n    //\n    EALLOW;\n    CpuSysRegs.PCLKCR21.bit.DCC_0 = 1;\n\n    //\n    // Clear Error & Done Flag\n    //\n    Dcc0Regs.DCCSTATUS.bit.ERR = 1;\n    Dcc0Regs.DCCSTATUS.bit.DONE = 1;\n\n    //\n    // Disable DCC\n    //\n    Dcc0Regs.DCCGCTRL.bit.DCCENA = 0x5;\n\n    //\n    // Disable Error Signal\n    //\n    Dcc0Regs.DCCGCTRL.bit.ERRENA = 0x5;\n\n    //\n    // Disable Done Signal\n    //\n    Dcc0Regs.DCCGCTRL.bit.DONEENA = 0x5;\n\n    //\n    // Configure Clock Source0 to whatever is set as a clock source for PLL\n    //\n    switch(oscSource)\n    {\n        case INT_OSC1:\n            Dcc0Regs.DCCCLKSRC0.bit.CLKSRC0 = 1; // Clk Src0 = INTOSC1\n            break;\n\n        case INT_OSC2:\n            Dcc0Regs.DCCCLKSRC0.bit.CLKSRC0 = 2; // Clk Src0 = INTOSC2\n            break;\n\n        case XTAL_OSC:\n        case XTAL_OSC_SE:\n            Dcc0Regs.DCCCLKSRC0.bit.CLKSRC0 = 0; // Clk Src0 = XTAL\n            break;\n    }\n\n    //\n    // Configure Clock Source1 to PLL\n    //\n    Dcc0Regs.DCCCLKSRC1.bit.KEY = 0xA; // Clk Src1 Key to enable clock source selection for count1\n    Dcc0Regs.DCCCLKSRC1.bit.CLKSRC1 = 0; // Clk Src1 = PLL\n\n    //\n    // Configure COUNTER-0, COUNTER-1 & Valid Window\n    //\n    Dcc0Regs.DCCCNTSEED0.bit.COUNTSEED0 = dccCounterSeed0; // Loaded Counter0 Value\n    Dcc0Regs.DCCVALIDSEED0.bit.VALIDSEED = dccValidSeed0;  // Loaded Valid Value\n    Dcc0Regs.DCCCNTSEED1.bit.COUNTSEED1 = dccCounterSeed1; // Loaded Counter1 Value\n\n    //\n    // Enable Single Shot Mode\n    //\n    Dcc0Regs.DCCGCTRL.bit.SINGLESHOT = 0xA;\n\n    //\n    // Enable Error Signal\n    //\n    Dcc0Regs.DCCGCTRL.bit.ERRENA = 0xA;\n\n    //\n    // Enable Done Signal\n    //\n    Dcc0Regs.DCCGCTRL.bit.DONEENA = 0xA;\n\n    //\n    // Enable DCC to start counting\n    //\n    Dcc0Regs.DCCGCTRL.bit.DCCENA = 0xA;\n    EDIS;\n\t\n    // Timeout for the loop\n    //\n    uint32_t timeout = dccCounterSeed1;\n\n    //\n    // Wait until Error or Done Flag is generated\n    //\n    while(((Dcc0Regs.DCCSTATUS.all & 3) == 0) && (timeout != 0U))\n    {\n\t\ttimeout--;\n    }\n\n    //\n    // Returns true if DCC completes without error\n    //\n    return(((Dcc0Regs.DCCSTATUS.all & 3) == 2) && \n\t(Dcc0Regs.DCCCNT0.bit.COUNT0 == 0) && \n\t(Dcc0Regs.DCCVALID0.bit.VALID0 == 0) && \n\t(Dcc0Regs.DCCCNT1.bit.COUNT1 == 0)) ;\n\n}\n\nvoid MW_InitSysPll(Uint16 clock_source, Uint16 imult, Uint16 fmult, Uint16 odiv, Uint16 divsel)\n{\n    Uint32 timeout, retries, temp_syspllmult, pllLockStatus;\n    bool status;\n\n    if(((clock_source & 0x3) == ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL)    &&\n       (((clock_source & 0x4) >> 2) == ClkCfgRegs.XTALCR.bit.SE)           &&\n                     (imult  == ClkCfgRegs.SYSPLLMULT.bit.IMULT)           &&\n                     (fmult  == ClkCfgRegs.SYSPLLMULT.bit.FMULT)           &&\n                     (odiv  == ClkCfgRegs.SYSPLLMULT.bit.ODIV)           &&\n                     (divsel == ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV))\n    {\n        //\n        // Everything is set as required, so just return\n        //\n        return;\n    }\n\n    if(((clock_source & 0x3) != ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL) ||\n       (((clock_source & 0x4) >> 2) != ClkCfgRegs.XTALCR.bit.SE))\n    {\n        switch (clock_source)\n        {\n            case INT_OSC1:\n                SysIntOsc1Sel();\n                break;\n\n            case INT_OSC2:\n                SysIntOsc2Sel();\n                break;\n\n            case XTAL_OSC:\n                SysXtalOscSel();\n                break;\n\n            case XTAL_OSC_SE:\n                SysXtalOscSESel();\n                break;\n        }\n    }\n\n    EALLOW;\n\n    //\n    // First modify the PLL multipliers\n    //\n    if(imult != ClkCfgRegs.SYSPLLMULT.bit.IMULT ||\n       fmult != ClkCfgRegs.SYSPLLMULT.bit.FMULT||\n       odiv != ClkCfgRegs.SYSPLLMULT.bit.ODIV)\n    {\n        //\n        // Bypass PLL and set dividers to /1\n        //\n        ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN = 0;\n        ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = 0;\n\n        //\n        // Evaluate PLL multipliers\n        //\n        temp_syspllmult = (((Uint32)odiv << 16U) | (fmult << 8U) | imult);\n\n        //\n        // Loop to retry locking the PLL should the DCC module indicate\n        // that it was not successful.\n        //\n        for(retries = 0; (retries < MW_PLL_RETRIES); retries++)\n        {\n            //\n            // Bypass PLL\n            //\n            ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN = 0;\n\n            //\n            // Program PLL multipliers\n            //\n            ClkCfgRegs.SYSPLLMULT.all = temp_syspllmult;\n\n            //\n            // Enable SYSPLL\n            //\n            ClkCfgRegs.SYSPLLCTL1.bit.PLLEN = 1;\n\n            timeout = MW_PLL_LOCK_TIMEOUT;\n            pllLockStatus = ClkCfgRegs.SYSPLLSTS.bit.LOCKS;\n\n            //\n            // Wait for the SYSPLL lock\n            //\n            while((pllLockStatus != 1) && (timeout != 0U))\n            {\n                pllLockStatus = ClkCfgRegs.SYSPLLSTS.bit.LOCKS;\n                timeout--;\n            }\n\n            EDIS;\n\n            status = MW_IsPLLValid(clock_source, imult, fmult, odiv);\n\n            //\n            // Check DCC Status, if no error break the loop\n            //\n            if(status)\n            {\n                break;\n            }\n        }\n    }\n    else\n    {\n        status = true;\n    }\n\n    if(status)\n    {\n        EALLOW;\n        //\n        // Set divider to produce slower output frequency to limit current increase\n        //\n        if(divsel != PLLCLK_BY_126)\n        {\n            ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = divsel + 1;\n        }\n        else\n        {\n            ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = divsel;\n        }\n\n        //\n        // Enable PLLSYSCLK is fed from system PLL clock\n        //\n        ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN = 1;\n\n        //\n        // Small 100 cycle delay\n        //\n        asm(\" RPT #100 || NOP\");\n\n        //\n        // Set the divider to user value\n        //\n        ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = divsel;\n        EDIS;\n    }\n}\n"},{"name":"c28004xSchedulerTimer0.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ProgramData\\MATLAB\\SupportPackages\\R2021b\\toolbox\\target\\supportpackages\\tic2000\\src","tag":"","groupDisplay":"Other files","code":"#include <stdbool.h>\n\n#include \"f28004x_device.h\"\n#include \"f28004x_cputimer.h\"\n#include \"f28004x_cputimervars.h\"\n#include \"MW_c28xx_pie.h\"\n\nextern void rt_OneStep(void);\n\ninterrupt void TINT0_isr(void)\n{\n      #ifdef PIEMASK0\n        volatile unsigned int PIEIER1_stack_save = PieCtrlRegs.PIEIER1.all;\n      #endif\n      #ifdef PIEMASK1\n        volatile unsigned int PIEIER2_stack_save  = PieCtrlRegs.PIEIER2.all;\n      #endif\n      #ifdef PIEMASK2\n        volatile unsigned int PIEIER3_stack_save  = PieCtrlRegs.PIEIER3.all;\n      #endif\n      #ifdef PIEMASK3\n        volatile unsigned int PIEIER4_stack_save  = PieCtrlRegs.PIEIER4.all;\n      #endif\n      #ifdef PIEMASK4\n        volatile unsigned int PIEIER5_stack_save  = PieCtrlRegs.PIEIER5.all;\n      #endif\n      #ifdef PIEMASK5\n        volatile unsigned int PIEIER6_stack_save  = PieCtrlRegs.PIEIER6.all;\n      #endif\n      #ifdef PIEMASK6\n        volatile unsigned int PIEIER7_stack_save  = PieCtrlRegs.PIEIER7.all;\n      #endif\n      #ifdef PIEMASK7\n        volatile unsigned int PIEIER8_stack_save  = PieCtrlRegs.PIEIER8.all;\n      #endif\n      #ifdef PIEMASK8\n        volatile unsigned int PIEIER9_stack_save  = PieCtrlRegs.PIEIER9.all;\n      #endif\n      #ifdef PIEMASK9\n        volatile unsigned int PIEIER10_stack_save = PieCtrlRegs.PIEIER10.all;\n      #endif\n      #ifdef PIEMASK10\n        volatile unsigned int PIEIER11_stack_save = PieCtrlRegs.PIEIER11.all;\n      #endif\n      #ifdef PIEMASK11\n        volatile unsigned int PIEIER12_stack_save = PieCtrlRegs.PIEIER12.all;\n      #endif\n\n      #ifdef PIEMASK0\n        PieCtrlRegs.PIEIER1.all &= ~PIEMASK0;      /* disable group1 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK1\n        PieCtrlRegs.PIEIER2.all &= ~PIEMASK1;      /* disable group2 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK2\n        PieCtrlRegs.PIEIER3.all &= ~PIEMASK2;      /* disable group3 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK3\n        PieCtrlRegs.PIEIER4.all &= ~PIEMASK3;      /* disable group4 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK4\n        PieCtrlRegs.PIEIER5.all &= ~PIEMASK4;      /* disable group5 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK5\n        PieCtrlRegs.PIEIER6.all &= ~PIEMASK5;      /* disable group6 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK6\n        PieCtrlRegs.PIEIER7.all &= ~PIEMASK6;      /* disable group7 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK7\n        PieCtrlRegs.PIEIER8.all &= ~PIEMASK7;      /* disable group8 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK8\n        PieCtrlRegs.PIEIER9.all &= ~PIEMASK8;      /* disable group9 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK9\n        PieCtrlRegs.PIEIER10.all &= ~PIEMASK9;     /* disable group10 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK10\n        PieCtrlRegs.PIEIER11.all &= ~PIEMASK10;    /* disable group11 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK11\n        PieCtrlRegs.PIEIER12.all &= ~PIEMASK11;    /* disable group12 lower/equal priority interrupts */\n      #endif\n\n      asm(\" RPT #5 || NOP\");               /* wait 5 cycles */\n      IFR &= ~IFRMASK;                           /* eventually disable lower/equal priority pending interrupts */\n      PieCtrlRegs.PIEACK.all = IFRMASK;          /* ACK to allow other interrupts from the same group to fire */\n      IER |= 1;\n      EINT;                                /* global interrupt enable */\n      rt_OneStep();\n      DINT;                                /* disable global interrupts during context switch, CPU will enable global interrupts after exiting ISR */\n      #ifdef PIEMASK0\n        PieCtrlRegs.PIEIER1.all = PIEIER1_stack_save;/*restore PIEIER register that was modified */\n      #endif  \n      #ifdef PIEMASK1\n        PieCtrlRegs.PIEIER2.all = PIEIER2_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK2\n        PieCtrlRegs.PIEIER3.all = PIEIER3_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK3\n        PieCtrlRegs.PIEIER4.all = PIEIER4_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK4\n        PieCtrlRegs.PIEIER5.all = PIEIER5_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK5\n        PieCtrlRegs.PIEIER6.all = PIEIER6_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK6\n        PieCtrlRegs.PIEIER7.all = PIEIER7_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK7\n        PieCtrlRegs.PIEIER8.all = PIEIER8_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK8\n        PieCtrlRegs.PIEIER9.all = PIEIER9_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK9\n        PieCtrlRegs.PIEIER10.all= PIEIER10_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK10\n        PieCtrlRegs.PIEIER11.all= PIEIER11_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK11\n        PieCtrlRegs.PIEIER12.all= PIEIER12_stack_save;/*restore PIEIER register that was modified */\n      #endif\n}\n\nvoid configureTimer0(float baseRate, float systemClock)\n{\n    \n    /* InitCpuTimers() - CPU Timers are initialized in \n     * MW_c28xx_board.c in the generated code.\n     */\n\n\t/* Configure CPU-Timer 0 to interrupt every base rate. */\n\t/* Parameters:  Timer Pointer, CPU Freq in MHz, Period in usec. */\n\tConfigCpuTimer(&CpuTimer0, systemClock, baseRate * 1000000);\n\tStartCpuTimer0();\n\n\tEALLOW;\n\tPieVectTable.TIMER0_INT = &TINT0_isr;     /* Hook interrupt to the ISR*/\n\tEDIS;\n\n\tPieCtrlRegs.PIEIER1.bit.INTx7 = 1;   /* Enable interrupt TINT0 */\n\tIER |= M_INT1;\n}\n\nvoid enableTimer0Interrupt(void)\n{\n\tasm(\" SETC INTM\"); /* Disable Interrupt Global Enable Bit - set it to 1 */\n\tPieCtrlRegs.PIEIER1.all |= (1 << 6); /* Enable PIER bit for timer 0 */\n\tasm(\" CLRC INTM\"); /* Enable Interrupt Global Enable Bit - set it to 0 */\n}\n\nbool disableTimer0Interrupt(void)\n{\n    bool isrEnabled = false;\n\tasm(\" SETC INTM\"); /* Disable Interrupt Global Enable Bit - set it to 1 */\n    isrEnabled = PieCtrlRegs.PIEIER1.all & (1 << 6) ;\n\tPieCtrlRegs.PIEIER1.all &= ~(1 << 6); /* Disable PIER bit for timer 0 */\n\tasm(\" RPT #5 || NOP\");\n\tIFR &= 0xFFFE;\n\tPieCtrlRegs.PIEACK.all = 0x1;\n\tasm(\" CLRC INTM\"); /* Enable Interrupt Global Enable Bit - set it to 0 */\n    return isrEnabled;\n}\n\nvoid restoreTimer0Interrupt(bool isrStatus){\n    if(isrStatus)\n        enableTimer0Interrupt();\n    else\n        disableTimer0Interrupt();\n}\n"},{"name":"clb.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_4_00_00_00\\driverlib\\f28004x\\driverlib","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   clb.c\n//\n// TITLE:  C28x CLB driver.\n//\n//###########################################################################\n// $Copyright:\n// Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n#include \"clb.h\"\n\n//*****************************************************************************\n//\n// CLB_configCounterLoadMatch\n//\n//*****************************************************************************\nvoid CLB_configCounterLoadMatch(uint32_t base, CLB_Counters counterID,\n                               uint32_t load, uint32_t match1, uint32_t match2)\n{\n    ASSERT(CLB_isBaseValid(base));\n\n    EALLOW;\n    switch(counterID)\n    {\n        case CLB_CTR0:\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_0_LOAD, load);\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_0_MATCH1, match1);\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_0_MATCH2, match2);\n            break;\n\n        case CLB_CTR1:\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_1_LOAD, load);\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_1_MATCH1, match1);\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_1_MATCH2, match2);\n            break;\n\n        case CLB_CTR2:\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_2_LOAD, load);\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_2_MATCH1, match1);\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_2_MATCH2, match2);\n            break;\n\n        default:\n            //\n            // Invalid counterID value\n            //\n            break;\n    }\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// CLB_clearFIFOs\n//\n//*****************************************************************************\nvoid CLB_clearFIFOs(uint32_t base)\n{\n    uint16_t i;\n\n    ASSERT(CLB_isBaseValid(base));\n\n    for(i = 0U; i < CLB_FIFO_SIZE; i++)\n    {\n        HWREG(base + CLB_DATAEXCH + CLB_O_PULL(i)) = 0U;\n    }\n\n    HWREG(base + CLB_LOGICCTL + CLB_O_BUF_PTR) = 0U;\n}\n\n//*****************************************************************************\n//\n// CLB_writeFIFOs\n//\n//*****************************************************************************\nvoid CLB_writeFIFOs(uint32_t base , const uint32_t pullData[])\n{\n    ASSERT(CLB_isBaseValid(base));\n\n    //\n    // Clear the FIFO and pointer\n    //\n    CLB_clearFIFOs(base);\n\n    //\n    // Write data into the FIFO.\n    //\n    HWREG(base + CLB_DATAEXCH + CLB_O_PULL(0)) = pullData[0U];\n    HWREG(base + CLB_DATAEXCH + CLB_O_PULL(1)) = pullData[1U];\n    HWREG(base + CLB_DATAEXCH + CLB_O_PULL(2)) = pullData[2U];\n    HWREG(base + CLB_DATAEXCH + CLB_O_PULL(3)) = pullData[3U];\n}\n\n//*****************************************************************************\n//\n// CLB_readFIFOs\n//\n//*****************************************************************************\nvoid CLB_readFIFOs(uint32_t base , uint32_t pushData[])\n{\n    ASSERT(CLB_isBaseValid(base));\n\n    //\n    // Read data from the FIFO.\n    //\n    pushData[0U] = HWREG(base + CLB_DATAEXCH + CLB_O_PUSH(0)) ;\n    pushData[1U] = HWREG(base + CLB_DATAEXCH + CLB_O_PUSH(1)) ;\n    pushData[2U] = HWREG(base + CLB_DATAEXCH + CLB_O_PUSH(2)) ;\n    pushData[3U] = HWREG(base + CLB_DATAEXCH + CLB_O_PUSH(3)) ;\n}\n\n\n"},{"name":"dma.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_4_00_00_00\\driverlib\\f28004x\\driverlib","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   dma.c\n//\n// TITLE:  C28x DMA driver.\n//\n//###########################################################################\n// $Copyright:\n// Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n#include \"dma.h\"\n\n//*****************************************************************************\n//\n// DMA_configAddresses\n//\n//*****************************************************************************\nvoid DMA_configAddresses(uint32_t base, const void *destAddr,\n                         const void *srcAddr)\n{\n    //\n    // Check the arguments.\n    //\n    ASSERT(DMA_isBaseValid(base));\n\n    EALLOW;\n\n    //\n    // Set up SOURCE address.\n    //\n    HWREG(base + DMA_O_SRC_BEG_ADDR_SHADOW) = (uint32_t)srcAddr;\n    HWREG(base + DMA_O_SRC_ADDR_SHADOW)     = (uint32_t)srcAddr;\n\n    //\n    // Set up DESTINATION address.\n    //\n    HWREG(base + DMA_O_DST_BEG_ADDR_SHADOW) = (uint32_t)destAddr;\n    HWREG(base + DMA_O_DST_ADDR_SHADOW)     = (uint32_t)destAddr;\n\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// DMA_configBurst\n//\n//*****************************************************************************\nvoid DMA_configBurst(uint32_t base, uint16_t size, int16_t srcStep,\n                     int16_t destStep)\n{\n    //\n    // Check the arguments.\n    //\n    ASSERT(DMA_isBaseValid(base));\n    ASSERT((size >= 1U) || (size <= 32U));\n\n    EALLOW;\n\n    //\n    // Set up BURST registers.\n    //\n    HWREGH(base + DMA_O_BURST_SIZE)     = size - 1U;\n    HWREGH(base + DMA_O_SRC_BURST_STEP) = srcStep;\n    HWREGH(base + DMA_O_DST_BURST_STEP) = destStep;\n\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// DMA_configTransfer\n//\n//*****************************************************************************\nvoid DMA_configTransfer(uint32_t base, uint32_t transferSize, int16_t srcStep,\n                        int16_t destStep)\n{\n    //\n    // Check the arguments.\n    //\n    ASSERT(DMA_isBaseValid(base));\n    ASSERT(transferSize <= 0x10000);\n\n    EALLOW;\n\n    //\n    // Set up TRANSFER registers.\n    //\n    HWREGH(base + DMA_O_TRANSFER_SIZE)     = (uint16_t)(transferSize - 1U);\n    HWREGH(base + DMA_O_SRC_TRANSFER_STEP) = srcStep;\n    HWREGH(base + DMA_O_DST_TRANSFER_STEP) = destStep;\n\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// DMA_configWrap\n//\n//*****************************************************************************\nvoid DMA_configWrap(uint32_t base, uint32_t srcWrapSize, int16_t srcStep,\n                    uint32_t destWrapSize, int16_t destStep)\n{\n    //\n    // Check the arguments.\n    //\n    ASSERT(DMA_isBaseValid(base));\n    ASSERT((srcWrapSize <= 0x10000) || (destWrapSize <= 0x10000));\n\n    EALLOW;\n\n    //\n    // Set up WRAP registers.\n    //\n    HWREGH(base + DMA_O_SRC_WRAP_SIZE) = (uint16_t)(srcWrapSize - 1U);\n    HWREGH(base + DMA_O_SRC_WRAP_STEP) = srcStep;\n\n    HWREGH(base + DMA_O_DST_WRAP_SIZE) = (uint16_t)(destWrapSize - 1U);\n    HWREGH(base + DMA_O_DST_WRAP_STEP) = destStep;\n\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// DMA_configMode\n//\n//*****************************************************************************\nvoid DMA_configMode(uint32_t base, DMA_Trigger trigger, uint32_t config)\n{\n    //\n    // Check the arguments.\n    //\n    ASSERT(DMA_isBaseValid(base));\n\n    EALLOW;\n\n    //\n    // Set up trigger selection in the CMA/CLA trigger source selection\n    // registers. These are considered part of system control.\n    //\n    switch(base)\n    {\n        case DMA_CH1_BASE:\n            //\n            // Channel 1\n            //\n            HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) =\n                (HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) &\n                 ~((uint32_t)SYSCTL_DMACHSRCSEL1_CH1_M)) |\n                ((uint32_t)trigger << SYSCTL_DMACHSRCSEL1_CH1_S);\n\n            //\n            // Set peripheral interrupt select bits to the channel number.\n            //\n            HWREGH(DMA_CH1_BASE + DMA_O_MODE) =\n               (HWREGH(DMA_CH1_BASE + DMA_O_MODE) & ~DMA_MODE_PERINTSEL_M) | 1U;\n            break;\n\n        case DMA_CH2_BASE:\n            //\n            // Channel 2\n            //\n            HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) =\n                (HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) &\n                 ~((uint32_t)SYSCTL_DMACHSRCSEL1_CH2_M)) |\n                ((uint32_t)trigger << SYSCTL_DMACHSRCSEL1_CH2_S);\n\n            //\n            // Set peripheral interrupt select bits to the channel number.\n            //\n            HWREGH(DMA_CH2_BASE + DMA_O_MODE) =\n               (HWREGH(DMA_CH2_BASE + DMA_O_MODE) & ~DMA_MODE_PERINTSEL_M) | 2U;\n            break;\n\n        case DMA_CH3_BASE:\n            //\n            // Channel 3\n            //\n            HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) =\n                (HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) &\n                 ~((uint32_t)SYSCTL_DMACHSRCSEL1_CH3_M)) |\n                ((uint32_t)trigger << SYSCTL_DMACHSRCSEL1_CH3_S);\n\n            //\n            // Set peripheral interrupt select bits to the channel number.\n            //\n            HWREGH(DMA_CH3_BASE + DMA_O_MODE) =\n               (HWREGH(DMA_CH3_BASE + DMA_O_MODE) & ~DMA_MODE_PERINTSEL_M) | 3U;\n            break;\n\n        case DMA_CH4_BASE:\n            //\n            // Channel 4\n            //\n            HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) =\n                (HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) &\n                 ~((uint32_t)SYSCTL_DMACHSRCSEL1_CH4_M)) |\n                ((uint32_t)trigger << SYSCTL_DMACHSRCSEL1_CH4_S);\n\n            //\n            // Set peripheral interrupt select bits to the channel number.\n            //\n            HWREGH(DMA_CH4_BASE + DMA_O_MODE) =\n               (HWREGH(DMA_CH4_BASE + DMA_O_MODE) & ~DMA_MODE_PERINTSEL_M) | 4U;\n            break;\n\n        case DMA_CH5_BASE:\n            //\n            // Channel 5\n            //\n            HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL2) =\n                (HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL2) &\n                 ~((uint32_t)SYSCTL_DMACHSRCSEL2_CH5_M)) |\n                ((uint32_t)trigger << SYSCTL_DMACHSRCSEL2_CH5_S);\n\n            //\n            // Set peripheral interrupt select bits to the channel number.\n            //\n            HWREGH(DMA_CH5_BASE + DMA_O_MODE) =\n               (HWREGH(DMA_CH5_BASE + DMA_O_MODE) & ~DMA_MODE_PERINTSEL_M) | 5U;\n            break;\n\n        case DMA_CH6_BASE:\n            //\n            // Channel 6\n            //\n            HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL2) =\n                (HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL2) &\n                 ~((uint32_t)SYSCTL_DMACHSRCSEL2_CH6_M)) |\n                ((uint32_t)trigger << SYSCTL_DMACHSRCSEL2_CH6_S);\n\n            //\n            // Set peripheral interrupt select bits to the channel number.\n            //\n            HWREGH(DMA_CH6_BASE + DMA_O_MODE) =\n               (HWREGH(DMA_CH6_BASE + DMA_O_MODE) & ~DMA_MODE_PERINTSEL_M) | 6U;\n            break;\n\n        default:\n            //\n            // Invalid base.\n            //\n            break;\n    }\n\n    //\n    // Write the configuration to the mode register.\n    //\n    HWREGH(base + DMA_O_MODE) &= ~(DMA_MODE_DATASIZE | DMA_MODE_CONTINUOUS |\n                                   DMA_MODE_ONESHOT);\n    HWREGH(base + DMA_O_MODE) |= config;\n\n    EDIS;\n}\n\n"},{"name":"f28004x_adc.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_4_00_00_00\\device_support\\f28004x\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:    f28004x_adc.c\n//\n// TITLE:   F28004x ADC Support Functions.\n//\n//###########################################################################\n//\n//\n// $Copyright:\n// Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"f28004x_device.h\"      // Header File Include File\n#include \"f28004x_examples.h\"    // Examples Include File\n\n//\n// SetVREF - Set Vref mode. Function to select reference mode and offset trim.\n// Offset trim for Internal VREF 3.3 is unique.  All other modes use the same\n// offset trim. Also note that when the mode parameter is ADC_EXTERNAL, the\n// ref parameter has no effect.\n//\nvoid SetVREF(int module, int mode, int ref)\n{\n    Uint16 *offset, offval;\n\n    //\n    // Define offset locations from OTP\n    //\n    offset = (Uint16 *)(0x70594 + (module * 6));\n\n    if((mode == ADC_INTERNAL) && (ref == ADC_VREF3P3))\n    {\n        offval = (*offset) >> 8;    // Internal / 1.65v mode offset\n    }\n    else\n    {\n        offval = (*offset) & 0xFF;  // All other modes\n    }\n\n    //\n    // Write offset trim values and configure reference modes\n    //\n    EALLOW;\n    switch(module)\n    {\n        case 0:\n            AdcaRegs.ADCOFFTRIM.bit.OFFTRIM = offval;\n            AnalogSubsysRegs.ANAREFCTL.bit.ANAREFASEL = mode;\n            AnalogSubsysRegs.ANAREFCTL.bit.ANAREFA2P5SEL = ref;\n            break;\n        case 1:\n            AdcbRegs.ADCOFFTRIM.bit.OFFTRIM = offval;\n            AnalogSubsysRegs.ANAREFCTL.bit.ANAREFBSEL = mode;\n            AnalogSubsysRegs.ANAREFCTL.bit.ANAREFB2P5SEL = ref;\n            break;\n        case 2:\n            AdccRegs.ADCOFFTRIM.bit.OFFTRIM = offval;\n            AnalogSubsysRegs.ANAREFCTL.bit.ANAREFCSEL = mode;\n            AnalogSubsysRegs.ANAREFCTL.bit.ANAREFC2P5SEL = ref;\n            break;\n        default:\n            break;\n    }\n    EDIS;\n}\n\n//\n// End of File\n//\n"},{"name":"f28004x_codestartbranch.asm","type":"other","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_4_00_00_00\\device_support\\f28004x\\common\\source","tag":"","groupDisplay":"Other files","code":";//###########################################################################\n;//\n;// FILE:  f28004x_codestartbranch.asm\n;//\n;// TITLE: Branch for redirecting code execution after boot.\n;//\n;// For these examples, code_start is the first code that is executed after\n;// exiting the boot ROM code.\n;//\n;// The codestart section in the linker cmd file is used to physically place\n;// this code at the correct memory location. This section should be placed\n;// at the location the BOOT ROM will re-direct the code to. For example,\n;// for boot to FLASH this code will be located at 0x80000.\n;//\n;// In addition, the example f28004x projects are setup such that the codegen\n;// entry point is also set to the codestart label. This is done by linker\n;// option -e in the project build options. When the debugger loads the code,\n;// it will automatically set the PC to the \"entry point\" address indicated by\n;// the -e linker option. In this case the debugger is simply assigning the PC,\n;// it is not the same as a full reset of the device.\n;//\n;// The compiler may warn that the entry point for the project is other then\n;//  _c_init00. _c_init00 is the C environment setup and is run before\n;// main() is entered. The codestart code will re-direct the execution\n;// to _c_init00 and thus there is no worry and this warning can be ignored.\n;//\n;//###########################################################################\n;//\n;//\n;// $Copyright:\n;// Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/\n;//\n;// Redistribution and use in source and binary forms, with or without \n;// modification, are permitted provided that the following conditions \n;// are met:\n;// \n;//   Redistributions of source code must retain the above copyright \n;//   notice, this list of conditions and the following disclaimer.\n;// \n;//   Redistributions in binary form must reproduce the above copyright\n;//   notice, this list of conditions and the following disclaimer in the \n;//   documentation and/or other materials provided with the   \n;//   distribution.\n;// \n;//   Neither the name of Texas Instruments Incorporated nor the names of\n;//   its contributors may be used to endorse or promote products derived\n;//   from this software without specific prior written permission.\n;// \n;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n;// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n;// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n;// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n;// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n;// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n;// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n;// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n;// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n;// $\n;//###########################################################################\n\n***********************************************************************\n\nWD_DISABLE  .set  1    ;set to 1 to disable WD, else set to 0\n\n    .ref _c_int00\n    .global code_start\n\n***********************************************************************\n* Function: codestart section\n*\n* Description: Branch to code starting point\n***********************************************************************\n\n    .sect \"codestart\"\n    .retain\n\ncode_start:\n    .if WD_DISABLE == 1\n        LB wd_disable       ;Branch to watchdog disable code\n    .else\n        LB _c_int00         ;Branch to start of boot._asm in RTS library\n    .endif\n\n;end codestart section\n\n***********************************************************************\n* Function: wd_disable\n*\n* Description: Disables the watchdog timer\n***********************************************************************\n    .if WD_DISABLE == 1\n\n    .text\nwd_disable:\n    SETC OBJMODE        ;Set OBJMODE for 28x object code\n    EALLOW              ;Enable EALLOW protected register access\n    MOVZ DP, #7029h>>6  ;Set data page for WDCR register\n    MOV @7029h, #0068h  ;Set WDDIS bit in WDCR to disable WD\n    EDIS                ;Disable EALLOW protected register access\n    LB _c_int00         ;Branch to start of boot._asm in RTS library\n\n    .endif\n\n;end wd_disable\n\n    .end\n\n;//\n;// End of file.\n;//\n"},{"name":"f28004x_cputimers.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_4_00_00_00\\device_support\\f28004x\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:    f28004x_cputimers.c\n//\n// TITLE:   f28004x CPU 32-bit Timers Initialization & Support Functions.\n//\n//###########################################################################\n//\n//\n// $Copyright:\n// Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"f28004x_device.h\"      // Headerfile Include File\n#include \"f28004x_examples.h\"    // Examples Include File\n\n//\n// Globals\n//\nstruct CPUTIMER_VARS CpuTimer0;\nstruct CPUTIMER_VARS CpuTimer1;\nstruct CPUTIMER_VARS CpuTimer2;\n\n//\n// InitCpuTimers - This function initializes all three CPU timers\n// to a known state.\n//\nvoid\nInitCpuTimers(void)\n{\n    //\n    // CPU Timer 0\n    // Initialize address pointers to respective timer registers\n    //\n    CpuTimer0.RegsAddr = &CpuTimer0Regs;\n\n    //\n    // Initialize timer period to maximum\n    //\n    CpuTimer0Regs.PRD.all  = 0xFFFFFFFF;\n\n    //\n    // Initialize pre-scale counter to divide by 1 (SYSCLKOUT)\n    //\n    CpuTimer0Regs.TPR.all  = 0;\n    CpuTimer0Regs.TPRH.all = 0;\n\n    //\n    // Make sure timer is stopped\n    //\n    CpuTimer0Regs.TCR.bit.TSS = 1;\n\n    //\n    // Reload all counter register with period value\n    //\n    CpuTimer0Regs.TCR.bit.TRB = 1;\n\n    //\n    // Reset interrupt counters\n    //\n    CpuTimer0.InterruptCount = 0;\n\n    //\n    // CPU Timer 1 and 2\n    // Initialize address pointers to respective timer registers\n    //\n    CpuTimer1.RegsAddr = &CpuTimer1Regs;\n    CpuTimer2.RegsAddr = &CpuTimer2Regs;\n\n    //\n    // Initialize timer period to maximum\n    //\n    CpuTimer1Regs.PRD.all  = 0xFFFFFFFF;\n    CpuTimer2Regs.PRD.all  = 0xFFFFFFFF;\n\n    //\n    // Initialize pre-scale counter to divide by 1 (SYSCLKOUT)\n    //\n    CpuTimer1Regs.TPR.all  = 0;\n    CpuTimer1Regs.TPRH.all = 0;\n    CpuTimer2Regs.TPR.all  = 0;\n    CpuTimer2Regs.TPRH.all = 0;\n\n    //\n    // Make sure timers are stopped\n    //\n    CpuTimer1Regs.TCR.bit.TSS = 1;\n    CpuTimer2Regs.TCR.bit.TSS = 1;\n\n    //\n    // Reload all counter register with period value\n    //\n    CpuTimer1Regs.TCR.bit.TRB = 1;\n    CpuTimer2Regs.TCR.bit.TRB = 1;\n\n    //\n    // Reset interrupt counters\n    //\n    CpuTimer1.InterruptCount = 0;\n    CpuTimer2.InterruptCount = 0;\n}\n\n//\n// ConfigCpuTimer - This function initializes the selected timer to the period\n// specified by the \"Freq\" and \"Period\" parameters. The \"Freq\" is entered\n// as \"MHz\" and the \"Period\" in \"uSeconds\". The timer is held in the stopped\n// state after configuration.\n//\nvoid\nConfigCpuTimer(struct CPUTIMER_VARS *Timer, float Freq, float Period)\n{\n    Uint32 temp;\n\n    //\n    // Initialize timer period\n    //\n    Timer->CPUFreqInMHz = Freq;\n    Timer->PeriodInUSec = Period;\n    temp = (long) (Freq * Period);\n    Timer->RegsAddr->PRD.all = temp;\n\n    //\n    // Set pre-scale counter to divide by 1 (SYSCLKOUT)\n    //\n    Timer->RegsAddr->TPR.all  = 0;\n    Timer->RegsAddr->TPRH.all  = 0;\n\n    //\n    // Initialize timer control register\n    //\n\n    //\n    // 1 = Stop timer, 0 = Start/Restart Timer\n    //\n    Timer->RegsAddr->TCR.bit.TSS = 1;\n\n    //\n    // 1 = reload timer\n    //\n    Timer->RegsAddr->TCR.bit.TRB = 1;\n    Timer->RegsAddr->TCR.bit.SOFT = 0;\n\n    //\n    // Timer Free Run Disabled\n    //\n    Timer->RegsAddr->TCR.bit.FREE = 0;\n\n    //\n    // 0 = Disable 1 = Enable Timer Interrupt\n    //\n    Timer->RegsAddr->TCR.bit.TIE = 1;\n\n    //\n    // Reset interrupt counter\n    //\n    Timer->InterruptCount = 0;\n}\n\n//\n// End of File\n//\n\n"},{"name":"f28004x_defaultisr.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_4_00_00_00\\device_support\\f28004x\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   f28004x_defaultisr.c\n//\n// TITLE:  f28004x Device Default Interrupt Service Routines\n//\n//###########################################################################\n//\n//\n// $Copyright:\n// Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"f28004x_device.h\"       // F28004x Header File Include File\n#include \"f28004x_examples.h\"     // F28004x Examples Include File\n\n//\n// TIMER1_ISR - CPU Timer 1 Interrupt\n//\n__interrupt void\nTIMER1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// TIMER2_ISR - CPU Timer 2 Interrupt\n//\n__interrupt void\nTIMER2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// DATALOG_ISR - Datalogging Interrupt\n//\n__interrupt void\nDATALOG_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// RTOS_ISR - RTOS Interrupt\n//\n__interrupt void\nRTOS_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EMU_ISR - Emulation Interrupt\n//\n__interrupt void\nEMU_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// NMI_ISR - Non-Maskable Interrupt\n//\n__interrupt void\nNMI_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ILLEGAL_ISR - Illegal Operation Trap\n//\n__interrupt void\nILLEGAL_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// USER1_ISR - User Defined Trap 1\n//\n__interrupt void\nUSER1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// USER2_ISR - User Defined Trap 2\n//\n__interrupt void\nUSER2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// USER3_ISR - User Defined Trap 3\n//\n__interrupt void\nUSER3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// USER4_ISR - User Defined Trap 4\n//\n__interrupt void\nUSER4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// USER5_ISR - User Defined Trap 5\n//\n__interrupt void\nUSER5_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// USER6_ISR - User Defined Trap 6\n//\n__interrupt void\nUSER6_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// USER7_ISR - User Defined Trap 7\n//\n__interrupt void\nUSER7_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// USER8_ISR - User Defined Trap 8\n//\n__interrupt void\nUSER8_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// USER9_ISR - User Defined Trap 9\n//\n__interrupt void\nUSER9_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// USER10_ISR - User Defined Trap 10\n//\n__interrupt void\nUSER10_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// USER11_ISR - User Defined Trap 11\n//\n__interrupt void\nUSER11_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// USER12_ISR - User Defined Trap 12\n//\n__interrupt void\nUSER12_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCA1_ISR - ADCA Interrupt 1\n//\n__interrupt void\nADCA1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCB1_ISR - ADCB Interrupt 1\n//\n__interrupt void\nADCB1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCC1_ISR - ADCC Interrupt 1\n//\n__interrupt void\nADCC1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// XINT1_ISR - XINT1 Interrupt\n//\n__interrupt void\nXINT1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// XINT2_ISR - XINT2 Interrupt\n//\n__interrupt void\nXINT2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// TIMER0_ISR - Timer 0 Interrupt\n//\n__interrupt void\nTIMER0_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// WAKE_ISR - Halt Wakeup Interrupt\n//\n__interrupt void\nWAKE_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM1_TZ_ISR - ePWM1 Trip Zone Interrupt\n//\n__interrupt void\nEPWM1_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM2_TZ_ISR - ePWM2 Trip Zone Interrupt\n//\n__interrupt void\nEPWM2_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM3_TZ_ISR - ePWM3 Trip Zone Interrupt\n//\n__interrupt void\nEPWM3_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM4_TZ_ISR - ePWM4 Trip Zone Interrupt\n//\n__interrupt void\nEPWM4_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM5_TZ_ISR - ePWM5 Trip Zone Interrupt\n//\n__interrupt void\nEPWM5_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM6_TZ_ISR - ePWM6 Trip Zone Interrupt\n//\n__interrupt void\nEPWM6_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM7_TZ_ISR - ePWM7 Trip Zone Interrupt\n//\n__interrupt void\nEPWM7_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM8_TZ_ISR - ePWM8 Trip Zone Interrupt\n//\n__interrupt void\nEPWM8_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM1_ISR - ePWM1 Interrupt\n//\n__interrupt void\nEPWM1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM2_ISR - ePWM2 Interrupt\n//\n__interrupt void\nEPWM2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM3_ISR - ePWM3 Interrupt\n//\n__interrupt void\nEPWM3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM4_ISR - ePWM4 Interrupt\n//\n__interrupt void\nEPWM4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM5_ISR - ePWM5 Interrupt\n//\n__interrupt void\nEPWM5_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM6_ISR - ePWM6 Interrupt\n//\n__interrupt void\nEPWM6_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM7_ISR - ePWM7 Interrupt\n//\n__interrupt void\nEPWM7_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EPWM8_ISR - ePWM8 Interrupt\n//\n__interrupt void\nEPWM8_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ECAP1_ISR - eCAP1 Interrupt\n//\n__interrupt void\nECAP1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ECAP2_ISR - eCAP2 Interrupt\n//\n__interrupt void\nECAP2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ECAP3_ISR - eCAP3 Interrupt\n//\n__interrupt void\nECAP3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ECAP4_ISR - eCAP4 Interrupt\n//\n__interrupt void\nECAP4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ECAP5_ISR - eCAP5 Interrupt\n//\n__interrupt void\nECAP5_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ECAP6_ISR - eCAP6 Interrupt\n//\n__interrupt void\nECAP6_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ECAP7_ISR - eCAP7 Interrupt\n//\n__interrupt void\nECAP7_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ECAP6_2_ISR - eCAP6_2 Interrupt\n//\n__interrupt void\nECAP6_2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ECAP7_2_ISR - eCAP7_2 Interrupt\n//\n__interrupt void\nECAP7_2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EQEP1_ISR - eQEP1 Interrupt\n//\n__interrupt void\nEQEP1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP5;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EQEP2_ISR - eQEP2 Interrupt\n//\n__interrupt void\nEQEP2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP5;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SPIA_RX_ISR - SPIA Receive Interrupt\n//\n__interrupt void\nSPIA_RX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SPIA_TX_ISR - SPIA Transmit Interrupt\n//\n__interrupt void\nSPIA_TX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SPIB_RX_ISR - SPIB Receive Interrupt\n//\n__interrupt void\nSPIB_RX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SPIB_TX_ISR - SPIB Transmit Interrupt\n//\n__interrupt void\nSPIB_TX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// DMA_CH1_ISR - DMA Channel 1 Interrupt\n//\n__interrupt void\nDMA_CH1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// DMA_CH2_ISR - DMA Channel 2 Interrupt\n//\n__interrupt void\nDMA_CH2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// DMA_CH3_ISR - DMA Channel 3 Interrupt\n//\n__interrupt void\nDMA_CH3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// DMA_CH4_ISR - DMA Channel 4 Interrupt\n//\n__interrupt void\nDMA_CH4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// DMA_CH5_ISR - DMA Channel 5 Interrupt\n//\n__interrupt void\nDMA_CH5_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// DMA_CH6_ISR - DMA Channel 6 Interrupt\n//\n__interrupt void\nDMA_CH6_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// I2CA_ISR - I2CA Interrupt 1\n//\n__interrupt void\nI2CA_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// I2CA_FIFO_ISR - I2CA Interrupt 2\n//\n__interrupt void\nI2CA_FIFO_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SCIA_RX_ISR - SCIA Receive Interrupt\n//\n__interrupt void\nSCIA_RX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SCIA_TX_ISR - SCIA Transmit Interrupt\n//\n__interrupt void\nSCIA_TX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SCIB_RX_ISR - SCIB Receive Interrupt\n//\n__interrupt void\nSCIB_RX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SCIB_TX_ISR - SCIB Transmit Interrupt\n//\n__interrupt void\nSCIB_TX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CANA0_ISR - CANA Interrupt 0\n//\n__interrupt void\nCANA0_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CANA1_ISR - CANA Interrupt 1\n//\n__interrupt void\nCANA1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CANB0_ISR - CANB Interrupt 0\n//\n__interrupt void\nCANB0_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CANB1_ISR - CANB Interrupt 1\n//\n__interrupt void\nCANB1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCA_EVT_ISR - ADCA Event Interrupt\n//\n__interrupt void\nADCA_EVT_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCA2_ISR - ADCA Interrupt 2\n//\n__interrupt void\nADCA2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCA3_ISR - ADCA Interrupt 3\n//\n__interrupt void\nADCA3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCA4_ISR - ADCA Interrupt 4\n//\n__interrupt void\nADCA4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCB_EVT_ISR - ADCB Event Interrupt\n//\n__interrupt void\nADCB_EVT_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCB2_ISR - ADCB Interrupt 2\n//\n__interrupt void\nADCB2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCB3_ISR - ADCB Interrupt 3\n//\n__interrupt void\nADCB3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCB4_ISR - ADCB Interrupt 4\n//\n__interrupt void\nADCB4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CLA1_1_ISR - CLA1 Interrupt 1\n//\n__interrupt void\nCLA1_1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CLA1_2_ISR - CLA1 Interrupt 2\n//\n__interrupt void\nCLA1_2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CLA1_3_ISR - CLA1 Interrupt 3\n//\n__interrupt void\nCLA1_3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CLA1_4_ISR - CLA1 Interrupt 4\n//\n__interrupt void\nCLA1_4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CLA1_5_ISR - CLA1 Interrupt 5\n//\n__interrupt void\nCLA1_5_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CLA1_6_ISR - CLA1 Interrupt 6\n//\n__interrupt void\nCLA1_6_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CLA1_7_ISR - CLA1 Interrupt 7\n//\n__interrupt void\nCLA1_7_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CLA1_8_ISR - CLA1 Interrupt 8\n//\n__interrupt void\nCLA1_8_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// XINT3_ISR - XINT3 Interrupt\n//\n__interrupt void\nXINT3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// XINT4_ISR - XINT4 Interrupt\n//\n__interrupt void\nXINT4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// XINT5_ISR - XINT5 Interrupt\n//\n__interrupt void\nXINT5_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// FPU_OVERFLOW_ISR - FPU Overflow Interrupt\n//\n__interrupt void\nFPU_OVERFLOW_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// FPU_UNDERFLOW_ISR - FPU Underflow Interrupt\n//\n__interrupt void\nFPU_UNDERFLOW_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SD1_ISR - SDFM1 Interrupt\n//\n__interrupt void\nSD1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP5;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SD1DR1_ISR - SDFM1 DR Interrupt 1\n//\n__interrupt void\nSD1DR1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP5;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SD1DR2_ISR - SDFM1 DR Interrupt 2\n//\n__interrupt void\nSD1DR2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP5;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SD1DR3_ISR - SDFM1 DR Interrupt 3\n//\n__interrupt void\nSD1DR3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP5;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SD1DR4_ISR - SDFM1 DR Interrupt 4\n//\n__interrupt void\nSD1DR4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP5;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n\n//\n// FSITXA1_ISR - FSITXA1_ISR Interrupt\n//\n__interrupt void\nFSITXA1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// FSITXA2_ISR - FSITXA2_ISR Interrupt\n//\n__interrupt void\nFSITXA2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// FSIRXA1_ISR - FSIRXA1_ISR Interrupt\n//\n__interrupt void\nFSIRXA1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// FSIRXA2_ISR - FSIRXA2_ISR Interrupt\n//\n__interrupt void\nFSIRXA2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CLA1PROMCRC - CLA1PROMCRC Interrupt\n//\n__interrupt void\nCLA1PROMCRC_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// LINA_0 - LINA Interrupt 0\n//\n__interrupt void\nLINA_0_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// LINA_1 - LINA Interrupt 1\n//\n__interrupt void\nLINA_1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// PMBUSA - PMBUSA Interrupt\n//\n__interrupt void\nPMBUSA_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCC_EVT_ISR - ADCC Event Interrupt\n//\n__interrupt void\nADCC_EVT_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCC2_ISR - ADCC Interrupt 2\n//\n__interrupt void\nADCC2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCC3_ISR - ADCC Interrupt 3\n//\n__interrupt void\nADCC3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// ADCC4_ISR - ADCC Interrupt 4\n//\n__interrupt void\nADCC4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// RAM_CORRECTABLE_ERROR_ISR - RAM Correctable Error Interrupt\n//\n__interrupt void\nRAM_CORRECTABLE_ERROR_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// FLASH_CORRECTABLE_ERROR_ISR - Flash Correctable Error Interrupt\n//\n__interrupt void\nFLASH_CORRECTABLE_ERROR_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// RAM_ACCESS_VIOLATION_ISR - RAM Access Violation Interrupt\n//\n__interrupt void\nRAM_ACCESS_VIOLATION_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// SYS_PLL_SLIP_ISR - System PLL Slip Interrupt\n//\n__interrupt void\nSYS_PLL_SLIP_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CLA_OVERFLOW_ISR - CLA Overflow Interrupt\n//\n__interrupt void\nCLA_OVERFLOW_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// CLA_UNDERFLOW_ISR - CLA Underflow Interrupt\n//\n__interrupt void\nCLA_UNDERFLOW_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    //\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    ESTOP0;\n    for(;;);\n}\n\n//\n// Catch-all Default ISRs\n//\n\n//\n// PIE_RESERVED_ISR - Reserved ISR\n//\n__interrupt void\nPIE_RESERVED_ISR(void)\n{\n    ESTOP0;\n    for(;;);\n}\n\n//\n// EMPTY_ISR - Only does a return\n//\n__interrupt void\nEMPTY_ISR(void)\n{\n\n}\n\n//\n// NOTUSED_ISR - Unused ISR\n//\n__interrupt void\nNOTUSED_ISR(void)\n{\n    ESTOP0;\n    for(;;);\n}\n\n//\n// End of File\n//\n\n"},{"name":"f28004x_globalvariabledefs.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_4_00_00_00\\device_support\\f28004x\\headers\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:    f28004x_globalvariabledefs.c\n//\n// TITLE:   f28004x Global Variables and Data Section Pragmas.\n//\n//###########################################################################\n// $Copyright:\n// Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n#include \"f28004x_device.h\"     // f28004x Headerfile Include File\n\n//---------------------------------------------------------------------------\n// Define Global Peripheral Variables:\n//\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AccessProtectionRegsFile\")\n#else\n#pragma DATA_SECTION(AccessProtectionRegs,\"AccessProtectionRegsFile\");\n#endif\nvolatile struct ACCESS_PROTECTION_REGS AccessProtectionRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdcaRegsFile\")\n#else\n#pragma DATA_SECTION(AdcaRegs,\"AdcaRegsFile\");\n#endif\nvolatile struct ADC_REGS AdcaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdcbRegsFile\")\n#else\n#pragma DATA_SECTION(AdcbRegs,\"AdcbRegsFile\");\n#endif\nvolatile struct ADC_REGS AdcbRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdccRegsFile\")\n#else\n#pragma DATA_SECTION(AdccRegs,\"AdccRegsFile\");\n#endif\nvolatile struct ADC_REGS AdccRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdcaResultRegsFile\")\n#else\n#pragma DATA_SECTION(AdcaResultRegs,\"AdcaResultRegsFile\");\n#endif\nvolatile struct ADC_RESULT_REGS AdcaResultRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdcbResultRegsFile\")\n#else\n#pragma DATA_SECTION(AdcbResultRegs,\"AdcbResultRegsFile\");\n#endif\nvolatile struct ADC_RESULT_REGS AdcbResultRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdccResultRegsFile\")\n#else\n#pragma DATA_SECTION(AdccResultRegs,\"AdccResultRegsFile\");\n#endif\nvolatile struct ADC_RESULT_REGS AdccResultRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AnalogSubsysRegsFile\")\n#else\n#pragma DATA_SECTION(AnalogSubsysRegs,\"AnalogSubsysRegsFile\");\n#endif\nvolatile struct ANALOG_SUBSYS_REGS AnalogSubsysRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"CanaRegsFile\")\n#else\n#pragma DATA_SECTION(CanaRegs,\"CanaRegsFile\");\n#endif\nvolatile struct CAN_REGS CanaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"CanbRegsFile\")\n#else\n#pragma DATA_SECTION(CanbRegs,\"CanbRegsFile\");\n#endif\nvolatile struct CAN_REGS CanbRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ClaPromCrc0RegsFile\")\n#else\n#pragma DATA_SECTION(ClaPromCrc0Regs,\"ClaPromCrc0RegsFile\");\n#endif\nvolatile struct CLA_PROM_CRC32_REGS ClaPromCrc0Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cla1RegsFile\")\n#else\n#pragma DATA_SECTION(Cla1Regs,\"Cla1RegsFile\");\n#endif\nvolatile struct CLA_REGS Cla1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb1DataExchRegsFile\")\n#else\n#pragma DATA_SECTION(Clb1DataExchRegs,\"Clb1DataExchRegsFile\");\n#endif\nvolatile struct CLB_DATA_EXCHANGE_REGS Clb1DataExchRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb2DataExchRegsFile\")\n#else\n#pragma DATA_SECTION(Clb2DataExchRegs,\"Clb2DataExchRegsFile\");\n#endif\nvolatile struct CLB_DATA_EXCHANGE_REGS Clb2DataExchRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb3DataExchRegsFile\")\n#else\n#pragma DATA_SECTION(Clb3DataExchRegs,\"Clb3DataExchRegsFile\");\n#endif\nvolatile struct CLB_DATA_EXCHANGE_REGS Clb3DataExchRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb4DataExchRegsFile\")\n#else\n#pragma DATA_SECTION(Clb4DataExchRegs,\"Clb4DataExchRegsFile\");\n#endif\nvolatile struct CLB_DATA_EXCHANGE_REGS Clb4DataExchRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb1LogicCfgRegsFile\")\n#else\n#pragma DATA_SECTION(Clb1LogicCfgRegs,\"Clb1LogicCfgRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONFIG_REGS Clb1LogicCfgRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb2LogicCfgRegsFile\")\n#else\n#pragma DATA_SECTION(Clb2LogicCfgRegs,\"Clb2LogicCfgRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONFIG_REGS Clb2LogicCfgRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb3LogicCfgRegsFile\")\n#else\n#pragma DATA_SECTION(Clb3LogicCfgRegs,\"Clb3LogicCfgRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONFIG_REGS Clb3LogicCfgRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb4LogicCfgRegsFile\")\n#else\n#pragma DATA_SECTION(Clb4LogicCfgRegs,\"Clb4LogicCfgRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONFIG_REGS Clb4LogicCfgRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb1LogicCtrlRegsFile\")\n#else\n#pragma DATA_SECTION(Clb1LogicCtrlRegs,\"Clb1LogicCtrlRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONTROL_REGS Clb1LogicCtrlRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb2LogicCtrlRegsFile\")\n#else\n#pragma DATA_SECTION(Clb2LogicCtrlRegs,\"Clb2LogicCtrlRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONTROL_REGS Clb2LogicCtrlRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb3LogicCtrlRegsFile\")\n#else\n#pragma DATA_SECTION(Clb3LogicCtrlRegs,\"Clb3LogicCtrlRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONTROL_REGS Clb3LogicCtrlRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb4LogicCtrlRegsFile\")\n#else\n#pragma DATA_SECTION(Clb4LogicCtrlRegs,\"Clb4LogicCtrlRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONTROL_REGS Clb4LogicCtrlRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"CLBXbarRegsFile\")\n#else\n#pragma DATA_SECTION(CLBXbarRegs,\"CLBXbarRegsFile\");\n#endif\nvolatile struct CLB_XBAR_REGS CLBXbarRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ClkCfgRegsFile\")\n#else\n#pragma DATA_SECTION(ClkCfgRegs,\"ClkCfgRegsFile\");\n#endif\nvolatile struct CLK_CFG_REGS ClkCfgRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss1RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss1Regs,\"Cmpss1RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss2RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss2Regs,\"Cmpss2RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss3RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss3Regs,\"Cmpss3RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss3Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss4RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss4Regs,\"Cmpss4RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss4Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss5RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss5Regs,\"Cmpss5RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss5Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss6RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss6Regs,\"Cmpss6RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss6Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss7RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss7Regs,\"Cmpss7RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss7Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"CpuTimer0RegsFile\")\n#else\n#pragma DATA_SECTION(CpuTimer0Regs,\"CpuTimer0RegsFile\");\n#endif\nvolatile struct CPUTIMER_REGS CpuTimer0Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"CpuTimer1RegsFile\")\n#else\n#pragma DATA_SECTION(CpuTimer1Regs,\"CpuTimer1RegsFile\");\n#endif\nvolatile struct CPUTIMER_REGS CpuTimer1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"CpuTimer2RegsFile\")\n#else\n#pragma DATA_SECTION(CpuTimer2Regs,\"CpuTimer2RegsFile\");\n#endif\nvolatile struct CPUTIMER_REGS CpuTimer2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"CpuSysRegsFile\")\n#else\n#pragma DATA_SECTION(CpuSysRegs,\"CpuSysRegsFile\");\n#endif\nvolatile struct CPU_SYS_REGS CpuSysRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DacaRegsFile\")\n#else\n#pragma DATA_SECTION(DacaRegs,\"DacaRegsFile\");\n#endif\nvolatile struct DAC_REGS DacaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DacbRegsFile\")\n#else\n#pragma DATA_SECTION(DacbRegs,\"DacbRegsFile\");\n#endif\nvolatile struct DAC_REGS DacbRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Dcc0RegsFile\")\n#else\n#pragma DATA_SECTION(Dcc0Regs,\"Dcc0RegsFile\");\n#endif\nvolatile struct DCC_REGS Dcc0Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DcsmBank0Z1RegsFile\")\n#else\n#pragma DATA_SECTION(DcsmBank0Z1Regs,\"DcsmBank0Z1RegsFile\");\n#endif\nvolatile struct DCSM_BANK0_Z1_REGS DcsmBank0Z1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DcsmBank0Z2RegsFile\")\n#else\n#pragma DATA_SECTION(DcsmBank0Z2Regs,\"DcsmBank0Z2RegsFile\");\n#endif\nvolatile struct DCSM_BANK0_Z2_REGS DcsmBank0Z2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DcsmBank1Z1RegsFile\")\n#else\n#pragma DATA_SECTION(DcsmBank1Z1Regs,\"DcsmBank1Z1RegsFile\");\n#endif\nvolatile struct DCSM_BANK1_Z1_REGS DcsmBank1Z1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DcsmBank1Z2RegsFile\")\n#else\n#pragma DATA_SECTION(DcsmBank1Z2Regs,\"DcsmBank1Z2RegsFile\");\n#endif\nvolatile struct DCSM_BANK1_Z2_REGS DcsmBank1Z2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DcsmCommonRegsFile\")\n#else\n#pragma DATA_SECTION(DcsmCommonRegs,\"DcsmCommonRegsFile\");\n#endif\nvolatile struct DCSM_COMMON_REGS DcsmCommonRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DevCfgRegsFile\")\n#else\n#pragma DATA_SECTION(DevCfgRegs,\"DevCfgRegsFile\");\n#endif\nvolatile struct DEV_CFG_REGS DevCfgRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DmaClaSrcSelRegsFile\")\n#else\n#pragma DATA_SECTION(DmaClaSrcSelRegs,\"DmaClaSrcSelRegsFile\");\n#endif\nvolatile struct DMA_CLA_SRC_SEL_REGS DmaClaSrcSelRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DmaRegsFile\")\n#else\n#pragma DATA_SECTION(DmaRegs,\"DmaRegsFile\");\n#endif\nvolatile struct DMA_REGS DmaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ECap1RegsFile\")\n#else\n#pragma DATA_SECTION(ECap1Regs,\"ECap1RegsFile\");\n#endif\nvolatile struct ECAP_REGS ECap1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ECap2RegsFile\")\n#else\n#pragma DATA_SECTION(ECap2Regs,\"ECap2RegsFile\");\n#endif\nvolatile struct ECAP_REGS ECap2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ECap3RegsFile\")\n#else\n#pragma DATA_SECTION(ECap3Regs,\"ECap3RegsFile\");\n#endif\nvolatile struct ECAP_REGS ECap3Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ECap4RegsFile\")\n#else\n#pragma DATA_SECTION(ECap4Regs,\"ECap4RegsFile\");\n#endif\nvolatile struct ECAP_REGS ECap4Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ECap5RegsFile\")\n#else\n#pragma DATA_SECTION(ECap5Regs,\"ECap5RegsFile\");\n#endif\nvolatile struct ECAP_REGS ECap5Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ECap6RegsFile\")\n#else\n#pragma DATA_SECTION(ECap6Regs,\"ECap6RegsFile\");\n#endif\nvolatile struct ECAP_REGS ECap6Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ECap7RegsFile\")\n#else\n#pragma DATA_SECTION(ECap7Regs,\"ECap7RegsFile\");\n#endif\nvolatile struct ECAP_REGS ECap7Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm1RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm1Regs,\"EPwm1RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm2RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm2Regs,\"EPwm2RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm3RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm3Regs,\"EPwm3RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm3Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm4RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm4Regs,\"EPwm4RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm4Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm5RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm5Regs,\"EPwm5RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm5Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm6RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm6Regs,\"EPwm6RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm6Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm7RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm7Regs,\"EPwm7RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm7Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm8RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm8Regs,\"EPwm8RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm8Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwmXbarRegsFile\")\n#else\n#pragma DATA_SECTION(EPwmXbarRegs,\"EPwmXbarRegsFile\");\n#endif\nvolatile struct EPWM_XBAR_REGS EPwmXbarRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EQep1RegsFile\")\n#else\n#pragma DATA_SECTION(EQep1Regs,\"EQep1RegsFile\");\n#endif\nvolatile struct EQEP_REGS EQep1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EQep2RegsFile\")\n#else\n#pragma DATA_SECTION(EQep2Regs,\"EQep2RegsFile\");\n#endif\nvolatile struct EQEP_REGS EQep2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EradCounter1RegsFile\")\n#else\n#pragma DATA_SECTION(EradCounter1Regs,\"EradCounter1RegsFile\");\n#endif\nvolatile struct ERAD_COUNTER_REGS EradCounter1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EradCounter2RegsFile\")\n#else\n#pragma DATA_SECTION(EradCounter2Regs,\"EradCounter2RegsFile\");\n#endif\nvolatile struct ERAD_COUNTER_REGS EradCounter2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EradCounter3RegsFile\")\n#else\n#pragma DATA_SECTION(EradCounter3Regs,\"EradCounter3RegsFile\");\n#endif\nvolatile struct ERAD_COUNTER_REGS EradCounter3Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EradCounter4RegsFile\")\n#else\n#pragma DATA_SECTION(EradCounter4Regs,\"EradCounter4RegsFile\");\n#endif\nvolatile struct ERAD_COUNTER_REGS EradCounter4Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EradGlobalRegsFile\")\n#else\n#pragma DATA_SECTION(EradGlobalRegs,\"EradGlobalRegsFile\");\n#endif\nvolatile struct ERAD_GLOBAL_REGS EradGlobalRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EradHWBP1RegsFile\")\n#else\n#pragma DATA_SECTION(EradHWBP1Regs,\"EradHWBP1RegsFile\");\n#endif\nvolatile struct ERAD_HWBP_REGS EradHWBP1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EradHWBP2RegsFile\")\n#else\n#pragma DATA_SECTION(EradHWBP2Regs,\"EradHWBP2RegsFile\");\n#endif\nvolatile struct ERAD_HWBP_REGS EradHWBP2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EradHWBP3RegsFile\")\n#else\n#pragma DATA_SECTION(EradHWBP3Regs,\"EradHWBP3RegsFile\");\n#endif\nvolatile struct ERAD_HWBP_REGS EradHWBP3Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EradHWBP4RegsFile\")\n#else\n#pragma DATA_SECTION(EradHWBP4Regs,\"EradHWBP4RegsFile\");\n#endif\nvolatile struct ERAD_HWBP_REGS EradHWBP4Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EradHWBP5RegsFile\")\n#else\n#pragma DATA_SECTION(EradHWBP5Regs,\"EradHWBP5RegsFile\");\n#endif\nvolatile struct ERAD_HWBP_REGS EradHWBP5Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EradHWBP6RegsFile\")\n#else\n#pragma DATA_SECTION(EradHWBP6Regs,\"EradHWBP6RegsFile\");\n#endif\nvolatile struct ERAD_HWBP_REGS EradHWBP6Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EradHWBP7RegsFile\")\n#else\n#pragma DATA_SECTION(EradHWBP7Regs,\"EradHWBP7RegsFile\");\n#endif\nvolatile struct ERAD_HWBP_REGS EradHWBP7Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EradHWBP8RegsFile\")\n#else\n#pragma DATA_SECTION(EradHWBP8Regs,\"EradHWBP8RegsFile\");\n#endif\nvolatile struct ERAD_HWBP_REGS EradHWBP8Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Flash0CtrlRegsFile\")\n#else\n#pragma DATA_SECTION(Flash0CtrlRegs,\"Flash0CtrlRegsFile\");\n#endif\nvolatile struct FLASH_CTRL_REGS Flash0CtrlRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Flash0EccRegsFile\")\n#else\n#pragma DATA_SECTION(Flash0EccRegs,\"Flash0EccRegsFile\");\n#endif\nvolatile struct FLASH_ECC_REGS Flash0EccRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"FsiRxaRegsFile\")\n#else\n#pragma DATA_SECTION(FsiRxaRegs,\"FsiRxaRegsFile\");\n#endif\nvolatile struct FSI_RX_REGS FsiRxaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"FsiTxaRegsFile\")\n#else\n#pragma DATA_SECTION(FsiTxaRegs,\"FsiTxaRegsFile\");\n#endif\nvolatile struct FSI_TX_REGS FsiTxaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"GpioCtrlRegsFile\")\n#else\n#pragma DATA_SECTION(GpioCtrlRegs,\"GpioCtrlRegsFile\");\n#endif\nvolatile struct GPIO_CTRL_REGS GpioCtrlRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"GpioDataRegsFile\")\n#else\n#pragma DATA_SECTION(GpioDataRegs,\"GpioDataRegsFile\");\n#endif\nvolatile struct GPIO_DATA_REGS GpioDataRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"HRCap6RegsFile\")\n#else\n#pragma DATA_SECTION(HRCap6Regs,\"HRCap6RegsFile\");\n#endif\nvolatile struct HRCAP_REGS HRCap6Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"HRCap7RegsFile\")\n#else\n#pragma DATA_SECTION(HRCap7Regs,\"HRCap7RegsFile\");\n#endif\nvolatile struct HRCAP_REGS HRCap7Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"I2caRegsFile\")\n#else\n#pragma DATA_SECTION(I2caRegs,\"I2caRegsFile\");\n#endif\nvolatile struct I2C_REGS I2caRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"InputXbarRegsFile\")\n#else\n#pragma DATA_SECTION(InputXbarRegs,\"InputXbarRegsFile\");\n#endif\nvolatile struct INPUT_XBAR_REGS InputXbarRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"LinaRegsFile\")\n#else\n#pragma DATA_SECTION(LinaRegs,\"LinaRegsFile\");\n#endif\nvolatile struct LIN_REGS LinaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"MemoryErrorRegsFile\")\n#else\n#pragma DATA_SECTION(MemoryErrorRegs,\"MemoryErrorRegsFile\");\n#endif\nvolatile struct MEMORY_ERROR_REGS MemoryErrorRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"MemCfgRegsFile\")\n#else\n#pragma DATA_SECTION(MemCfgRegs,\"MemCfgRegsFile\");\n#endif\nvolatile struct MEM_CFG_REGS MemCfgRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"NmiIntruptRegsFile\")\n#else\n#pragma DATA_SECTION(NmiIntruptRegs,\"NmiIntruptRegsFile\");\n#endif\nvolatile struct NMI_INTRUPT_REGS NmiIntruptRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"OutputXbarRegsFile\")\n#else\n#pragma DATA_SECTION(OutputXbarRegs,\"OutputXbarRegsFile\");\n#endif\nvolatile struct OUTPUT_XBAR_REGS OutputXbarRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"SysPeriphAcRegsFile\")\n#else\n#pragma DATA_SECTION(SysPeriphAcRegs,\"SysPeriphAcRegsFile\");\n#endif\nvolatile struct PERIPH_AC_REGS SysPeriphAcRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Pga1RegsFile\")\n#else\n#pragma DATA_SECTION(Pga1Regs,\"Pga1RegsFile\");\n#endif\nvolatile struct PGA_REGS Pga1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Pga2RegsFile\")\n#else\n#pragma DATA_SECTION(Pga2Regs,\"Pga2RegsFile\");\n#endif\nvolatile struct PGA_REGS Pga2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Pga3RegsFile\")\n#else\n#pragma DATA_SECTION(Pga3Regs,\"Pga3RegsFile\");\n#endif\nvolatile struct PGA_REGS Pga3Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Pga4RegsFile\")\n#else\n#pragma DATA_SECTION(Pga4Regs,\"Pga4RegsFile\");\n#endif\nvolatile struct PGA_REGS Pga4Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Pga5RegsFile\")\n#else\n#pragma DATA_SECTION(Pga5Regs,\"Pga5RegsFile\");\n#endif\nvolatile struct PGA_REGS Pga5Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Pga6RegsFile\")\n#else\n#pragma DATA_SECTION(Pga6Regs,\"Pga6RegsFile\");\n#endif\nvolatile struct PGA_REGS Pga6Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Pga7RegsFile\")\n#else\n#pragma DATA_SECTION(Pga7Regs,\"Pga7RegsFile\");\n#endif\nvolatile struct PGA_REGS Pga7Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"PieCtrlRegsFile\")\n#else\n#pragma DATA_SECTION(PieCtrlRegs,\"PieCtrlRegsFile\");\n#endif\nvolatile struct PIE_CTRL_REGS PieCtrlRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"PieVectTableFile\")\n#else\n#pragma DATA_SECTION(PieVectTable,\"PieVectTableFile\");\n#endif\nvolatile struct PIE_VECT_TABLE PieVectTable;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"PmbusaRegsFile\")\n#else\n#pragma DATA_SECTION(PmbusaRegs,\"PmbusaRegsFile\");\n#endif\nvolatile struct PMBUS_REGS PmbusaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"SciaRegsFile\")\n#else\n#pragma DATA_SECTION(SciaRegs,\"SciaRegsFile\");\n#endif\nvolatile struct SCI_REGS SciaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ScibRegsFile\")\n#else\n#pragma DATA_SECTION(ScibRegs,\"ScibRegsFile\");\n#endif\nvolatile struct SCI_REGS ScibRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Sdfm1RegsFile\")\n#else\n#pragma DATA_SECTION(Sdfm1Regs,\"Sdfm1RegsFile\");\n#endif\nvolatile struct SDFM_REGS Sdfm1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"SpiaRegsFile\")\n#else\n#pragma DATA_SECTION(SpiaRegs,\"SpiaRegsFile\");\n#endif\nvolatile struct SPI_REGS SpiaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"SpibRegsFile\")\n#else\n#pragma DATA_SECTION(SpibRegs,\"SpibRegsFile\");\n#endif\nvolatile struct SPI_REGS SpibRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"SyncSocRegsFile\")\n#else\n#pragma DATA_SECTION(SyncSocRegs,\"SyncSocRegsFile\");\n#endif\nvolatile struct SYNC_SOC_REGS SyncSocRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"WdRegsFile\")\n#else\n#pragma DATA_SECTION(WdRegs,\"WdRegsFile\");\n#endif\nvolatile struct WD_REGS WdRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"XbarRegsFile\")\n#else\n#pragma DATA_SECTION(XbarRegs,\"XbarRegsFile\");\n#endif\nvolatile struct XBAR_REGS XbarRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"XintRegsFile\")\n#else\n#pragma DATA_SECTION(XintRegs,\"XintRegsFile\");\n#endif\nvolatile struct XINT_REGS XintRegs;\n\n\n\n//===========================================================================\n// End of file.\n//===========================================================================\n\n\n"},{"name":"f28004x_gpio.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_4_00_00_00\\device_support\\f28004x\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   f28004x_gpio.c\n//\n// TITLE:  f28004x GPIO module support functions\n//\n//###########################################################################\n//\n//\n// $Copyright:\n// Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"f28004x_device.h\"\n#include \"f28004x_examples.h\"\n\n//\n// Low-level functions for GPIO configuration\n//\n\n//\n// InitGpio - Sets all pins to be muxed to GPIO in input mode with pull-ups\n// enabled.Also resets CPU control to CPU1 and disables open drain\n// and polarity inversion and sets the qualification to synchronous.\n// Also unlocks all GPIOs. Only one CPU should call this function.\n//\nvoid\nInitGpio()\n{\n    volatile Uint32 *gpioBaseAddr;\n    Uint16 regOffset;\n\n    //\n    // Disable pin locks\n    //\n    EALLOW;\n    GpioCtrlRegs.GPALOCK.all = 0x00000000;\n    GpioCtrlRegs.GPBLOCK.all = 0x00000000;\n    GpioCtrlRegs.GPHLOCK.all = 0x00000000;\n\n    //\n    // Fill all registers with zeros. Writing to each register separately\n    // for three GPIO modules would make this function *very* long.\n    // Fortunately, we'd be writing them all with zeros anyway,\n    // so this saves a lot of space.\n    //\n    gpioBaseAddr = (Uint32 *)&GpioCtrlRegs;\n    for (regOffset = 0; regOffset < sizeof(GpioCtrlRegs)/2; regOffset++)\n    {\n        //\n        // Must avoid enabling pull-ups on all pins. GPyPUD is offset\n        // 0x0C in each register group of 0x40 words. Since this is a\n        // 32-bit pointer, the addresses must be divided by 2.\n        //\n        // Also, to avoid changing pin muxing of the emulator pins to regular\n        // GPIOs, skip GPBMUX1 (0x46) and GPBGMUX1 (0x60).\n        //\n        if ((regOffset % (0x40/2) != (0x0C/2)) && (regOffset != (0x46/2)) &&\n            (regOffset != (0x60/2)))\n        {\n            gpioBaseAddr[regOffset] = 0x00000000;\n        }\n    }\n\n    gpioBaseAddr = (Uint32 *)&GpioDataRegs;\n    for (regOffset = 0; regOffset < sizeof(GpioDataRegs)/2; regOffset++)\n    {\n        gpioBaseAddr[regOffset] = 0x00000000;\n    }\n\n    EDIS;\n}\n\n//\n// GPIO_SetupPinMux - Set the peripheral muxing for the specified pin.\n// The appropriate parameters can be found in the pinout spreadsheet.\n//\nvoid\nGPIO_SetupPinMux(Uint16 gpioNumber, Uint16 cpu, Uint16 muxPosition)\n{\n    volatile Uint32 *gpioBaseAddr;\n    volatile Uint32 *mux, *gmux, *csel;\n    Uint16 pin32, pin16, pin8;\n\n    pin32 = gpioNumber % 32;\n    pin16 = gpioNumber % 16;\n    pin8 = gpioNumber % 8;\n    gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (gpioNumber/32)*GPY_CTRL_OFFSET;\n\n    //\n    // Sanity check for valid cpu and peripheral values\n    //\n    if (cpu > GPIO_MUX_CPU1CLA || muxPosition > 0xF)\n    {\n        return;\n    }\n\n    //\n    // Create pointers to the appropriate registers. This is a workaround\n    // for the way GPIO registers are defined. The standard definition\n    // in the header file makes it very easy to do named accesses of one\n    // register or bit, but hard to do arbitrary numerical accesses. It's\n    // easier to have an array of GPIO modules with identical registers,\n    // including arrays for multi-register groups like GPyCSEL1-4. But\n    // the header file doesn't define anything we can turn into an array,\n    // so manual pointer arithmetic is used instead.\n    //\n    mux = gpioBaseAddr + GPYMUX + pin32/16;\n    gmux = gpioBaseAddr + GPYGMUX + pin32/16;\n    csel = gpioBaseAddr + GPYCSEL + pin32/8;\n\n    //\n    // Now for the actual function\n    //\n    EALLOW;\n\n    //\n    // To change the muxing, set the peripheral mux to 0/GPIO first to avoid\n    // glitches, then change the group mux, then set the peripheral mux to\n    // its target value. Finally, set the CPU select. This procedure is\n    // described in the TRM. Unfortunately, since we don't know the pin in\n    // advance we can't hardcode a bitfield reference, so there's some tricky\n    // bit twiddling here.\n    //\n    *mux &= ~(0x3UL << (2*pin16));\n    *gmux &= ~(0x3UL << (2*pin16));\n    *gmux |= (Uint32)((muxPosition >> 2) & 0x3UL) << (2*pin16);\n    *mux |= (Uint32)(muxPosition & 0x3UL) << (2*pin16);\n\n    *csel &= ~(0x3L << (4*pin8));\n    *csel |= (Uint32)(cpu & 0x3L) << (4*pin8);\n\n    //\n    // WARNING: This code does not touch the analog mode select registers.\n    //\n\n    EDIS;\n}\n\n//\n// GPIO_SetupPinOptions - Setup up the GPIO input/output options for the\n// specified pin. The flags are a 16-bit mask produced by ORing together\n// options. For input pins, the valid flags are:\n// GPIO_PULLUP  Enable pull-up\n// GPIO_INVERT  Enable input polarity inversion\n// GPIO_SYNC  Synchronize the input latch to PLLSYSCLK\n//              (default -- you don't need to specify this)\n// GPIO_QUAL3  Use 3-sample qualification\n// GPIO_QUAL6  Use 6-sample qualification\n// GPIO_ASYNC  Do not use synchronization or qualification\n// (Note: only one of SYNC, QUAL3, QUAL6, or ASYNC is allowed)\n//\n// For output pins, the valid flags are:\n// GPIO_OPENDRAIN  Output in open drain mode\n// GPIO_PULLUP    If open drain enabled, also enable the pull-up\n// and the input qualification flags (SYNC/QUAL3/QUAL6/SYNC) listed above.\n//\n// With no flags, the default input state is synchronous with no\n// pull-up or polarity inversion. The default output state is\n// the standard digital output.\n//\nvoid\nGPIO_SetupPinOptions(Uint16 gpioNumber, Uint16 output, Uint16 flags)\n{\n    volatile Uint32 *gpioBaseAddr;\n    volatile Uint32 *dir, *pud, *inv, *odr, *qsel;\n    Uint32 pin32, pin16, pinMask, qual;\n\n    pin32 = gpioNumber % 32;\n    pin16 = gpioNumber % 16;\n    pinMask = 1UL << pin32;\n    gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (gpioNumber/32)*GPY_CTRL_OFFSET;\n\n    //\n    // Create pointers to the appropriate registers. This is a workaround\n    // for the way GPIO registers are defined. The standard definition\n    // in the header file makes it very easy to do named accesses of one\n    // register or bit, but hard to do arbitrary numerical accesses. It's\n    // easier to have an array of GPIO modules with identical registers,\n    // including arrays for multi-register groups like GPyQSEL1-2. But\n    // the header file doesn't define anything we can turn into an array,\n    // so manual pointer arithmetic is used instead.\n    //\n    dir = gpioBaseAddr + GPYDIR;\n    pud = gpioBaseAddr + GPYPUD;\n    inv = gpioBaseAddr + GPYINV;\n    odr = gpioBaseAddr + GPYODR;\n    qsel = gpioBaseAddr + GPYQSEL + pin32/16;\n\n    EALLOW;\n\n    //\n    // Set the data direction\n    //\n    *dir &= ~pinMask;\n    if (output == 1)\n    {\n        //\n        // Output, with optional open drain mode and pull-up\n        //\n        *dir |= pinMask;\n\n        //\n        // Enable open drain if necessary\n        //\n        if (flags & GPIO_OPENDRAIN)\n        {\n            *odr |= pinMask;\n        }\n        else\n        {\n            *odr &= ~pinMask;\n        }\n\n        //\n        // Enable pull-up if necessary. Open drain mode must be active.\n        //\n        if (flags & (GPIO_OPENDRAIN | GPIO_PULLUP))\n        {\n            *pud &= ~pinMask;\n        }\n        else\n        {\n            *pud |= pinMask;\n        }\n    }\n\n    else\n    {\n        //\n        // Input, with optional pull-up, qualification, and polarity inversion\n        //\n        *dir &= ~pinMask;\n\n        //\n        // Enable pull-up if necessary\n        //\n        if (flags & GPIO_PULLUP)\n        {\n            *pud &= ~pinMask;\n        }\n        else\n        {\n            *pud |= pinMask;\n        }\n\n        //\n        // Invert polarity if necessary\n        //\n        if (flags & GPIO_INVERT)\n        {\n            *inv |= pinMask;\n        }\n        else\n        {\n            *inv &= ~pinMask;\n        }\n    }\n\n    //\n    // Extract the qualification parameter and load it into the register.\n    // This is also needed for open drain outputs, so we might as well do it\n    // all the time.\n    //\n    qual = (flags & GPIO_ASYNC) / GPIO_QUAL3;\n    *qsel &= ~(0x3L << (2 * pin16));\n    if (qual != 0x0)\n    {\n        *qsel |= qual << (2 * pin16);\n    }\n\n    EDIS;\n}\n\n//\n// GPIO_SetupLock - Enable or disable the GPIO register bit lock for the\n// specified pin. The valid flags are:\n// GPIO_UNLOCK  Unlock the pin setup register bits for the specified pin\n// GPIO_LOCK   Lock the pin setup register bits for the specified pin\n//\nvoid\nGPIO_SetupLock(Uint16 gpioNumber, Uint16 flags)\n{\n    volatile Uint32 *gpioBaseAddr;\n    volatile Uint32 *lock;\n    Uint32 pin32, pinMask;\n\n    pin32 = gpioNumber % 32;\n    pinMask = 1UL << pin32;\n    gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (gpioNumber/32)*GPY_CTRL_OFFSET;\n\n    //\n    // Create pointers to the appropriate registers. This is a workaround\n    // for the way GPIO registers are defined. The standard definition\n    // in the header file makes it very easy to do named accesses of one\n    // register or bit, but hard to do arbitrary numerical accesses. It's\n    // easier to have an array of GPIO modules with identical registers,\n    // including arrays for multi-register groups like GPyQSEL1-2. But\n    // the header file doesn't define anything we can turn into an array,\n    // so manual pointer arithmetic is used instead.\n    //\n    lock = gpioBaseAddr + GPYLOCK;\n\n    EALLOW;\n\n    if(flags)\n    {\n        //\n        // Lock the pin\n        //\n        *lock |= pinMask;\n    }\n\n    else\n    {\n        //\n        // Unlock the pin\n        //\n        *lock &= ~pinMask;\n    }\n    EDIS;\n}\n\n//\n// External interrupt setup\n//\nvoid\nGPIO_SetupXINT1Gpio(Uint16 gpioNumber)\n{\n    EALLOW;\n    InputXbarRegs.INPUT4SELECT = gpioNumber;       // Set XINT1 source to GPIO-pin\n    EDIS;\n}\n\nvoid\nGPIO_SetupXINT2Gpio(Uint16 gpioNumber)\n{\n    EALLOW;\n    InputXbarRegs.INPUT5SELECT = gpioNumber;       // Set XINT2 source to GPIO-pin\n    EDIS;\n}\n\nvoid\nGPIO_SetupXINT3Gpio(Uint16 gpioNumber)\n{\n    EALLOW;\n    InputXbarRegs.INPUT6SELECT = gpioNumber;       // Set XINT3 source to GPIO-pin\n    EDIS;\n}\nvoid\nGPIO_SetupXINT4Gpio(Uint16 gpioNumber)\n{\n    EALLOW;\n    InputXbarRegs.INPUT13SELECT = gpioNumber;      // Set XINT4 source to GPIO-pin\n    EDIS;\n}\n\nvoid\nGPIO_SetupXINT5Gpio(Uint16 gpioNumber)\n{\n    EALLOW;\n    InputXbarRegs.INPUT14SELECT = gpioNumber;     // Set XINT5 source to GPIO-pin\n    EDIS;\n}\n\n//\n// GPIO_ReadPin - Read the GPyDAT register bit for the specified pin.\n// Note that this returns the actual state of the pin, not the state of the\n// output latch.\n//\nUint16\nGPIO_ReadPin(Uint16 gpioNumber)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint16 pinVal;\n\n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (gpioNumber/32)*GPY_DATA_OFFSET;\n    pinVal = (gpioDataReg[GPYDAT] >> (gpioNumber % 32)) & 0x1;\n\n    return pinVal;\n}\n\n//\n// GPIO_WritePin - Set the GPyDAT register bit for the specified pin.\n//\nvoid\nGPIO_WritePin(Uint16 gpioNumber, Uint16 outVal)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint32 pinMask;\n\n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (gpioNumber/32)*GPY_DATA_OFFSET;\n    pinMask = 1UL << (gpioNumber % 32);\n\n    if (outVal == 0)\n    {\n        gpioDataReg[GPYCLEAR] = pinMask;\n    }\n\n    else\n    {\n        gpioDataReg[GPYSET] = pinMask;\n    }\n}\n\n//\n// End of File\n//\n\n"},{"name":"f28004x_piectrl.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_4_00_00_00\\device_support\\f28004x\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   f28004x_piectrl.c\n//\n// TITLE:  f28004x Device PIE Control Register Initialization Functions.\n//\n//###########################################################################\n//\n//\n// $Copyright:\n// Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"f28004x_device.h\"      // f28004x Headerfile Include File\n#include \"f28004x_examples.h\"    // f28004x Examples Include File\n\n//\n// InitPieCtrl - This function initializes the PIE control registers\n// to a known state.\n//\nvoid\nInitPieCtrl(void)\n{\n    //\n    // Disable Interrupts at the CPU level:\n    //\n    DINT;\n\n    //\n    // Disable the PIE\n    //\n    PieCtrlRegs.PIECTRL.bit.ENPIE = 0;\n\n    //\n    // Clear all PIEIER registers:\n    //\n    PieCtrlRegs.PIEIER1.all = 0;\n    PieCtrlRegs.PIEIER2.all = 0;\n    PieCtrlRegs.PIEIER3.all = 0;\n    PieCtrlRegs.PIEIER4.all = 0;\n    PieCtrlRegs.PIEIER5.all = 0;\n    PieCtrlRegs.PIEIER6.all = 0;\n    PieCtrlRegs.PIEIER7.all = 0;\n    PieCtrlRegs.PIEIER8.all = 0;\n    PieCtrlRegs.PIEIER9.all = 0;\n    PieCtrlRegs.PIEIER10.all = 0;\n    PieCtrlRegs.PIEIER11.all = 0;\n    PieCtrlRegs.PIEIER12.all = 0;\n\n    //\n    // Clear all PIEIFR registers:\n    //\n    PieCtrlRegs.PIEIFR1.all = 0;\n    PieCtrlRegs.PIEIFR2.all = 0;\n    PieCtrlRegs.PIEIFR3.all = 0;\n    PieCtrlRegs.PIEIFR4.all = 0;\n    PieCtrlRegs.PIEIFR5.all = 0;\n    PieCtrlRegs.PIEIFR6.all = 0;\n    PieCtrlRegs.PIEIFR7.all = 0;\n    PieCtrlRegs.PIEIFR8.all = 0;\n    PieCtrlRegs.PIEIFR9.all = 0;\n    PieCtrlRegs.PIEIFR10.all = 0;\n    PieCtrlRegs.PIEIFR11.all = 0;\n    PieCtrlRegs.PIEIFR12.all = 0;\n}\n\n//\n// EnableInterrupts - This function enables the PIE module and CPU __interrupts\n//\nvoid\nEnableInterrupts()\n{\n    //\n    // Enable the PIE\n    //\n    PieCtrlRegs.PIECTRL.bit.ENPIE = 1;\n\n    //\n    // Enables PIE to drive a pulse into the CPU\n    //\n    PieCtrlRegs.PIEACK.all = 0xFFFF;\n\n    //\n    // Enable Interrupts at the CPU level\n    //\n    EINT;\n}\n\n//\n// End of file.\n//\n\n"},{"name":"f28004x_pievect.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_4_00_00_00\\device_support\\f28004x\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   f28004x_pievect.c\n//\n// TITLE:  f28004x Device PIE Vector Initialization Functions\n//\n//###########################################################################\n//\n//\n// $Copyright:\n// Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"f28004x_device.h\"           // f28004x Header File Include File\n#include \"f28004x_examples.h\"         // f28004x Examples Include File\n\n//\n// Define PIE Vector Table:\n//\nconst struct PIE_VECT_TABLE PieVectTableInit = {\n    PIE_RESERVED_ISR,               // Reserved\n    PIE_RESERVED_ISR,               // Reserved\n    PIE_RESERVED_ISR,               // Reserved\n    PIE_RESERVED_ISR,               // Reserved\n    PIE_RESERVED_ISR,               // Reserved\n    PIE_RESERVED_ISR,               // Reserved\n    PIE_RESERVED_ISR,               // Reserved\n    PIE_RESERVED_ISR,               // Reserved\n    PIE_RESERVED_ISR,               // Reserved\n    PIE_RESERVED_ISR,               // Reserved\n    PIE_RESERVED_ISR,               // Reserved\n    PIE_RESERVED_ISR,               // Reserved\n    PIE_RESERVED_ISR,               // Reserved\n    TIMER1_ISR,                     // CPU Timer 1 Interrupt\n    TIMER2_ISR,                     // CPU Timer 2 Interrupt\n    DATALOG_ISR,                    // Datalogging Interrupt\n    RTOS_ISR,                       // RTOS Interrupt\n    EMU_ISR,                        // Emulation Interrupt\n    NMI_ISR,                        // Non-Maskable Interrupt\n    ILLEGAL_ISR,                    // Illegal Operation Trap\n    USER1_ISR,                      // User Defined Trap 1\n    USER2_ISR,                      // User Defined Trap 2\n    USER3_ISR,                      // User Defined Trap 3\n    USER4_ISR,                      // User Defined Trap 4\n    USER5_ISR,                      // User Defined Trap 5\n    USER6_ISR,                      // User Defined Trap 6\n    USER7_ISR,                      // User Defined Trap 7\n    USER8_ISR,                      // User Defined Trap 8\n    USER9_ISR,                      // User Defined Trap 9\n    USER10_ISR,                     // User Defined Trap 10\n    USER11_ISR,                     // User Defined Trap 11\n    USER12_ISR,                     // User Defined Trap 12\n    ADCA1_ISR,                      // 1.1 - ADCA Interrupt 1\n    ADCB1_ISR,                      // 1.2 - ADCB Interrupt 1\n    ADCC1_ISR,                      // 1.3 - ADCC Interrupt 1\n    XINT1_ISR,                      // 1.4 - XINT1 Interrupt\n    XINT2_ISR,                      // 1.5 - XINT2 Interrupt\n    PIE_RESERVED_ISR,               // 1.6 - Reserved\n    TIMER0_ISR,                     // 1.7 - Timer 0 Interrupt\n    WAKE_ISR,                       // 1.8 - Halt Wakeup Interrupt\n    EPWM1_TZ_ISR,                   // 2.1 - ePWM1 Trip Zone Interrupt\n    EPWM2_TZ_ISR,                   // 2.2 - ePWM2 Trip Zone Interrupt\n    EPWM3_TZ_ISR,                   // 2.3 - ePWM3 Trip Zone Interrupt\n    EPWM4_TZ_ISR,                   // 2.4 - ePWM4 Trip Zone Interrupt\n    EPWM5_TZ_ISR,                   // 2.5 - ePWM5 Trip Zone Interrupt\n    EPWM6_TZ_ISR,                   // 2.6 - ePWM6 Trip Zone Interrupt\n    EPWM7_TZ_ISR,                   // 2.7 - ePWM7 Trip Zone Interrupt\n    EPWM8_TZ_ISR,                   // 2.8 - ePWM8 Trip Zone Interrupt\n    EPWM1_ISR,                      // 3.1 - ePWM1 Interrupt\n    EPWM2_ISR,                      // 3.2 - ePWM2 Interrupt\n    EPWM3_ISR,                      // 3.3 - ePWM3 Interrupt\n    EPWM4_ISR,                      // 3.4 - ePWM4 Interrupt\n    EPWM5_ISR,                      // 3.5 - ePWM5 Interrupt\n    EPWM6_ISR,                      // 3.6 - ePWM6 Interrupt\n    EPWM7_ISR,                      // 3.7 - ePWM7 Interrupt\n    EPWM8_ISR,                      // 3.8 - ePWM8 Interrupt\n    ECAP1_ISR,                      // 4.1 - eCAP1 Interrupt\n    ECAP2_ISR,                      // 4.2 - eCAP2 Interrupt\n    ECAP3_ISR,                      // 4.3 - eCAP3 Interrupt\n    ECAP4_ISR,                      // 4.4 - eCAP4 Interrupt\n    ECAP5_ISR,                      // 4.5 - eCAP5 Interrupt\n    ECAP6_ISR,                      // 4.6 - eCAP6 Interrupt\n    ECAP7_ISR,                      // 4.7 - eCAP7 Interrupt\n    PIE_RESERVED_ISR,               // 4.8 - Reserved\n    EQEP1_ISR,                      // 5.1 - eQEP1 Interrupt\n    EQEP2_ISR,                      // 5.2 - eQEP2 Interrupt\n    PIE_RESERVED_ISR,               // 5.3 - Reserved\n    PIE_RESERVED_ISR,               // 5.4 - Reserved\n    PIE_RESERVED_ISR,               // 5.5 - Reserved\n    PIE_RESERVED_ISR,               // 5.6 - Reserved\n    PIE_RESERVED_ISR,               // 5.7 - Reserved\n    PIE_RESERVED_ISR,               // 5.8 - Reserved\n    SPIA_RX_ISR,                    // 6.1 - SPIA Receive Interrupt\n    SPIA_TX_ISR,                    // 6.2 - SPIA Transmit Interrupt\n    SPIB_RX_ISR,                    // 6.3 - SPIB Receive Interrupt\n    SPIB_TX_ISR,                    // 6.4 - SPIB Transmit Interrupt\n    PIE_RESERVED_ISR,               // 6.5 - Reserved\n    PIE_RESERVED_ISR,               // 6.6 - Reserved\n    PIE_RESERVED_ISR,               // 6.7 - Reserved\n    PIE_RESERVED_ISR,               // 6.8 - Reserved\n    DMA_CH1_ISR,                    // 7.1 - DMA Channel 1 Interrupt\n    DMA_CH2_ISR,                    // 7.2 - DMA Channel 2 Interrupt\n    DMA_CH3_ISR,                    // 7.3 - DMA Channel 3 Interrupt\n    DMA_CH4_ISR,                    // 7.4 - DMA Channel 4 Interrupt\n    DMA_CH5_ISR,                    // 7.5 - DMA Channel 5 Interrupt\n    DMA_CH6_ISR,                    // 7.6 - DMA Channel 6 Interrupt\n    PIE_RESERVED_ISR,               // 7.7 - Reserved\n    PIE_RESERVED_ISR,               // 7.8 - Reserved\n    I2CA_ISR,                       // 8.1 - I2CA Interrupt 1\n    I2CA_FIFO_ISR,                  // 8.2 - I2CA Interrupt 2\n    PIE_RESERVED_ISR,               // 8.3 - Reserved\n    PIE_RESERVED_ISR,               // 8.4 - Reserved\n    PIE_RESERVED_ISR,               // 8.5 - Reserved\n    PIE_RESERVED_ISR,               // 8.6 - Reserved\n    PIE_RESERVED_ISR,               // 8.7 - Reserved\n    PIE_RESERVED_ISR,               // 8.8 - Reserved\n    SCIA_RX_ISR,                    // 9.1 - SCIA Receive Interrupt\n    SCIA_TX_ISR,                    // 9.2 - SCIA Transmit Interrupt\n    SCIB_RX_ISR,                    // 9.3 - SCIB Receive Interrupt\n    SCIB_TX_ISR,                    // 9.4 - SCIB Transmit Interrupt\n    CANA0_ISR,                      // 9.5 - CANA Interrupt 0\n    CANA1_ISR,                      // 9.6 - CANA Interrupt 1\n    CANB0_ISR,                      // 9.7 - CANB Interrupt 0\n    CANB1_ISR,                      // 9.8 - CANB Interrupt 1\n    ADCA_EVT_ISR,                   // 10.1 - ADCA Event Interrupt\n    ADCA2_ISR,                      // 10.2 - ADCA Interrupt 2\n    ADCA3_ISR,                      // 10.3 - ADCA Interrupt 3\n    ADCA4_ISR,                      // 10.4 - ADCA Interrupt 4\n    ADCB_EVT_ISR,                   // 10.5 - ADCB Event Interrupt\n    ADCB2_ISR,                      // 10.6 - ADCB Interrupt 2\n    ADCB3_ISR,                      // 10.7 - ADCB Interrupt 3\n    ADCB4_ISR,                      // 10.8 - ADCB Interrupt 4\n    CLA1_1_ISR,                     // 11.1 - CLA1 Interrupt 1\n    CLA1_2_ISR,                     // 11.2 - CLA1 Interrupt 2\n    CLA1_3_ISR,                     // 11.3 - CLA1 Interrupt 3\n    CLA1_4_ISR,                     // 11.4 - CLA1 Interrupt 4\n    CLA1_5_ISR,                     // 11.5 - CLA1 Interrupt 5\n    CLA1_6_ISR,                     // 11.6 - CLA1 Interrupt 6\n    CLA1_7_ISR,                     // 11.7 - CLA1 Interrupt 7\n    CLA1_8_ISR,                     // 11.8 - CLA1 Interrupt 8\n    XINT3_ISR,                      // 12.1 - XINT3 Interrupt\n    XINT4_ISR,                      // 12.2 - XINT4 Interrupt\n    XINT5_ISR,                      // 12.3 - XINT5 Interrupt\n    PIE_RESERVED_ISR,               // 12.4 - Reserved\n    PIE_RESERVED_ISR,               // 12.5 - Reserved\n    PIE_RESERVED_ISR,               // 12.6 - Reserved\n    FPU_OVERFLOW_ISR,               // 12.7 - FPU Overflow Interrupt\n    FPU_UNDERFLOW_ISR,              // 12.8 - FPU Underflow Interrupt\n    PIE_RESERVED_ISR,               // 1.9 - Reserved\n    PIE_RESERVED_ISR,               // 1.10 - Reserved\n    PIE_RESERVED_ISR,               // 1.11 - Reserved\n    PIE_RESERVED_ISR,               // 1.12 - Reserved\n    PIE_RESERVED_ISR,               // 1.13 - Reserved\n    PIE_RESERVED_ISR,               // 1.14 - Reserved\n    PIE_RESERVED_ISR,               // 1.15 - Reserved\n    PIE_RESERVED_ISR,               // 1.16 - Reserved\n    PIE_RESERVED_ISR,               // 2.9 - Reserved\n    PIE_RESERVED_ISR,               // 2.10 - Reserved\n    PIE_RESERVED_ISR,               // 2.11 - Reserved\n    PIE_RESERVED_ISR,               // 2.12 - Reserved\n    PIE_RESERVED_ISR,               // 2.13 - Reserved\n    PIE_RESERVED_ISR,               // 2.14 - Reserved\n    PIE_RESERVED_ISR,               // 2.15 - Reserved\n    PIE_RESERVED_ISR,               // 2.16 - Reserved\n    PIE_RESERVED_ISR,               // 3.9 - Reserved\n    PIE_RESERVED_ISR,               // 3.10 - Reserved\n    PIE_RESERVED_ISR,               // 3.11 - Reserved\n    PIE_RESERVED_ISR,               // 3.12 - Reserved\n    PIE_RESERVED_ISR,               // 3.13 - Reserved\n    PIE_RESERVED_ISR,               // 3.14 - Reserved\n    PIE_RESERVED_ISR,               // 3.15 - Reserved\n    PIE_RESERVED_ISR,               // 3.16 - Reserved\n    PIE_RESERVED_ISR,               // 4.9 - Reserved\n    PIE_RESERVED_ISR,               // 4.10 - Reserved\n    PIE_RESERVED_ISR,               // 4.11 - Reserved\n    PIE_RESERVED_ISR,               // 4.12 - Reserved\n    PIE_RESERVED_ISR,               // 4.13 - Reserved\n    ECAP6_2_ISR,                    // 4.14 - eCAP6_2 Interrupt\n    ECAP7_2_ISR,                    // 4.15 - eCAP7_2 Interrupt\n    PIE_RESERVED_ISR,               // 4.16 - Reserved\n    SD1_ISR,                        // 5.9 - SD1 Interrupt\n    PIE_RESERVED_ISR,               // 5.10 - Reserved\n    PIE_RESERVED_ISR,               // 5.11 - Reserved\n    PIE_RESERVED_ISR,               // 5.12 - Reserved\n    SD1DR1_ISR,                     // 5.13 - SD1DR1 Interrupt\n    SD1DR2_ISR,                     // 5.14 - SD1DR2 Interrupt\n    SD1DR3_ISR,                     // 5.15 - SD1DR3 Interrupt\n    SD1DR4_ISR,                     // 5.16 - SD1DR4 Interrupt\n    PIE_RESERVED_ISR,               // 6.9 - Reserved\n    PIE_RESERVED_ISR,               // 6.10 - Reserved\n    PIE_RESERVED_ISR,               // 6.11 - Reserved\n    PIE_RESERVED_ISR,               // 6.12 - Reserved\n    PIE_RESERVED_ISR,               // 6.13 - Reserved\n    PIE_RESERVED_ISR,               // 6.14 - Reserved\n    PIE_RESERVED_ISR,               // 6.15 - Reserved\n    PIE_RESERVED_ISR,               // 6.16 - Reserved\n    PIE_RESERVED_ISR,               // 7.9 - Reserved\n    PIE_RESERVED_ISR,               // 7.10 - Reserved\n    FSITXA1_ISR,                    // 7.11 - FSITXA1 Interrupt\n    FSITXA2_ISR,                    // 7.12 - FSITXA2 Interrupt\n    FSIRXA1_ISR,                    // 7.13 - FSIRXA1 Interrupt\n    FSIRXA2_ISR,                    // 7.14 - FSIRXA2 Interrupt \n    CLA1PROMCRC_ISR,                // 7.15 - CLA1PROMCRC Interrupt\n    PIE_RESERVED_ISR,               // 7.16 - Reserved\n    LINA_0_ISR,                     // 8.9 - LINA Interrupt0\n    LINA_1_ISR,                     // 8.10 - LINA Interrupt1\n    PIE_RESERVED_ISR,               // 8.11 - Reserved\n    PIE_RESERVED_ISR,               // 8.12 - Reserved\n    PMBUSA_ISR,                     // 8.13 - PMBUSA Interrupt\n    PIE_RESERVED_ISR,               // 8.14 - Reserved\n    PIE_RESERVED_ISR,               // 8.15 - Reserved\n    PIE_RESERVED_ISR,               // 8.16 - Reserved\n    PIE_RESERVED_ISR,               // 9.9 - Reserved\n    PIE_RESERVED_ISR,               // 9.10 - Reserved\n    PIE_RESERVED_ISR,               // 9.11 - Reserved\n    PIE_RESERVED_ISR,               // 9.12 - Reserved\n    PIE_RESERVED_ISR,               // 9.13 - Reserved\n    PIE_RESERVED_ISR,               // 9.14 - Reserved\n    PIE_RESERVED_ISR,               // 9.15 - Reserved\n    PIE_RESERVED_ISR,               // 9.16 - Reserved\n    ADCC_EVT_ISR,                   // 10.9 - ADCC Event Interrupt\n    ADCC2_ISR,                      // 10.10 - ADCC Interrupt 2\n    ADCC3_ISR,                      // 10.11 - ADCC Interrupt 3\n    ADCC4_ISR,                      // 10.12 - ADCC Interrupt 4\n    PIE_RESERVED_ISR,               // 10.13 - Reserved\n    PIE_RESERVED_ISR,               // 10.14 - Reserved\n    PIE_RESERVED_ISR,               // 10.15 - Reserved\n    PIE_RESERVED_ISR,               // 10.16 - Reserved\n    PIE_RESERVED_ISR,               // 11.9 - Reserved\n    PIE_RESERVED_ISR,               // 11.10 - Reserved\n    PIE_RESERVED_ISR,               // 11.11 - Reserved\n    PIE_RESERVED_ISR,               // 11.12 - Reserved\n    PIE_RESERVED_ISR,               // 11.13 - Reserved\n    PIE_RESERVED_ISR,               // 11.14 - Reserved\n    PIE_RESERVED_ISR,               // 11.15 - Reserved\n    PIE_RESERVED_ISR,               // 11.16 - Reserved\n    PIE_RESERVED_ISR,               // 12.9 - Reserved\n    RAM_CORRECTABLE_ERROR_ISR,     // 12.10 - RAM Correctable Error Interrupt\n    FLASH_CORRECTABLE_ERROR_ISR,   // 12.11 - Flash Correctable Error Interrupt\n    RAM_ACCESS_VIOLATION_ISR,      // 12.12 - RAM Access Violation Interrupt\n    SYS_PLL_SLIP_ISR,              // 12.13 - System PLL Slip Interrupt\n    PIE_RESERVED_ISR,              // 12.14 - Reserved\n    CLA_OVERFLOW_ISR,              // 12.15 - CLA Overflow Interrupt\n    CLA_UNDERFLOW_ISR              // 12.16 - CLA Underflow Interrupt\n};\n\n//\n// InitPieVectTable - This function initializes the PIE vector table to a known\n// state. This function must be executed after boot time.\n//\nvoid\nInitPieVectTable(void)\n{\n    Uint16  i;\n    Uint32  *Source  =  (void  *)  &PieVectTableInit;\n    Uint32  *Dest  =  (void  *)  &PieVectTable;\n\n    //\n    // Do not write over first 3 32-bit locations (these locations are\n    // initialized by Boot ROM with boot variables)\n    //\n    Source  =  Source  +  3;\n    Dest  =  Dest  +  3;\n\n    EALLOW;\n\n    for(i  =  0;  i  <  221;  i++)\n    {\n        *Dest++  =  *Source++;\n    }\n\n    EDIS;\n\n    //\n    // Enable the PIE Vector Table\n    //\n    PieCtrlRegs.PIECTRL.bit.ENPIE  =  1;\n}\n\n//\n// End of File\n//\n\n"},{"name":"f28004x_sysctrl.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_4_00_00_00\\device_support\\f28004x\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   f28004x_sysctrl.c\n//\n// TITLE:  f28004x Device System Control Initialization & Support Functions.\n//\n// DESCRIPTION:  Example initialization of system resources.\n//\n//###########################################################################\n//\n//\n// $Copyright:\n// Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"f28004x_device.h\"     // Headerfile Include File\n#include \"f28004x_examples.h\"   // Examples Include File\n#ifdef __cplusplus\nusing std::memcpy;\n#endif\n\n//\n// Functions that will be run from RAM need to be assigned to\n// a different section.  This section will then be mapped to a load and\n// run address using the linker cmd file.\n//\n// *IMPORTANT*\n// IF RUNNING FROM FLASH, PLEASE COPY OVER THE SECTION \".TI.ramfunc\"  FROM FLASH\n// TO RAM PRIOR TO CALLING InitSysCtrl(). THIS PREVENTS THE MCU FROM THROWING\n// AN EXCEPTION WHEN A CALL TO DELAY_US() IS MADE.\n//\n#ifndef __cplusplus\n#pragma CODE_SECTION(InitFlash, \".TI.ramfunc\");\n#pragma CODE_SECTION(FlashOff, \".TI.ramfunc\");\n#endif\n\n//\n// The following values are used to validate PLL Frequency using DCC\n//\n#define   PLL_RETRIES              100\n#define   PLL_LOCK_TIMEOUT        2000\n#define   DCC_COUNTER0_WINDOW      100\n\n//\n// Macro used for adding delay between 2 consecutive writes to CLKSRCCTL1\n// register.\n// Delay = 300 NOPs\n//\n#define SYSCTRL_CLKSRCCTL1_DELAY  asm(\" RPT #250 || NOP \\n RPT #50 || NOP\")\n\n//\n// InitSysCtrl - Initialization of system resources.\n//\nvoid\nInitSysCtrl(void)\n{\n    //\n    // Disable the watchdog\n    //\n    DisableDog();\n\n#ifdef _FLASH\n    //\n    // Copy time critical code and Flash setup code to RAM\n    // This includes the following functions:  InitFlash();\n    // The  RamfuncsLoadStart, RamfuncsLoadSize, and RamfuncsRunStart\n    // symbols are created by the linker. Refer to the device .cmd file.\n    //\n    memcpy(&RamfuncsRunStart, &RamfuncsLoadStart, (size_t)&RamfuncsLoadSize);\n\n    //\n    // Call Flash Initialization to setup flash waitstates\n    // This function must reside in RAM\n    //\n    InitFlash();\n#endif\n\n    //\n    // PLLSYSCLK = (XTAL_OSC) * (IMULT + FMULT) / (PLLSYSCLKDIV)\n    //\n    InitSysPll(XTAL_OSC,IMULT_10,FMULT_0,PLLCLK_BY_2);\n\n#ifndef _FLASH\n    //\n    // Call Device_cal function when run using debugger\n    // This function is called as part of the Boot code. The function is called\n    // in the InitSysCtrl function since during debug time resets, the boot code\n    // will not be executed and the gel script will reinitialize all the\n    // registers and the calibrated values will be lost.\n    //\n    Device_cal();\n#endif\n\n    //\n    // Turn on all peripherals\n    //\n    InitPeripheralClocks();\n}\n\n//\n// InitPeripheralClocks - This function initializes the clocks for the\n// peripherals. Note: In order to reduce power consumption, turn off the\n// clocks to any peripheral that is not specified for your part-number or is\n// not used in the application\n//\nvoid\nInitPeripheralClocks()\n{\n    EALLOW;\n\n    CpuSysRegs.PCLKCR0.bit.CLA1 = 1;\n    CpuSysRegs.PCLKCR0.bit.DMA = 1;\n    CpuSysRegs.PCLKCR0.bit.CPUTIMER0 = 1;\n    CpuSysRegs.PCLKCR0.bit.CPUTIMER1 = 1;\n    CpuSysRegs.PCLKCR0.bit.CPUTIMER2 = 1;\n    CpuSysRegs.PCLKCR0.bit.HRPWM = 1;\n    CpuSysRegs.PCLKCR0.bit.TBCLKSYNC = 1;\n\n    CpuSysRegs.PCLKCR2.bit.EPWM1 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM2 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM3 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM4 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM5 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM6 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM7 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM8 = 1;\n\n    CpuSysRegs.PCLKCR3.bit.ECAP1 = 1;\n    CpuSysRegs.PCLKCR3.bit.ECAP2 = 1;\n    CpuSysRegs.PCLKCR3.bit.ECAP3 = 1;\n    CpuSysRegs.PCLKCR3.bit.ECAP4 = 1;\n    CpuSysRegs.PCLKCR3.bit.ECAP5 = 1;\n    CpuSysRegs.PCLKCR3.bit.ECAP6 = 1;\n    CpuSysRegs.PCLKCR3.bit.ECAP7 = 1;\n\n    CpuSysRegs.PCLKCR4.bit.EQEP1 = 1;\n    CpuSysRegs.PCLKCR4.bit.EQEP2 = 1;\n\n    CpuSysRegs.PCLKCR6.bit.SD1 = 1;\n\n    CpuSysRegs.PCLKCR7.bit.SCI_A = 1;\n    CpuSysRegs.PCLKCR7.bit.SCI_B = 1;\n\n    CpuSysRegs.PCLKCR8.bit.SPI_A = 1;\n    CpuSysRegs.PCLKCR8.bit.SPI_B = 1;\n\n    CpuSysRegs.PCLKCR9.bit.I2C_A = 1;\n\n    CpuSysRegs.PCLKCR10.bit.CAN_A = 1;\n    CpuSysRegs.PCLKCR10.bit.CAN_B = 1;\n\n    CpuSysRegs.PCLKCR13.bit.ADC_A = 1;\n    CpuSysRegs.PCLKCR13.bit.ADC_B = 1;\n    CpuSysRegs.PCLKCR13.bit.ADC_C = 1;\n\n    CpuSysRegs.PCLKCR14.bit.CMPSS1 = 1;\n    CpuSysRegs.PCLKCR14.bit.CMPSS2 = 1;\n    CpuSysRegs.PCLKCR14.bit.CMPSS3 = 1;\n    CpuSysRegs.PCLKCR14.bit.CMPSS4 = 1;\n    CpuSysRegs.PCLKCR14.bit.CMPSS5 = 1;\n    CpuSysRegs.PCLKCR14.bit.CMPSS6 = 1;\n    CpuSysRegs.PCLKCR14.bit.CMPSS7 = 1;\n\n    CpuSysRegs.PCLKCR15.bit.PGA1 = 1;\n    CpuSysRegs.PCLKCR15.bit.PGA2 = 1;\n    CpuSysRegs.PCLKCR15.bit.PGA3 = 1;\n    CpuSysRegs.PCLKCR15.bit.PGA4 = 1;\n    CpuSysRegs.PCLKCR15.bit.PGA5 = 1;\n    CpuSysRegs.PCLKCR15.bit.PGA6 = 1;\n    CpuSysRegs.PCLKCR15.bit.PGA7 = 1;\n\n    CpuSysRegs.PCLKCR18.bit.FSIRX_A = 1;\n    CpuSysRegs.PCLKCR18.bit.FSITX_A = 1;\n\n    CpuSysRegs.PCLKCR16.bit.DAC_A = 1;\n    CpuSysRegs.PCLKCR16.bit.DAC_B = 1;\n\n    CpuSysRegs.PCLKCR19.bit.LIN_A = 1;\n\n    CpuSysRegs.PCLKCR20.bit.PMBUS_A = 1;\n\n    CpuSysRegs.PCLKCR21.bit.DCC_0 = 1;\n\n    EDIS;\n}\n\n//\n// DisablePeripheralClocks -\n//\nvoid\nDisablePeripheralClocks()\n{\n    EALLOW;\n\n    CpuSysRegs.PCLKCR0.all = 0;\n    CpuSysRegs.PCLKCR2.all = 0;\n    CpuSysRegs.PCLKCR3.all = 0;\n    CpuSysRegs.PCLKCR4.all = 0;\n    CpuSysRegs.PCLKCR6.all = 0;\n    CpuSysRegs.PCLKCR7.all = 0;\n    CpuSysRegs.PCLKCR8.all = 0;\n    CpuSysRegs.PCLKCR9.all = 0;\n    CpuSysRegs.PCLKCR10.all = 0;\n    CpuSysRegs.PCLKCR13.all = 0;\n    CpuSysRegs.PCLKCR14.all = 0;\n    CpuSysRegs.PCLKCR15.all = 0;\n    CpuSysRegs.PCLKCR16.all = 0;\n    CpuSysRegs.PCLKCR18.all = 0;\n    CpuSysRegs.PCLKCR19.all = 0;\n    CpuSysRegs.PCLKCR20.all = 0;\n    CpuSysRegs.PCLKCR21.all = 0;\n\n    EDIS;\n}\n\n//\n// InitFlash - This function initializes the Flash Control registers\n//                  CAUTION\n// This function MUST be executed out of RAM. Executing it\n// out of OTP/Flash will yield unpredictable results\n//\n#ifdef __cplusplus\n#pragma CODE_SECTION(\".TI.ramfunc\");\n#endif\nvoid\nInitFlash(void)\n{\n    EALLOW;\n\n    //\n    // At reset bank and pump are in sleep\n    // A Flash access will power up the bank and pump automatically\n    //\n    // Power up Flash bank and pump and this also sets the fall back mode of\n    // flash and pump as active\n    //\n    Flash0CtrlRegs.FPAC1.bit.PMPPWR = 0x1;\n    Flash0CtrlRegs.FBFALLBACK.bit.BNKPWR0 = 0x3;\n    Flash0CtrlRegs.FBFALLBACK.bit.BNKPWR1 = 0x3;\n\n    //\n    // Disable Cache and prefetch mechanism before changing wait states\n    //\n    Flash0CtrlRegs.FRD_INTF_CTRL.bit.DATA_CACHE_EN = 0;\n    Flash0CtrlRegs.FRD_INTF_CTRL.bit.PREFETCH_EN = 0;\n\n    //\n    // Set waitstates according to frequency\n    //                CAUTION\n    // Minimum waitstates required for the flash operating\n    // at a given CPU rate must be characterized by TI.\n    // Refer to the datasheet for the latest information.\n    //\n#if CPU_FRQ_100MHZ\n    if((ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL == 0x0)   ||\n       (ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL == 0x2)   ||\n       (ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL == 0x3))\n    {\n        Flash0CtrlRegs.FRDCNTL.bit.RWAIT = 0x5;\n    }\n    else\n    {\n        Flash0CtrlRegs.FRDCNTL.bit.RWAIT = 0x4;\n    }\n#endif\n\n    //\n    // Enable Cache and prefetch mechanism to improve performance\n    // of code executed from Flash.\n    //\n    Flash0CtrlRegs.FRD_INTF_CTRL.bit.DATA_CACHE_EN = 1;\n    Flash0CtrlRegs.FRD_INTF_CTRL.bit.PREFETCH_EN = 1;\n\n    //\n    // At reset, ECC is enabled. If it is disabled by application software\n    // and if application again wants to enable ECC\n    //\n    Flash0EccRegs.ECC_ENABLE.bit.ENABLE = 0xA;\n\n    EDIS;\n\n    //\n    // Force a pipeline flush to ensure that the write to\n    // the last register configured occurs before returning.\n    //\n    __asm(\" RPT #7 || NOP\");\n}\n\n//\n// FlashOff - This function powers down the flash\n//                   CAUTION\n// This function MUST be executed out of RAM. Executing it\n// out of OTP/Flash will yield unpredictable results.\n// Note: a flash access after the flash pump and banks are powered down will\n// wake the pump and bank\n//\n#ifdef __cplusplus\n#pragma CODE_SECTION(\".TI.ramfunc\");\n#endif\nvoid\nFlashOff(void)\n{\n    EALLOW;\n\n    //\n    // Configure the fallback power mode as sleep\n    //\n    Flash0CtrlRegs.FBFALLBACK.bit.BNKPWR0 = 0;\n    Flash0CtrlRegs.FBFALLBACK.bit.BNKPWR1 = 0;\n\n    //\n    // Configure the fallback power mode as sleep\n    //\n    Flash0CtrlRegs.FPAC1.bit.PMPPWR = 0;\n\n    EDIS;\n}\n\n//\n// ServiceDog - This function resets the watchdog timer.\n// Enable this function for using ServiceDog in the application\n//\nvoid\nServiceDog(void)\n{\n    EALLOW;\n    WdRegs.WDKEY.bit.WDKEY = 0x0055;\n    WdRegs.WDKEY.bit.WDKEY = 0x00AA;\n    EDIS;\n}\n\n//\n// DisableDog - This function disables the watchdog timer.\n//\nvoid\nDisableDog(void)\n{\n    volatile Uint16 temp;\n    EALLOW;\n\n    //\n    // Grab the clock config so we don't clobber it\n    //\n    temp = WdRegs.WDCR.all & 0x0007;\n    WdRegs.WDCR.all = 0x0068 | temp;\n    EDIS;\n}\n\n//\n// InitPll - This function initializes the PLL registers.\n//\n// Note: This function uses the DCC to check that the PLLRAWCLK is running at\n// the expected rate. If you are using the DCC, you must back up its\n// configuration before calling this function and restore it afterward.\n//\nvoid\nInitSysPll(Uint16 clock_source, Uint16 imult, Uint16 fmult, Uint16 divsel)\n{\n    Uint32 timeout, retries, temp_syspllmult, pllLockStatus;\n    bool status;\n\n    if(((clock_source & 0x3) == ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL)    &&\n       (((clock_source & 0x4) >> 2) == ClkCfgRegs.XTALCR.bit.SE)           &&\n                     (imult  == ClkCfgRegs.SYSPLLMULT.bit.IMULT)           &&\n                     (fmult  == ClkCfgRegs.SYSPLLMULT.bit.FMULT)           &&\n                     (divsel == ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV))\n    {\n        //\n        // Everything is set as required, so just return\n        //\n        return;\n    }\n\n    if(((clock_source & 0x3) != ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL) ||\n       (((clock_source & 0x4) >> 2) != ClkCfgRegs.XTALCR.bit.SE))\n    {\n        switch (clock_source)\n        {\n            case INT_OSC1:\n                SysIntOsc1Sel();\n                break;\n\n            case INT_OSC2:\n                SysIntOsc2Sel();\n                break;\n\n            case XTAL_OSC:\n                SysXtalOscSel();\n                break;\n\n            case XTAL_OSC_SE:\n                SysXtalOscSESel();\n                break;\n        }\n    }\n\n    EALLOW;\n\n    //\n    // First modify the PLL multipliers\n    //\n    if(imult != ClkCfgRegs.SYSPLLMULT.bit.IMULT ||\n       fmult != ClkCfgRegs.SYSPLLMULT.bit.FMULT)\n    {\n        //\n        // Bypass PLL and set dividers to /1\n        //\n        ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN = 0;\n\n        //\n        // Delay of at least 60 OSCCLK cycles required post PLL bypass\n        //\n        asm(\" RPT #60 || NOP\");\n\n        ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = 0;\n\n        //\n        // Evaluate PLL multipliers\n        //\n        temp_syspllmult = ((fmult << 8U) | imult);\n\n        //\n        // Loop to retry locking the PLL should the DCC module indicate\n        // that it was not successful.\n        //\n        for(retries = 0; (retries < PLL_RETRIES); retries++)\n        {\n            EALLOW;\n\n            //\n            // Disable SYSPLL (Turn off PLL)\n            //\n            ClkCfgRegs.SYSPLLCTL1.bit.PLLEN = 0;\n\n            //\n            // Atleast 60 cycle delay between powerdown to powerup\n            //\n            asm(\" RPT #60 || NOP\");\n\n            //\n            // Program PLL multipliers\n            //\n            ClkCfgRegs.SYSPLLMULT.all = temp_syspllmult;\n\n            //\n            // Enable SYSPLL\n            //\n            ClkCfgRegs.SYSPLLCTL1.bit.PLLEN = 1;\n\n            timeout = PLL_LOCK_TIMEOUT;\n            pllLockStatus = ClkCfgRegs.SYSPLLSTS.bit.LOCKS;\n\n            //\n            // Wait for the SYSPLL lock\n            //\n            while((pllLockStatus != 1) && (timeout != 0U))\n            {\n                pllLockStatus = ClkCfgRegs.SYSPLLSTS.bit.LOCKS;\n                timeout--;\n            }\n\n            EDIS;\n\n            status = IsPLLValid(clock_source, imult, fmult);\n\n            //\n            // Check DCC Status, if no error break the loop\n            //\n            if(status)\n            {\n                break;\n            }\n        }\n    }\n    else\n    {\n        status = true;\n    }\n\n    if(status)\n    {\n        EALLOW;\n        //\n        // Set divider to produce slower output frequency to limit current increase\n        //\n        if(divsel != PLLCLK_BY_126)\n        {\n            ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = divsel + 1;\n        }\n        else\n        {\n            ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = divsel;\n        }\n\n        //\n        // Enable PLLSYSCLK is fed from system PLL clock\n        //\n        ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN = 1;\n\n        //\n        // Small 100 cycle delay\n        //\n        asm(\" RPT #100 || NOP\");\n\n        //\n        // Set the divider to user value\n        //\n        ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = divsel;\n        EDIS;\n    }\n}\n\n//\n// CsmUnlock - This function unlocks the CSM. User must replace 0xFFFF's with\n// current password for the DSP.\n//\nUint16\nCsmUnlock()\n{\n    //\n    // Write to the key registers to unlock the device. The 0x0FFFFFFFF's\n    // are dummmy passwords. User should replace them with the correct password\n    // for the DSP.\n    // Note: F28004x has default password keys which are not all 0xFFFFFFFF.\n    // See DCSM chapter of Technical Reference Manual for default passwords.\n    EALLOW;\n\n    DcsmBank0Z1Regs.Z1_CSMKEY0 = 0xFFFFFFFF;\n    DcsmBank0Z1Regs.Z1_CSMKEY1 = 0xFFFFFFFF;\n    DcsmBank0Z1Regs.Z1_CSMKEY2 = 0xFFFFFFFF;\n    DcsmBank0Z1Regs.Z1_CSMKEY3 = 0xFFFFFFFF;\n\n    DcsmBank0Z2Regs.Z2_CSMKEY0 = 0xFFFFFFFF;\n    DcsmBank0Z2Regs.Z2_CSMKEY1 = 0xFFFFFFFF;\n    DcsmBank0Z2Regs.Z2_CSMKEY2 = 0xFFFFFFFF;\n    DcsmBank0Z2Regs.Z2_CSMKEY3 = 0xFFFFFFFF;\n    EDIS;\n\n    return 0;\n}\n\n//\n// SysIntOsc1Sel - This function switches to Internal Oscillator 1 and turns\n// off all other clock sources to minimize power consumption\n//\nvoid\nSysIntOsc1Sel (void)\n{\n    EALLOW;\n    ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL = 2; // Clk Src = INTOSC1\n    ClkCfgRegs.XTALCR.bit.OSCOFF=1;             // Turn off XTALOSC\n    EDIS;\n}\n\n//\n// SysIntOsc2Sel - This function switches to Internal oscillator 2 from\n// External Oscillator and turns off all other clock sources to minimize\n// power consumption\n// NOTE: If there is no external clock connection, when switching from\n//       INTOSC1 to INTOSC2, EXTOSC and XLCKIN must be turned OFF prior\n//       to switching to internal oscillator 1\n//\nvoid\nSysIntOsc2Sel (void)\n{\n    EALLOW;\n    ClkCfgRegs.CLKSRCCTL1.bit.INTOSC2OFF=0;         // Turn on INTOSC2\n    SYSCTRL_CLKSRCCTL1_DELAY;\n    ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL = 0;     // Clk Src = INTOSC2\n    ClkCfgRegs.XTALCR.bit.OSCOFF=1;                 // Turn off XTALOSC\n    EDIS;\n}\n\n//\n// PollX1Counter - Clear the X1CNT counter and then wait for it to saturate\n// four times.\n//\nstatic void\nPollX1Counter(void)\n{\n    Uint16 loopCount = 0;\n\n    //\n    // Delay for 1 ms while the XTAL powers up\n    //\n    // 2000 loops, 5 cycles per loop + 9 cycles overhead = 10009 cycles\n    //\n    F28x_usDelay(2000);\n\n    //\n    // Clear and saturate X1CNT 4 times to guarantee operation\n    //\n    do\n    {\n        //\n        // Keep clearing the counter until it is no longer saturated\n        //\n        while(ClkCfgRegs.X1CNT.all > 0x1FF)\n        {\n            ClkCfgRegs.X1CNT.bit.CLR = 1;\n        }\n\n        //\n        // Wait for the X1 clock to saturate\n        //\n        while(ClkCfgRegs.X1CNT.all != 0x3FFU)\n        {\n            ;\n        }\n\n        //\n        // Increment the counter\n        //\n        loopCount++;\n    }while(loopCount < 4);\n}\n\n//\n// SysXtalOscSel - This function switches to External CRYSTAL oscillator and\n// turns off all other clock sources to minimize power consumption. This option\n// may not be available on all device packages\n//\nvoid\nSysXtalOscSel (void)\n{\n    EALLOW;\n    ClkCfgRegs.XTALCR.bit.OSCOFF = 0;     // Turn on XTALOSC\n    ClkCfgRegs.XTALCR.bit.SE = 0;         // Select crystal mode\n    EDIS;\n\n    //\n    // Wait for the X1 clock to saturate\n    //\n    PollX1Counter();\n\n    //\n    // Select XTAL as the oscillator source\n    //\n    EALLOW;\n    ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL = 1;\n    EDIS;\n\n    //\n    // If a missing clock failure was detected, try waiting for the X1 counter\n    // to saturate again. Consider modifying this code to add a 10ms timeout.\n    //\n    while(ClkCfgRegs.MCDCR.bit.MCLKSTS != 0)\n    {\n        EALLOW;\n        ClkCfgRegs.MCDCR.bit.MCLKCLR = 1;\n        EDIS;\n\n        //\n        // Wait for the X1 clock to saturate\n        //\n        PollX1Counter();\n\n        //\n        // Select XTAL as the oscillator source\n        //\n        EALLOW;\n        ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL = 1;\n        EDIS;\n    }\n}\n\n//\n// SysXtalOscSESel - This function switches to external oscillator in\n// single-ended mode and turns off all other clock sources to minimize power\n// consumption. This option may not be available on all device packages\n//\nvoid\nSysXtalOscSESel (void)\n{\n    EALLOW;\n    ClkCfgRegs.XTALCR.bit.OSCOFF = 0;     // Turn on XTALOSC\n    ClkCfgRegs.XTALCR.bit.SE = 1;         // Select single-ended mode\n    EDIS;\n\n    //\n    // Wait for the X1 clock to saturate\n    //\n    PollX1Counter();\n\n    //\n    // Select XTALOSC as the oscillator source\n    //\n    EALLOW;\n    ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL = 1;\n    EDIS;\n\n    //\n    // If missing clock detected, there is something wrong with the oscillator\n    // module.\n    //\n    if(ClkCfgRegs.MCDCR.bit.MCLKSTS != 0)\n    {\n        ESTOP0;\n    }\n}\n\n//\n// IDLE - Enter IDLE mode\n//\nvoid\nIDLE()\n{\n    EALLOW;\n    CpuSysRegs.LPMCR.bit.LPM = LPM_IDLE;\n    EDIS;\n    asm(\" IDLE\");\n}\n\n//\n// HALT - Enter HALT mode\n//\nvoid\nHALT()\n{\n    EALLOW;\n    CpuSysRegs.LPMCR.bit.LPM = LPM_HALT;\n    ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN = 0;\n    ClkCfgRegs.SYSPLLCTL1.bit.PLLEN = 0;\n    EDIS;\n    asm(\" IDLE\");\n}\n\n//*****************************************************************************\n//\n// SysCtl_isPLLValid()\n//\n//*****************************************************************************\nbool\nIsPLLValid(Uint16 oscSource, Uint16 imult, Uint16 fmult)\n{\n    Uint32 dccCounterSeed0, dccCounterSeed1, dccValidSeed0;\n\n    //\n    // Setting Counter0 & Valid Seed Value with +/-12% tolerance\n    //\n    dccCounterSeed0 = DCC_COUNTER0_WINDOW - 12U;\n    dccValidSeed0 = 24U;\n\n    //\n    // Multiplying Counter-0 window with PLL Integer Multiplier\n    //\n    dccCounterSeed1 = DCC_COUNTER0_WINDOW * imult;\n\n    //\n    // Multiplying Counter-0 window with PLL Fractional Multiplier\n    //\n    switch(fmult)\n    {\n        case FMULT_0pt25:\n            //\n            // FMULT * CNTR0 Window = 0.25 * 100 = 25, gets added to cntr0\n            // seed value\n            //\n            dccCounterSeed1 = dccCounterSeed1 + 25U;\n            break;\n        case FMULT_0pt5:\n            //\n            // FMULT * CNTR0 Window = 0.5 * 100 = 50, gets added to cntr0\n            // seed value\n            //\n            dccCounterSeed1 = dccCounterSeed1 + 50U;\n            break;\n        case FMULT_0pt75:\n            //\n            // FMULT * CNTR0 Window = 0.75 * 100 = 75, gets added to cntr0\n            // seed value\n            //\n            dccCounterSeed1 = dccCounterSeed1 + 75U;\n            break;\n        default:\n            //\n            // No fractional multiplier\n            //\n            dccCounterSeed1 = dccCounterSeed1;\n            break;\n    }\n\n    //\n    // Enable Peripheral Clock Domain PCLKCR21 for DCC\n    //\n    EALLOW;\n    CpuSysRegs.PCLKCR21.bit.DCC_0 = 1;\n\n    //\n    // Clear Error & Done Flag\n    //\n    Dcc0Regs.DCCSTATUS.bit.ERR = 1;\n    Dcc0Regs.DCCSTATUS.bit.DONE = 1;\n\n    //\n    // Disable DCC\n    //\n    Dcc0Regs.DCCGCTRL.bit.DCCENA = 0x5;\n\n    //\n    // Disable Error Signal\n    //\n    Dcc0Regs.DCCGCTRL.bit.ERRENA = 0x5;\n\n    //\n    // Disable Done Signal\n    //\n    Dcc0Regs.DCCGCTRL.bit.DONEENA = 0x5;\n\n    //\n    // Configure Clock Source0 to whatever is set as a clock source for PLL\n    //\n    switch(oscSource)\n    {\n        case INT_OSC1:\n            Dcc0Regs.DCCCLKSRC0.bit.CLKSRC0 = 1; // Clk Src0 = INTOSC1\n            break;\n\n        case INT_OSC2:\n            Dcc0Regs.DCCCLKSRC0.bit.CLKSRC0 = 2; // Clk Src0 = INTOSC2\n            break;\n\n        case XTAL_OSC:\n        case XTAL_OSC_SE:\n            Dcc0Regs.DCCCLKSRC0.bit.CLKSRC0 = 0; // Clk Src0 = XTAL\n            break;\n    }\n\n    //\n    // Configure Clock Source1 to PLL\n    //\n    Dcc0Regs.DCCCLKSRC1.bit.KEY = 0xA; // Clk Src1 Key to enable clock source selection for count1\n    Dcc0Regs.DCCCLKSRC1.bit.CLKSRC1 = 0; // Clk Src1 = PLL\n\n    //\n    // Configure COUNTER-0, COUNTER-1 & Valid Window\n    //\n    Dcc0Regs.DCCCNTSEED0.bit.COUNTSEED0 = dccCounterSeed0; // Loaded Counter0 Value\n    Dcc0Regs.DCCVALIDSEED0.bit.VALIDSEED = dccValidSeed0;  // Loaded Valid Value\n    Dcc0Regs.DCCCNTSEED1.bit.COUNTSEED1 = dccCounterSeed1; // Loaded Counter1 Value\n\n    //\n    // Enable Single Shot Mode\n    //\n    Dcc0Regs.DCCGCTRL.bit.SINGLESHOT = 0xA;\n\n    //\n    // Enable Error Signal\n    //\n    Dcc0Regs.DCCGCTRL.bit.ERRENA = 0xA;\n\n    //\n    // Enable Done Signal\n    //\n    Dcc0Regs.DCCGCTRL.bit.DONEENA = 0xA;\n\n    //\n    // Enable DCC to start counting\n    //\n    Dcc0Regs.DCCGCTRL.bit.DCCENA = 0xA;\n    EDIS;\n\n    //\n    // Set time out for the loop\n    //\n    uint32_t timeout = dccCounterSeed1;\n\n    //\n    // Wait until Error or Done Flag is generated\n    //\n    while(((Dcc0Regs.DCCSTATUS.all & 3) == 0) && (timeout != 0U))\n    {\n        timeout--;\n    }\n\n    //\n    // Returns true if DCC completes without error\n    //\n    return(((Dcc0Regs.DCCSTATUS.all & 3) == 2) && (Dcc0Regs.DCCCNT0.all == 0) &&\n           (Dcc0Regs.DCCVALID0.all == 0) && (Dcc0Regs.DCCCNT1.all == 0));\n}\n//\n// End of File\n//\n\n"},{"name":"f28004x_usdelay.asm","type":"other","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_4_00_00_00\\device_support\\f28004x\\common\\source","tag":"","groupDisplay":"Other files","code":";;#############################################################################\n;;\n;; FILE:   f28004x_usdelay.asm\n;;\n;; TITLE:  Simple Delay Function\n;;\n;; DESCRIPTION:\n;;\n;;  This is a simple delay function that can be used to insert a specified\n;;  delay into code.\n;;  This function is only accurate if executed from internal zero-waitstate\n;;  SARAM. If it is executed from waitstate memory then the delay will be\n;;  longer then specified.\n;;  To use this function:\n;;   1 - update the CPU clock speed in the f28004x_examples.h\n;;     file.\n;;   2 - Call this function by using the DELAY_US(A) macro\n;;     that is defined in the f28004x_device.h file.  This macro\n;;     will convert the number of microseconds specified\n;;     into a loop count for use with this function.\n;;     This count will be based on the CPU frequency you specify.\n;;   3 - For the most accurate delay\n;;     - Execute this function in 0 waitstate RAM.\n;;     - Disable interrupts before calling the function\n;;       If you do not disable interrupts, then think of\n;;       this as an \"at least\" delay function as the actual\n;;       delay may be longer.\n;;   The C assembly call from the DELAY_US(time) macro will\n;;   look as follows:\n;;   extern void Delay(long LoopCount);\n;;         MOV   AL,#LowLoopCount\n;;         MOV   AH,#HighLoopCount\n;;         LCR   _Delay\n;;   Or as follows (if count is less then 16-bits):\n;;         MOV   ACC,#LoopCount\n;;         LCR   _Delay\n;;#############################################################################\n;; $Copyright:\n;// Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/\n;//\n;// Redistribution and use in source and binary forms, with or without \n;// modification, are permitted provided that the following conditions \n;// are met:\n;// \n;//   Redistributions of source code must retain the above copyright \n;//   notice, this list of conditions and the following disclaimer.\n;// \n;//   Redistributions in binary form must reproduce the above copyright\n;//   notice, this list of conditions and the following disclaimer in the \n;//   documentation and/or other materials provided with the   \n;//   distribution.\n;// \n;//   Neither the name of Texas Instruments Incorporated nor the names of\n;//   its contributors may be used to endorse or promote products derived\n;//   from this software without specific prior written permission.\n;// \n;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n;// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n;// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n;// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n;// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n;// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n;// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n;// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n;// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n;// $\n;;#############################################################################\n\n       .def _F28x_usDelay\n       .sect \".TI.ramfunc\"\n\n        .global  __F28x_usDelay\n_F28x_usDelay:\n        SUB    ACC,#1\n        BF     _F28x_usDelay,GEQ    ;; Loop if ACC >= 0\n        LRETR\n\n;There is a 9/10 cycle overhead and each loop\n;takes five cycles. The LoopCount is given by\n;the following formula:\n;  DELAY_CPU_CYCLES = 9 + 5*LoopCount\n; LoopCount = (DELAY_CPU_CYCLES - 9) / 5\n; The macro DELAY_US(A) performs this calculation for you\n\n;;#############################################################################\n;; End of file\n;;#############################################################################\n\n"},{"name":"profiler_Support.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ProgramData\\MATLAB\\SupportPackages\\R2021b\\toolbox\\target\\supportpackages\\tic2000\\src","tag":"","groupDisplay":"Other files","code":"/* Copyrights 2016, MathWorks Inc */\n#include \"MW_target_hardware_resources.h\"\n#include \"rtwtypes.h\"\n\nvoid config_profilerTimer(void)\n{\n  /* InitCpuTimers() - CPU Timers are initialized in\n   * MW_c28xx_board.c in the generated code.\n   */\n  CpuTimer1Regs.PRD.all = 0xFFFFFFFF;  /* max Period*/\n  CpuTimer1Regs.TIM.all = 0xFFFFFFFF;  /* set Ctr*/\n  CpuTimer1Regs.TPR.all = 0x00;        /* no prescaler    */\n  StartCpuTimer1();\n}\n\n/* EOF */\n"},{"name":"sysctl.c","type":"source","group":"legacy","path":"C:\\Users\\Lukas\\Documents\\MechProjELS\\Matlab\\StepperRTM_ert_rtw\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_4_00_00_00\\driverlib\\f28004x\\driverlib","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   sysctl.c\n//\n// TITLE:  C28x system control driver.\n//\n//###########################################################################\n// $Copyright:\n// Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n#include \"sysctl.h\"\n#include \"dcc.h\"\n\n//\n// Define to isolate inline assembly\n//\n#define SYSCTL_DELAY        __asm(\" .if __TI_EABI__\\n\"                         \\\n                                  \" .asg    SysCtl_delay    , _SysCtl_delay\\n\" \\\n                                  \" .endif\\n\"                                  \\\n                                  \" .def _SysCtl_delay\\n\"                      \\\n                                  \" .sect \\\".TI.ramfunc\\\"\\n\"                   \\\n                                  \" .global  _SysCtl_delay\\n\"                  \\\n                                  \"_SysCtl_delay:\\n\"                           \\\n                                  \" SUB    ACC,#1\\n\"                           \\\n                                  \" BF     _SysCtl_delay, GEQ\\n\"               \\\n                                  \" LRETR\\n\")\n\n\n//\n// Macro used for adding delay between 2 consecutive writes to CLKSRCCTL1\n// register.\n// Delay = 300 NOPs\n//\n#define SYSCTL_CLKSRCCTL1_DELAY  asm(\" RPT #250 || NOP \\n RPT #50 || NOP\")\n\n//*****************************************************************************\n//\n// SysCtl_delay()\n//\n//*****************************************************************************\nSYSCTL_DELAY;\n\n\n//*****************************************************************************\n//\n// SysCtl_pollX1Counter()\n//\n//*****************************************************************************\nstatic void\nSysCtl_pollX1Counter(void)\n{\n    uint16_t loopCount = 0U;\n\n    //\n    // Delay for 1 ms while the XTAL powers up\n    //\n    // 2000 loops, 5 cycles per loop + 9 cycles overhead = 10009 cycles\n    //\n    SysCtl_delay(2000);\n\n    //\n    // Clear and saturate X1CNT 4 times to guarantee operation\n    //\n    do\n    {\n        //\n        // Keep clearing the counter until it is no longer saturated\n        //\n        while(HWREG(CLKCFG_BASE + SYSCTL_O_X1CNT) > 0x1FFU)\n        {\n            HWREG(CLKCFG_BASE + SYSCTL_O_X1CNT) |= SYSCTL_X1CNT_CLR;\n        }\n\n        //\n        // Wait for the X1 clock to saturate\n        //\n        while(HWREGH(CLKCFG_BASE + SYSCTL_O_X1CNT) != SYSCTL_X1CNT_X1CNT_M)\n        {\n            //\n            // If your application is stuck in this loop, please check if the\n            // input clock source is valid.\n            //\n        }\n\n        //\n        // Increment the counter\n        //\n        loopCount++;\n    }while(loopCount < 4U);\n}\n\n//*****************************************************************************\n//\n// SysCtl_getClock()\n//\n//*****************************************************************************\nuint32_t\nSysCtl_getClock(uint32_t clockInHz)\n{\n    uint32_t temp;\n    uint32_t oscSource;\n    uint32_t clockOut;\n\n    //\n    // Don't proceed if an MCD failure is detected.\n    //\n    if(SysCtl_isMCDClockFailureDetected())\n    {\n        //\n        // OSCCLKSRC2 failure detected. Returning the INTOSC1 rate. You need\n        // to handle the MCD and clear the failure.\n        //\n        clockOut = SYSCTL_DEFAULT_OSC_FREQ;\n    }\n    else\n    {\n        //\n        // If one of the internal oscillators is being used, start from the\n        // known default frequency.  Otherwise, use clockInHz parameter.\n        //\n        oscSource = HWREG(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &\n                    (uint32_t)SYSCTL_CLKSRCCTL1_OSCCLKSRCSEL_M;\n\n        if((oscSource == ((uint32_t)SYSCTL_OSCSRC_OSC2 >> SYSCTL_OSCSRC_S)) ||\n           (oscSource == ((uint32_t)SYSCTL_OSCSRC_OSC1 >> SYSCTL_OSCSRC_S)))\n        {\n            clockOut = SYSCTL_DEFAULT_OSC_FREQ;\n        }\n        else\n        {\n            clockOut = clockInHz;\n        }\n\n        //\n        // If the PLL is enabled calculate its effect on the clock\n        //\n        if((HWREG(CLKCFG_BASE + SYSCTL_O_SYSPLLCTL1) &\n            (SYSCTL_SYSPLLCTL1_PLLEN | SYSCTL_SYSPLLCTL1_PLLCLKEN)) == 3U)\n        {\n            //\n            // Calculate portion from fractional multiplier\n            //\n            temp = (clockInHz * ((HWREG(CLKCFG_BASE + SYSCTL_O_SYSPLLMULT) &\n                                  SYSCTL_SYSPLLMULT_FMULT_M) >>\n                                 SYSCTL_SYSPLLMULT_FMULT_S)) / 4U;\n\n            //\n            // Calculate integer multiplier and fixed divide by 2\n            //\n            clockOut = clockOut * ((HWREG(CLKCFG_BASE + SYSCTL_O_SYSPLLMULT) &\n                                    SYSCTL_SYSPLLMULT_IMULT_M) >>\n                                   SYSCTL_SYSPLLMULT_IMULT_S);\n\n            //\n            // Add in fractional portion\n            //\n            clockOut += temp;\n\n            //\n            // Calculate PLL divider\n            //\n            temp = ((HWREG(CLKCFG_BASE + SYSCTL_O_SYSPLLMULT) &\n                     SYSCTL_SYSPLLMULT_ODIV_M) >>\n                    SYSCTL_SYSPLLMULT_ODIV_S) + 1U;\n\n            //\n            //  Divide dividers\n            //\n            if(temp != 0U)\n            {\n                clockOut /= temp;\n            }\n        }\n\n        if((HWREG(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) &\n            SYSCTL_SYSCLKDIVSEL_PLLSYSCLKDIV_M) != 0U)\n        {\n            clockOut /= (2U * (HWREG(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) &\n                               SYSCTL_SYSCLKDIVSEL_PLLSYSCLKDIV_M));\n        }\n    }\n\n    return(clockOut);\n}\n\n//*****************************************************************************\n//\n// SysCtl_setClock()\n//\n//*****************************************************************************\nbool\nSysCtl_setClock(uint32_t config)\n{\n    uint16_t divSel;\n    uint32_t pllMult;\n    uint32_t retries, oscSource, pllLockStatus;\n    uint32_t timeout;\n    bool status = false;\n    uint32_t mult;\n\n    //\n    // Check the arguments.\n    //\n    ASSERT((config & SYSCTL_OSCSRC_M) <= SYSCTL_OSCSRC_M);\n\n    //\n    // Don't proceed to the PLL initialization if an MCD failure is detected.\n    //\n    if(SysCtl_isMCDClockFailureDetected())\n    {\n        //\n        // OSCCLKSRC2 failure detected. Returning false. You'll need to clear\n        // the MCD error.\n        //\n        status = false;\n    }\n    else\n    {\n        //\n        // Configure oscillator source\n        //\n        oscSource = config & SYSCTL_OSCSRC_M;\n        SysCtl_selectOscSource(oscSource);\n\n        //\n        // Bypass PLL\n        //\n        EALLOW;\n        HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLCTL1) &=\n            ~SYSCTL_SYSPLLCTL1_PLLCLKEN;\n        EDIS;\n\n        //\n        // Delay of at least 60 OSCCLK cycles required post PLL bypass\n        //\n        SysCtl_delay(11U);\n\n        //\n        // Get the PLL multiplier settings from config\n        //\n        pllMult  = (uint32_t)((config & SYSCTL_IMULT_M) <<\n                              SYSCTL_SYSPLLMULT_IMULT_S);\n\n        pllMult |= (uint32_t)(((config & SYSCTL_FMULT_M) >> SYSCTL_FMULT_S) <<\n                              SYSCTL_SYSPLLMULT_FMULT_S);\n\n        pllMult |= (uint32_t)(((config & SYSCTL_ODIV_M) >> SYSCTL_ODIV_S) <<\n                              SYSCTL_SYSPLLMULT_ODIV_S);\n\n        //\n        // Get the PLL multipliers currently programmed\n        //\n        mult  = (uint32_t)((HWREG(CLKCFG_BASE + SYSCTL_O_SYSPLLMULT) &\n                            (uint32_t)SYSCTL_SYSPLLMULT_IMULT_M) >>\n                           (uint32_t)SYSCTL_SYSPLLMULT_IMULT_S);\n\n        mult |= (uint32_t)(HWREG(CLKCFG_BASE + SYSCTL_O_SYSPLLMULT) &\n                                 SYSCTL_SYSPLLMULT_FMULT_M);\n\n        mult |= (uint32_t)(HWREG(CLKCFG_BASE + SYSCTL_O_SYSPLLMULT) &\n                           SYSCTL_SYSPLLMULT_ODIV_M);\n\n        //\n        // Lock PLL only if the multipliers need update\n        //\n        if(mult !=  pllMult)\n        {\n            //\n            // Configure PLL if enabled\n            //\n            if((config & SYSCTL_PLL_ENABLE) == SYSCTL_PLL_ENABLE)\n            {\n                //\n                // Set dividers to /1\n                //\n                EALLOW;\n                HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) = 0U;\n                EDIS;\n\n                //\n                // Loop to retry locking the PLL should the DCC module\n                // indicate that it was not successful.\n                //\n                for(retries = 0U; (retries < SYSCTL_PLL_RETRIES); retries++)\n                {\n                    //\n                    // Turn off PLL\n                    //\n                    EALLOW;\n                    HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLCTL1) &=\n                        ~SYSCTL_SYSPLLCTL1_PLLEN;\n\n                    SysCtl_delay(3U);\n\n                    //\n                    // Write multiplier, which automatically turns on the PLL\n                    //\n                    HWREG(CLKCFG_BASE + SYSCTL_O_SYSPLLMULT) = pllMult;\n\n                    //\n                    // Wait for the SYSPLL lock counter or a timeout\n                    //\n                    timeout = SYSCTL_PLLLOCK_TIMEOUT;\n                    pllLockStatus = HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLSTS) &\n                                    SYSCTL_SYSPLLSTS_LOCKS;\n\n                    while((pllLockStatus != 1U) && (timeout != 0U))\n                    {\n                        pllLockStatus = HWREGH(CLKCFG_BASE +\n                                               SYSCTL_O_SYSPLLSTS) &\n                                        SYSCTL_SYSPLLSTS_LOCKS;\n                        timeout--;\n                    }\n                    EDIS;\n\n                    //\n                    // Check PLL Frequency using DCC\n                    //\n                    status = SysCtl_isPLLValid(oscSource,\n                                              (config &\n                                              ((uint32_t)SYSCTL_IMULT_M |\n                                               (uint32_t)SYSCTL_FMULT_M |\n                                               (uint32_t)SYSCTL_ODIV_M)));\n\n                    //\n                    // Check DCC Status, if no error break the loop\n                    //\n                    if(status)\n                    {\n                        break;\n                    }\n                }\n            }\n            else\n            {\n                status = true;\n            }\n        }\n      else\n        {\n            status = true;\n        }\n\n\n        //\n        // If PLL locked successfully, configure the dividers\n        //\n        if(status)\n        {\n            //\n            // Set divider to produce slower output frequency to limit current\n            // increase.\n            //\n            divSel = (uint16_t)(config & SYSCTL_SYSDIV_M) >> SYSCTL_SYSDIV_S;\n\n            EALLOW;\n            if(divSel != (126U / 2U))\n            {\n                HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) =\n                    (HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) &\n                     ~(uint16_t)SYSCTL_SYSCLKDIVSEL_PLLSYSCLKDIV_M) |\n                    (divSel + 1U);\n            }\n            else\n            {\n                HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) =\n                    (HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) &\n                     ~(uint16_t)SYSCTL_SYSCLKDIVSEL_PLLSYSCLKDIV_M) | divSel;\n            }\n\n            EDIS;\n\n            //\n            // Enable PLLSYSCLK is fed from system PLL clock\n            //\n            EALLOW;\n            HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLCTL1) |=\n                SYSCTL_SYSPLLCTL1_PLLCLKEN;\n            EDIS;\n\n            //\n            // ~200 PLLSYSCLK delay to allow voltage regulator to stabilize\n            // prior to increasing entire system clock frequency.\n            //\n            SysCtl_delay(40U);\n\n            //\n            // Set the divider to user value\n            //\n            EALLOW;\n            HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) =\n                (HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) &\n                 ~SYSCTL_SYSCLKDIVSEL_PLLSYSCLKDIV_M) | divSel;\n            EDIS;\n        }\n    }\n\n    return(status);\n}\n\n//*****************************************************************************\n//\n// SysCtl_selectXTAL()\n//\n//*****************************************************************************\nvoid\nSysCtl_selectXTAL(void)\n{\n    EALLOW;\n\n    //\n    // Turn on XTAL and select crystal mode\n    //\n    HWREGH(CLKCFG_BASE + SYSCTL_O_XTALCR) &= ~SYSCTL_XTALCR_OSCOFF;\n    HWREGH(CLKCFG_BASE + SYSCTL_O_XTALCR) &= ~SYSCTL_XTALCR_SE;\n    EDIS;\n\n    //\n    // Wait for the X1 clock to saturate\n    //\n    SysCtl_pollX1Counter();\n\n    //\n    // Select XTAL as the oscillator source\n    //\n    EALLOW;\n    HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) =\n    ((HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &\n      (~SYSCTL_CLKSRCCTL1_OSCCLKSRCSEL_M)) |\n     ((uint32_t)SYSCTL_OSCSRC_XTAL >> SYSCTL_OSCSRC_S));\n    EDIS;\n\n    //\n    // If a missing clock failure was detected, try waiting for the X1 counter\n    // to saturate again. Consider modifying this code to add a 10ms timeout.\n    //\n    while(SysCtl_isMCDClockFailureDetected())\n    {\n        //\n        // Clear the MCD failure\n        //\n        SysCtl_resetMCD();\n\n        //\n        // Wait for the X1 clock to saturate\n        //\n        SysCtl_pollX1Counter();\n\n        //\n        // Select XTAL as the oscillator source\n        //\n        EALLOW;\n        HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) =\n        ((HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &\n          (~SYSCTL_CLKSRCCTL1_OSCCLKSRCSEL_M)) |\n         ((uint32_t)SYSCTL_OSCSRC_XTAL >> SYSCTL_OSCSRC_S));\n        EDIS;\n    }\n}\n\n//*****************************************************************************\n//\n// SysCtl_selectXTALSingleEnded()\n//\n//*****************************************************************************\nvoid\nSysCtl_selectXTALSingleEnded(void)\n{\n    //\n    // Turn on XTAL and select single-ended mode.\n    //\n    EALLOW;\n    HWREGH(CLKCFG_BASE + SYSCTL_O_XTALCR) &= ~SYSCTL_XTALCR_OSCOFF;\n    HWREGH(CLKCFG_BASE + SYSCTL_O_XTALCR) |= SYSCTL_XTALCR_SE;\n    EDIS;\n\n    //\n    // Wait for the X1 clock to saturate\n    //\n    SysCtl_pollX1Counter();\n\n    //\n    // Select XTAL as the oscillator source\n    //\n    EALLOW;\n    HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) =\n    ((HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &\n      (~SYSCTL_CLKSRCCTL1_OSCCLKSRCSEL_M)) |\n     ((uint32_t)SYSCTL_OSCSRC_XTAL >> SYSCTL_OSCSRC_S));\n    EDIS;\n\n    //\n    // Something is wrong with the oscillator module. Replace the ESTOP0 with\n    // an appropriate error-handling routine.\n    //\n    while(SysCtl_isMCDClockFailureDetected())\n    {\n        ESTOP0;\n    }\n}\n\n//*****************************************************************************\n//\n// SysCtl_selectOscSource()\n//\n//*****************************************************************************\nvoid\nSysCtl_selectOscSource(uint32_t oscSource)\n{\n    ASSERT((oscSource == SYSCTL_OSCSRC_OSC1) |\n           (oscSource == SYSCTL_OSCSRC_OSC2) |\n           (oscSource == SYSCTL_OSCSRC_XTAL) |\n           (oscSource == SYSCTL_OSCSRC_XTAL_SE));\n\n    //\n    // Select the specified source.\n    //\n    EALLOW;\n    switch(oscSource)\n    {\n        case SYSCTL_OSCSRC_OSC2:\n            //\n            // Turn on INTOSC2\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &=\n                ~SYSCTL_CLKSRCCTL1_INTOSC2OFF;\n\n            SYSCTL_CLKSRCCTL1_DELAY;\n\n            //\n            // Clk Src = INTOSC2\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &=\n                ~SYSCTL_CLKSRCCTL1_OSCCLKSRCSEL_M;\n\n            break;\n\n        case SYSCTL_OSCSRC_XTAL:\n            //\n            // Select XTAL in crystal mode and wait for it to power up\n            //\n            SysCtl_selectXTAL();\n            break;\n\n        case SYSCTL_OSCSRC_XTAL_SE:\n            //\n            // Select XTAL in single-ended mode and wait for it to power up\n            //\n            SysCtl_selectXTALSingleEnded();\n            break;\n\n        case SYSCTL_OSCSRC_OSC1:\n            //\n            // Clk Src = INTOSC1\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) =\n                   (HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &\n                    ~SYSCTL_CLKSRCCTL1_OSCCLKSRCSEL_M) |\n                   ((uint32_t)SYSCTL_OSCSRC_OSC1 >> SYSCTL_OSCSRC_S);\n\n            break;\n\n        default:\n            //\n            // Do nothing. Not a valid oscSource value.\n            //\n            break;\n    }\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// SysCtl_getLowSpeedClock()\n//\n//*****************************************************************************\nuint32_t\nSysCtl_getLowSpeedClock(uint32_t clockInHz)\n{\n    uint32_t clockOut;\n\n    //\n    // Get the main system clock\n    //\n    clockOut = SysCtl_getClock(clockInHz);\n\n    //\n    // Apply the divider to the main clock\n    //\n    if((HWREG(CLKCFG_BASE + SYSCTL_O_LOSPCP) &\n        SYSCTL_LOSPCP_LSPCLKDIV_M) != 0U)\n    {\n        clockOut /= (2U * (HWREG(CLKCFG_BASE + SYSCTL_O_LOSPCP) &\n                            SYSCTL_LOSPCP_LSPCLKDIV_M));\n    }\n\n    return(clockOut);\n}\n\n//*****************************************************************************\n//\n// SysCtl_getDeviceParametric()\n//\n//*****************************************************************************\nuint16_t\nSysCtl_getDeviceParametric(SysCtl_DeviceParametric parametric)\n{\n    uint32_t value;\n\n    //\n    // Get requested parametric value\n    //\n    switch(parametric)\n    {\n        case SYSCTL_DEVICE_QUAL:\n            //\n            // Qualification Status\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDL) &\n                      SYSCTL_PARTIDL_QUAL_M) >> SYSCTL_PARTIDL_QUAL_S);\n            break;\n\n        case SYSCTL_DEVICE_PINCOUNT:\n            //\n            // Pin Count\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDL) &\n                      SYSCTL_PARTIDL_PIN_COUNT_M) >>\n                     SYSCTL_PARTIDL_PIN_COUNT_S);\n            break;\n\n        case SYSCTL_DEVICE_INSTASPIN:\n            //\n            // InstaSPIN Feature Set\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDL) &\n                      SYSCTL_PARTIDL_INSTASPIN_M) >>\n                     SYSCTL_PARTIDL_INSTASPIN_S);\n            break;\n\n        case SYSCTL_DEVICE_FLASH:\n            //\n            // Flash Size (KB)\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDL) &\n                      SYSCTL_PARTIDL_FLASH_SIZE_M) >>\n                     SYSCTL_PARTIDL_FLASH_SIZE_S);\n            break;\n\n        case SYSCTL_DEVICE_FAMILY:\n            //\n            // Device Family\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDH) &\n                      SYSCTL_PARTIDH_FAMILY_M) >> SYSCTL_PARTIDH_FAMILY_S);\n            break;\n\n        case SYSCTL_DEVICE_PARTNO:\n            //\n            // Part Number\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDH) &\n                      SYSCTL_PARTIDH_PARTNO_M) >> SYSCTL_PARTIDH_PARTNO_S);\n            break;\n\n        case SYSCTL_DEVICE_CLASSID:\n            //\n            // Class ID\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDH) &\n                      SYSCTL_PARTIDH_DEVICE_CLASS_ID_M) >>\n                     SYSCTL_PARTIDH_DEVICE_CLASS_ID_S);\n            break;\n\n        default:\n            //\n            // Not a valid value for PARTID register\n            //\n            value = 0U;\n            break;\n    }\n\n    return((uint16_t)value);\n}\n//*****************************************************************************\n//\n// SysCtl_isPLLValid()\n//\n//*****************************************************************************\nbool\nSysCtl_isPLLValid(uint32_t oscSource, uint32_t pllMultDiv)\n{\n    uint32_t imult, fmult, odiv, base;\n\n    DCC_Count0ClockSource dccClkSrc0;\n    DCC_Count1ClockSource dccClkSrc1;\n    uint32_t dccCounterSeed0, dccCounterSeed1, dccValidSeed0;\n\n    switch(oscSource)\n    {\n        case SYSCTL_OSCSRC_OSC2:\n            //\n            // Select DCC Clk Src0 as INTOSC2\n            //\n            dccClkSrc0 = DCC_COUNT0SRC_INTOSC2;\n            break;\n        case SYSCTL_OSCSRC_XTAL:\n        case SYSCTL_OSCSRC_XTAL_SE:\n            //\n            // Select DCC Clk Src0 as XTAL\n            //\n            dccClkSrc0 = DCC_COUNT0SRC_XTAL;\n            break;\n        case SYSCTL_OSCSRC_OSC1:\n            //\n            // Select DCC Clk Src0 as INTOSC1\n            //\n            dccClkSrc0 = DCC_COUNT0SRC_INTOSC1;\n            break;\n        default:\n            //\n            // Select DCC Clk Src0 as INTOSC1\n            //\n            dccClkSrc0 = DCC_COUNT0SRC_INTOSC1;\n            break;\n    }\n\n    //\n    // Setting Counter0 & Valid Seed Value with +/-12% tolerance\n    //\n    dccCounterSeed0 = (uint32_t)SYSCTL_DCC_COUNTER0_WINDOW - 12U;\n    dccValidSeed0 = 24U;\n\n    //\n    // Select DCC0 for PLL validation\n    //\n    base = DCC0_BASE;\n\n    //\n    // Select DCC Clk Src1 as SYSPLL\n    //\n    dccClkSrc1 = DCC_COUNT1SRC_PLL;\n\n    imult = pllMultDiv & SYSCTL_IMULT_M;\n    fmult = pllMultDiv & SYSCTL_FMULT_M;\n    odiv = (pllMultDiv & SYSCTL_ODIV_M) >> SYSCTL_ODIV_S;\n\n    //\n    // Multiplying Counter-0 window with PLL Integer Multiplier\n    //\n    dccCounterSeed1 = SYSCTL_DCC_COUNTER0_WINDOW * imult / (odiv + 1U);\n\n    //\n    // Multiplying Counter-0 window with PLL Fractional Multiplier\n    //\n    switch(fmult)\n    {\n        case SYSCTL_FMULT_1_4:\n            //\n            // FMULT * CNTR0 Window = 0.25 * 100 = 25, gets added to cntr0\n            // seed value\n            //\n            dccCounterSeed1 = dccCounterSeed1 + 25U;\n            break;\n        case SYSCTL_FMULT_1_2:\n            //\n            // FMULT * CNTR0 Window = 0.5 * 100 = 50, gets added to cntr0\n            // seed value\n            //\n            dccCounterSeed1 = dccCounterSeed1 + 50U;\n            break;\n        case SYSCTL_FMULT_3_4:\n            //\n            // FMULT * CNTR0 Window = 0.75 * 100 = 75, gets added to cntr0\n            // seed value\n            //\n            dccCounterSeed1 = dccCounterSeed1 + 75U;\n            break;\n        default:\n            //\n            // No fractional multiplier\n            //\n            dccCounterSeed1 = dccCounterSeed1;\n            break;\n    }\n\n\n    //\n    // Enable peripheral clock to DCC\n    //\n    SysCtl_enablePeripheral(SYSCTL_PERIPH_CLK_DCC0);\n\n    //\n    // Clear Error & Done Flag\n    //\n    DCC_clearErrorFlag(base);\n    DCC_clearDoneFlag(base);\n\n    //\n    // Disable DCC\n    //\n    DCC_disableModule(base);\n\n    //\n    // Disable Error Signal\n    //\n    DCC_disableErrorSignal(base);\n\n    //\n    // Disable Done Signal\n    //\n    DCC_disableDoneSignal(base);\n\n    //\n    // Configure Clock Source0 to whatever set as a clock source for PLL\n    //\n    DCC_setCounter0ClkSource(base, dccClkSrc0);\n\n    //\n    // Configure Clock Source1 to PLL\n    //\n    DCC_setCounter1ClkSource(base, dccClkSrc1);\n\n    //\n    // Configure COUNTER-0, COUNTER-1 & Valid Window\n    //\n    DCC_setCounterSeeds(base, dccCounterSeed0, dccValidSeed0,\n                        dccCounterSeed1);\n\n    //\n    // Enable Single Shot mode\n    //\n    DCC_enableSingleShotMode(base, DCC_MODE_COUNTER_ZERO);\n\n    //\n    // Enable Error Signal\n    //\n    DCC_enableErrorSignal(base);\n\n    //\n    // Enable Done Signal\n    //\n    DCC_enableDoneSignal(base);\n\n    //\n    // Enable DCC to start counting\n    //\n    DCC_enableModule(base);\n\n    //\n    // Timeout for the loop\n    //\n    uint32_t timeout = dccCounterSeed1;\n\n    //\n    // Wait until Error or Done Flag is generated\n    //\n    while(((HWREGH(base + DCC_O_STATUS) &\n            (DCC_STATUS_ERR | DCC_STATUS_DONE)) == 0U) && (timeout != 0U))\n\n    {\n        timeout--;\n    }\n\n\n    //\n    // Returns true if DCC completes without error\n    //\n\n    return(((HWREGH(base + DCC_O_STATUS) &\n             (DCC_STATUS_ERR | DCC_STATUS_DONE)) == DCC_STATUS_DONE) &&\n            (HWREGH(base + DCC_O_CNT0) == 0U) &&\n            (HWREGH(base + DCC_O_VALID0) == 0U) &&\n            (HWREGH(base + DCC_O_CNT1) == 0U));\n}\n\n"}],"trace":"{\"model\":\"StepperRTM\",\"sources\":[\"StepperRTM.c\",\"StepperRTM.h\"],\"categoricalProps\":[\"ModelElemCategory\",\"StorageClass\"],\"categoricalValues\":[\"InternalData\",\"Default\",\"Inports\"],\"sidPrefixes\":[\"StepperRTM\"],\"fileRecords\":{\"1\":{\"records\":[{\"tk\":[39,3,39,11],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[39,12,39,19],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[39,19,39,20],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[44,3,44,11],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[44,12,44,18],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[44,18,44,19],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[45,3,45,11],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[45,12,45,35],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[45,35,45,36],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[46,3,46,11],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[46,12,46,28],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[46,28,46,29],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[47,3,47,11],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[47,12,47,19],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[47,19,47,20],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[52,3,52,13],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[52,14,52,28],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[52,28,52,29],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[52,29,52,30],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[52,30,52,31],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[52,31,52,32],\"els\":[\"1:20\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[57,3,57,11],\"els\":[\"1:24\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[57,12,57,20],\"els\":[\"1:24\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[57,20,57,21],\"els\":[\"1:24\"],\"ct\":{\"1\":1,\"0\":2}}]},\"0\":{\"records\":[{\"tk\":[54,3,54,5],\"els\":[\"0:20\"]},{\"tk\":[56,5,56,18],\"els\":[\"0:20\"]},{\"tk\":[56,19,56,42],\"els\":[\"0:20\"]},{\"tk\":[56,43,56,44],\"els\":[\"0:20\"]},{\"tk\":[56,45,56,47],\"els\":[\"0:20\"]},{\"tk\":[60,5,60,18],\"els\":[\"0:20:10\",\"0:20\"]},{\"tk\":[60,19,60,35],\"els\":[\"0:20:10\",\"0:20\"]},{\"tk\":[60,36,60,37],\"els\":[\"0:20:10\",\"0:20\"]},{\"tk\":[60,38,60,57],\"els\":[\"0:20:10\",\"0:20\"]},{\"tk\":[63,5,63,17],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[63,18,63,25],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[63,26,63,27],\"els\":[\"0:20::124#out:2\",\"0:20:10\",\"0:20\"]},{\"tk\":[63,28,63,30],\"els\":[\"0:20:10\",\"0:20\"]},{\"tk\":[66,5,66,7],\"els\":[\"0:20:4\"]},{\"tk\":[66,9,66,22],\"els\":[\"0:20:4\"]},{\"tk\":[66,23,66,30],\"els\":[\"0:20:4\"]},{\"tk\":[66,31,66,33],\"els\":[\"0:20:4\"]},{\"tk\":[66,34,66,36],\"els\":[\"0:20:4\"]},{\"tk\":[69,7,69,20],\"els\":[\"0:20:23\",\"0:20:162\",\"0:20:4\"]},{\"tk\":[69,21,69,28],\"els\":[\"0:20:23\",\"0:20:162\",\"0:20:4\"]},{\"tk\":[69,29,69,30],\"els\":[\"0:20:23\",\"0:20:162\",\"0:20:4\"]},{\"tk\":[69,31,69,49],\"els\":[\"0:20:23\",\"0:20:162\",\"0:20:4\"]},{\"tk\":[72,7,72,19],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[72,20,72,27],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[72,28,72,29],\"els\":[\"0:20:23\",\"0:20:162\",\"0:20:4\"]},{\"tk\":[72,30,72,32],\"els\":[\"0:20:23\",\"0:20:162\",\"0:20:4\"]},{\"tk\":[74,7,74,19],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[74,20,74,27],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[74,28,74,29],\"els\":[\"0:20:23\",\"0:20:4\"]},{\"tk\":[74,30,74,32],\"els\":[\"0:20:23\",\"0:20:4\"]},{\"tk\":[77,7,77,9],\"els\":[\"0:20:23\",\"0:20:4\"]},{\"tk\":[77,11,77,24],\"els\":[\"0:20:170\",\"0:20:23\",\"0:20:4\"]},{\"tk\":[77,25,77,31],\"els\":[\"0:20:170\",\"0:20:23\",\"0:20:4\"]},{\"tk\":[77,32,77,34],\"els\":[\"0:20:170\",\"0:20:23\",\"0:20:4\"]},{\"tk\":[77,35,77,47],\"els\":[\"0:24\"]},{\"tk\":[77,48,77,56],\"els\":[\"0:24\"]},{\"tk\":[79,9,79,22],\"els\":[\"0:20:162\",\"0:20:23\",\"0:20:4\"]},{\"tk\":[79,23,79,30],\"els\":[\"0:20:162\",\"0:20:23\",\"0:20:4\"]},{\"tk\":[79,31,79,32],\"els\":[\"0:20:162\",\"0:20:23\",\"0:20:4\"]},{\"tk\":[79,33,79,55],\"els\":[\"0:20:162\",\"0:20:23\",\"0:20:4\"]},{\"tk\":[82,9,82,21],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[82,22,82,29],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[82,30,82,31],\"els\":[\"0:20:162\",\"0:20:23\",\"0:20:4\"]},{\"tk\":[82,32,82,34],\"els\":[\"0:20:162\",\"0:20:23\",\"0:20:4\"]},{\"tk\":[83,9,83,22],\"els\":[\"0:20:162\",\"0:20:23\",\"0:20:4\"]},{\"tk\":[83,23,83,29],\"els\":[\"0:20:162\",\"0:20:23\",\"0:20:4\"]},{\"tk\":[83,29,83,31],\"els\":[\"0:20:162\",\"0:20:23\",\"0:20:4\"]},{\"tk\":[87,5,87,17],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[87,18,87,25],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[87,26,87,27],\"els\":[\"0:20:10\"]},{\"tk\":[87,28,87,30],\"els\":[\"0:20:10\"]},{\"tk\":[90,5,90,7],\"els\":[\"0:20:10\"]},{\"tk\":[90,9,90,10],\"els\":[\"0:20:11\",\"0:20:10\"]},{\"tk\":[90,10,90,17],\"els\":[\"0:20:11\",\"0:20:10\"]},{\"tk\":[90,18,90,20],\"els\":[\"0:20:11\",\"0:20:10\"]},{\"tk\":[90,21,90,41],\"els\":[\"0:20:11\",\"0:20:10\"]},{\"tk\":[92,7,92,20],\"els\":[\"0:20:4\",\"0:20:10\"]},{\"tk\":[92,21,92,37],\"els\":[\"0:20:4\",\"0:20:10\"]},{\"tk\":[92,38,92,39],\"els\":[\"0:20:4\",\"0:20:10\"]},{\"tk\":[92,40,92,58],\"els\":[\"0:20:4\",\"0:20:10\"]},{\"tk\":[96,7,96,20],\"els\":[\"0:20:23\",\"0:20:4\",\"0:20:10\"]},{\"tk\":[96,21,96,28],\"els\":[\"0:20:23\",\"0:20:4\",\"0:20:10\"]},{\"tk\":[96,29,96,30],\"els\":[\"0:20:23\",\"0:20:4\",\"0:20:10\"]},{\"tk\":[96,31,96,49],\"els\":[\"0:20:23\",\"0:20:4\",\"0:20:10\"]},{\"tk\":[99,7,99,19],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[99,20,99,27],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[99,28,99,29],\"els\":[\"0:20:23\",\"0:20:4\",\"0:20:10\"]},{\"tk\":[99,30,99,32],\"els\":[\"0:20:23\",\"0:20:4\",\"0:20:10\"]},{\"tk\":[123,3,123,16],\"els\":[\"0:20::110\"]},{\"tk\":[123,17,123,18],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[123,22,123,41],\"els\":[\"0:22\"]},{\"tk\":[123,41,123,42],\"els\":[\"0:22\",\"0:20::110\",\"0:20\"]},{\"tk\":[123,42,123,43],\"els\":[\"0:20::110\",\"0:20\",\"0:22\"]},{\"tk\":[123,45,123,46],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[123,47,123,49],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[123,51,123,53],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[124,22,124,40],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[124,41,124,55],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[124,55,124,56],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[124,56,124,57],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[124,59,124,61],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[124,62,124,71],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[124,74,124,76],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[125,21,125,39],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[125,40,125,54],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[125,54,125,55],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[125,55,125,56],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[125,58,125,60],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[125,61,125,80],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[126,11,126,12],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[126,16,126,35],\"els\":[\"0:22\"]},{\"tk\":[126,35,126,36],\"els\":[\"0:22\",\"0:20::110\",\"0:20\"]},{\"tk\":[126,36,126,37],\"els\":[\"0:20::110\",\"0:20\",\"0:22\"]},{\"tk\":[126,39,126,40],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[126,41,126,43],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[126,45,126,47],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[127,16,127,34],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[127,35,127,49],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[127,49,127,50],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[127,50,127,51],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[127,53,127,55],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[127,56,127,65],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[127,68,127,70],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[128,15,128,33],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[128,34,128,48],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[128,48,128,49],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[128,49,128,50],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[128,52,128,54],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[128,55,128,74],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[129,3,129,5],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[129,7,129,20],\"els\":[\"0:20::110\"]},{\"tk\":[129,21,129,23],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[131,5,131,10],\"els\":[\"0:20::110\"]},{\"tk\":[131,11,131,12],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[131,13,131,14],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[131,23,131,36],\"els\":[\"0:20::110\"]},{\"tk\":[131,37,131,38],\"els\":[\"0:20::110\"]},{\"tk\":[131,39,131,40],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[131,48,131,67],\"els\":[\"0:22\"]},{\"tk\":[131,67,131,68],\"els\":[\"0:22\",\"0:20::110\",\"0:20\"]},{\"tk\":[131,68,131,69],\"els\":[\"0:20::110\",\"0:20\",\"0:22\"]},{\"tk\":[131,71,131,72],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[131,73,131,74],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[131,75,131,76],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[132,23,132,37],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[132,40,132,55],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[132,58,132,68],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[133,5,133,8],\"els\":[\"0:20::110\"]},{\"tk\":[133,9,133,10],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[133,11,133,12],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[133,31,133,32],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[133,40,133,59],\"els\":[\"0:22\"]},{\"tk\":[133,59,133,60],\"els\":[\"0:22\",\"0:20::110\",\"0:20\"]},{\"tk\":[133,60,133,61],\"els\":[\"0:20::110\",\"0:20\",\"0:22\"]},{\"tk\":[133,63,133,64],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[133,65,133,66],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[133,67,133,68],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[134,21,134,35],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[134,38,134,53],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[134,56,134,66],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[137,5,137,7],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[137,11,137,16],\"els\":[\"0:20::110\"]},{\"tk\":[137,17,137,18],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[137,19,137,23],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[137,25,137,27],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[137,28,137,30],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[137,31,137,32],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[137,33,137,38],\"els\":[\"0:20::110\"]},{\"tk\":[137,39,137,40],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[137,41,137,42],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[137,48,137,53],\"els\":[\"0:20::110\"]},{\"tk\":[137,54,137,55],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[137,56,137,59],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[137,61,137,63],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[137,64,137,65],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[139,7,139,14],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[139,15,139,16],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[139,17,139,38],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[140,7,140,38],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[140,38,140,39],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[140,39,140,40],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[140,40,140,47],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[140,47,140,48],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[143,5,143,7],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[143,11,143,14],\"els\":[\"0:20::110\"]},{\"tk\":[143,15,143,16],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[143,17,143,21],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[143,23,143,25],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[143,26,143,28],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[143,29,143,30],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[143,31,143,34],\"els\":[\"0:20::110\"]},{\"tk\":[143,35,143,36],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[143,37,143,38],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[143,44,143,47],\"els\":[\"0:20::110\"]},{\"tk\":[143,48,143,49],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[143,50,143,53],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[143,55,143,57],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[143,58,143,59],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[145,7,145,14],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[145,15,145,16],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[145,17,145,37],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[146,7,146,38],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[146,38,146,39],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[146,39,146,40],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[146,40,146,47],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[146,47,146,48],\"els\":[\"0:20::124\",\"0:20::110\",\"0:20\"]},{\"tk\":[151,3,151,21],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[151,22,151,36],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[151,36,151,37],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[151,37,151,38],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[151,40,151,41],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[151,55,151,74],\"els\":[\"0:22\"]},{\"tk\":[151,74,151,75],\"els\":[\"0:22\",\"0:20::110\",\"0:20\"]},{\"tk\":[151,75,151,76],\"els\":[\"0:20::110\",\"0:20\",\"0:22\"]},{\"tk\":[151,78,151,79],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[152,5,152,7],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[153,3,153,21],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[153,22,153,36],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[153,36,153,37],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[153,37,153,38],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[153,40,153,41],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[153,55,153,74],\"els\":[\"0:22\"]},{\"tk\":[153,74,153,75],\"els\":[\"0:22\",\"0:20::110\",\"0:20\"]},{\"tk\":[153,75,153,76],\"els\":[\"0:20::110\",\"0:20\",\"0:22\"]},{\"tk\":[153,78,153,79],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[154,5,154,7],\"els\":[\"0:20::110\",\"0:20\"]},{\"tk\":[157,4,157,15],\"els\":[\"0:19\"]},{\"tk\":[157,16,157,17],\"els\":[\"0:19\"]},{\"tk\":[157,18,157,30],\"els\":[\"0:19\"]},{\"tk\":[157,31,157,38],\"els\":[\"0:19\"]},{\"tk\":[176,3,176,16],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[176,17,176,24],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[176,25,176,26],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[176,27,176,56],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[177,3,177,16],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[177,17,177,40],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[177,41,177,42],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[177,43,177,45],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[178,3,178,16],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[178,17,178,33],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[178,34,178,35],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[178,36,178,65],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[179,3,179,16],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[179,17,179,23],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[179,24,179,25],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[179,26,179,28],\"els\":[\"0:20\",\"0:20::124\"]},{\"tk\":[180,3,180,15],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[180,16,180,23],\"els\":[\"0:20::124#out:2\"]},{\"tk\":[180,24,180,25],\"els\":[\"0:20::124#out:2\",\"0:20\",\"0:20::124\"]},{\"tk\":[180,26,180,28],\"els\":[\"0:20\",\"0:20::124\"]}]}}}","blocks":[{"RTWName":"<Root>/DesSteps","SIDString":"StepperRTM:24"},{"RTWName":"<Root>/Stepper_Trigger","SIDString":"StepperRTM:22"},{"RTWName":"<S1>:4","SIDString":"StepperRTM:20:4"},{"RTWName":"<S1>:162","SIDString":"StepperRTM:20:162"},{"RTWName":"<S1>:23","SIDString":"StepperRTM:20:23"},{"RTWName":"<S1>:10","SIDString":"StepperRTM:20:10"},{"RTWName":"<S1>:12","SIDString":"StepperRTM:20:12"},{"RTWName":"<S1>:11","SIDString":"StepperRTM:20:11"},{"RTWName":"<S1>:24","SIDString":"StepperRTM:20:24"},{"RTWName":"<S1>:170","SIDString":"StepperRTM:20:170"},{"RTWName":"<S1>:171","SIDString":"StepperRTM:20:171"},{"RTWName":"<Root>/StepBit","SIDString":"StepperRTM:19"},{"RTWName":"<Root>/Chart","SIDString":"StepperRTM:20"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};